
c:/Users/janka/Documents/ParticleProjects/lock_app/target/2.0.0-rc.3/argon/lock_app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000020a4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d60c0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e5cc  000d60c4  0001e5cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001b8  2003e638  2003e638  0002e638  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6130  000d6130  00026130  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6158  000d6158  00026158  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00126c03  00000000  00000000  0002615c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00014817  00000000  00000000  0014cd5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002c125  00000000  00000000  00161576  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000027b8  00000000  00000000  0018d69b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000077c8  00000000  00000000  0018fe53  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00035bd8  00000000  00000000  0019761b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000339b9  00000000  00000000  001cd1f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010a843  00000000  00000000  00200bac  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006b84  00000000  00000000  0030b3f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fe87 	bl	d5d40 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fea9 	bl	d5d90 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e5cc 	.word	0x2003e5cc
   d4048:	000d60c4 	.word	0x000d60c4
   d404c:	2003e638 	.word	0x2003e638
   d4050:	2003e638 	.word	0x2003e638
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f000 fdd7 	bl	d4c10 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d6094 	.word	0x000d6094
   d407c:	000d60b8 	.word	0x000d60b8

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b826 	b.w	d40d0 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f871 	bl	d416c <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f000 bd81 	b.w	d4b94 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 bb83 	b.w	d479c <malloc>

000d4096 <_Znaj>:
   d4096:	f000 bb81 	b.w	d479c <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 bb87 	b.w	d47ac <free>

000d409e <_ZdaPv>:
   d409e:	f000 bb85 	b.w	d47ac <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZNSt17_Function_handlerIFi6StringEPFiPKcEE9_M_invokeERKSt9_Any_dataOS0_>:

    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	return (*_Base::_M_get_pointer(__functor))(
   d40b2:	6803      	ldr	r3, [r0, #0]
   d40b4:	6808      	ldr	r0, [r1, #0]
   d40b6:	4718      	bx	r3

000d40b8 <_ZNSt14_Function_base13_Base_managerIPFiPKcEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	  switch (__op)
   d40b8:	2a01      	cmp	r2, #1
   d40ba:	d003      	beq.n	d40c4 <_ZNSt14_Function_base13_Base_managerIPFiPKcEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
   d40bc:	2a02      	cmp	r2, #2
   d40be:	d003      	beq.n	d40c8 <_ZNSt14_Function_base13_Base_managerIPFiPKcEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x10>
	}
   d40c0:	2000      	movs	r0, #0
   d40c2:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40c4:	6001      	str	r1, [r0, #0]
	      break;
   d40c6:	e7fb      	b.n	d40c0 <_ZNSt14_Function_base13_Base_managerIPFiPKcEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40c8:	680b      	ldr	r3, [r1, #0]
   d40ca:	6003      	str	r3, [r0, #0]
	}
   d40cc:	e7f8      	b.n	d40c0 <_ZNSt14_Function_base13_Base_managerIPFiPKcEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>
	...

000d40d0 <setup>:
// actuator for opening the door
int actuator = D6;
int actuator_val;

// setup() runs once, when the device is first turned on.
void setup() {
   d40d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // Set up actuator pin
  pinMode(actuator, OUTPUT);
   d40d2:	4c1b      	ldr	r4, [pc, #108]	; (d4140 <setup+0x70>)
   d40d4:	2101      	movs	r1, #1
   d40d6:	8820      	ldrh	r0, [r4, #0]
   d40d8:	f001 fd94 	bl	d5c04 <pinMode>
  digitalWrite(actuator, LOW);
   d40dc:	8820      	ldrh	r0, [r4, #0]
   d40de:	2100      	movs	r1, #0
   d40e0:	f001 fda1 	bl	d5c26 <digitalWrite>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d40e4:	2300      	movs	r3, #0
   d40e6:	4917      	ldr	r1, [pc, #92]	; (d4144 <setup+0x74>)
   d40e8:	4817      	ldr	r0, [pc, #92]	; (d4148 <setup+0x78>)
   d40ea:	2202      	movs	r2, #2
   d40ec:	f000 fb2e 	bl	d474c <spark_variable>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d40f0:	4a16      	ldr	r2, [pc, #88]	; (d414c <setup+0x7c>)
   d40f2:	4917      	ldr	r1, [pc, #92]	; (d4150 <setup+0x80>)
   d40f4:	4817      	ldr	r0, [pc, #92]	; (d4154 <setup+0x84>)
   d40f6:	f000 fe2c 	bl	d4d52 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d40fa:	4b17      	ldr	r3, [pc, #92]	; (d4158 <setup+0x88>)
   d40fc:	9300      	str	r3, [sp, #0]
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d40fe:	4b17      	ldr	r3, [pc, #92]	; (d415c <setup+0x8c>)
   d4100:	9303      	str	r3, [sp, #12]
    static bool _function(const char *funcKey, user_std_function_int_str_t func, void* reserved=NULL)
    {
        bool success = false;
        if (func) // if the call-wrapper has wrapped a callable object
        {
            auto wrapper = new user_std_function_int_str_t(func);
   d4102:	2010      	movs	r0, #16
	    _M_manager = &_My_handler::_M_manager;
   d4104:	4b16      	ldr	r3, [pc, #88]	; (d4160 <setup+0x90>)
   d4106:	9302      	str	r3, [sp, #8]
   d4108:	f7ff ffc3 	bl	d4092 <_Znwj>
   d410c:	4604      	mov	r4, r0
   d410e:	b178      	cbz	r0, d4130 <setup+0x60>
    _Function_base() : _M_manager(nullptr) { }
   d4110:	2300      	movs	r3, #0
   d4112:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4114:	9b02      	ldr	r3, [sp, #8]
      if (static_cast<bool>(__x))
   d4116:	b133      	cbz	r3, d4126 <setup+0x56>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4118:	2202      	movs	r2, #2
   d411a:	4669      	mov	r1, sp
   d411c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d411e:	9b03      	ldr	r3, [sp, #12]
   d4120:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4122:	9b02      	ldr	r3, [sp, #8]
   d4124:	60a3      	str	r3, [r4, #8]
            if (wrapper) {
                success = register_function(call_std_user_function, wrapper, funcKey);
   d4126:	4a0f      	ldr	r2, [pc, #60]	; (d4164 <setup+0x94>)
   d4128:	480f      	ldr	r0, [pc, #60]	; (d4168 <setup+0x98>)
   d412a:	4621      	mov	r1, r4
   d412c:	f000 fe11 	bl	d4d52 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
      if (_M_manager)
   d4130:	9b02      	ldr	r3, [sp, #8]
   d4132:	b11b      	cbz	r3, d413c <setup+0x6c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4134:	4669      	mov	r1, sp
   d4136:	2203      	movs	r2, #3
   d4138:	4608      	mov	r0, r1
   d413a:	4798      	blx	r3

  // For manual actuator testing
  Particle.variable("Actuator value", &actuator_val, INT);
  Particle.function("Actuator test", actuator_test);
  Particle.function("Actuator", actuator_command);
}
   d413c:	b004      	add	sp, #16
   d413e:	bd10      	pop	{r4, pc}
   d4140:	2003e5cc 	.word	0x2003e5cc
   d4144:	2003e640 	.word	0x2003e640
   d4148:	000d5e5c 	.word	0x000d5e5c
   d414c:	000d5e6b 	.word	0x000d5e6b
   d4150:	000d41b1 	.word	0x000d41b1
   d4154:	000d4cff 	.word	0x000d4cff
   d4158:	000d4265 	.word	0x000d4265
   d415c:	000d40b3 	.word	0x000d40b3
   d4160:	000d40b9 	.word	0x000d40b9
   d4164:	000d5e79 	.word	0x000d5e79
   d4168:	000d4d2b 	.word	0x000d4d2b

000d416c <loop>:


void loop() {
   d416c:	b508      	push	{r3, lr}
  actuator_val = analogRead(actuator);
   d416e:	4b03      	ldr	r3, [pc, #12]	; (d417c <loop+0x10>)
   d4170:	8818      	ldrh	r0, [r3, #0]
   d4172:	f001 fd71 	bl	d5c58 <analogRead>
   d4176:	4b02      	ldr	r3, [pc, #8]	; (d4180 <loop+0x14>)
   d4178:	6018      	str	r0, [r3, #0]

}
   d417a:	bd08      	pop	{r3, pc}
   d417c:	2003e5cc 	.word	0x2003e5cc
   d4180:	2003e640 	.word	0x2003e640

000d4184 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4184:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4186:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4188:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d418a:	b17c      	cbz	r4, d41ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d418c:	6863      	ldr	r3, [r4, #4]
   d418e:	3b01      	subs	r3, #1
   d4190:	6063      	str	r3, [r4, #4]
   d4192:	b95b      	cbnz	r3, d41ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4194:	6823      	ldr	r3, [r4, #0]
   d4196:	4620      	mov	r0, r4
   d4198:	689b      	ldr	r3, [r3, #8]
   d419a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d419c:	68a3      	ldr	r3, [r4, #8]
   d419e:	3b01      	subs	r3, #1
   d41a0:	60a3      	str	r3, [r4, #8]
   d41a2:	b91b      	cbnz	r3, d41ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d41a4:	6823      	ldr	r3, [r4, #0]
   d41a6:	4620      	mov	r0, r4
   d41a8:	68db      	ldr	r3, [r3, #12]
   d41aa:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d41ac:	4628      	mov	r0, r5
   d41ae:	bd38      	pop	{r3, r4, r5, pc}

000d41b0 <_Z13actuator_test6String>:

// Actuator manual testing function
int actuator_test(String command)
{
   d41b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d41b2:	4921      	ldr	r1, [pc, #132]	; (d4238 <_Z13actuator_test6String+0x88>)
   d41b4:	4d21      	ldr	r5, [pc, #132]	; (d423c <_Z13actuator_test6String+0x8c>)
   d41b6:	4606      	mov	r6, r0
   d41b8:	f000 fc0f 	bl	d49da <_ZNK6String6equalsEPKc>
  if (command == "on")
   d41bc:	4604      	mov	r4, r0
   d41be:	b198      	cbz	r0, d41e8 <_Z13actuator_test6String+0x38>
  {
    digitalWrite(actuator, HIGH);
   d41c0:	4b1f      	ldr	r3, [pc, #124]	; (d4240 <_Z13actuator_test6String+0x90>)
   d41c2:	2101      	movs	r1, #1
   d41c4:	8818      	ldrh	r0, [r3, #0]
   d41c6:	f001 fd2e 	bl	d5c26 <digitalWrite>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d41ca:	782b      	ldrb	r3, [r5, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d41cc:	491d      	ldr	r1, [pc, #116]	; (d4244 <_Z13actuator_test6String+0x94>)
   d41ce:	f88d 3000 	strb.w	r3, [sp]
   d41d2:	2200      	movs	r2, #0
   d41d4:	233c      	movs	r3, #60	; 0x3c
   d41d6:	a802      	add	r0, sp, #8
   d41d8:	f000 feae 	bl	d4f38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d41dc:	a803      	add	r0, sp, #12
   d41de:	f7ff ffd1 	bl	d4184 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("Actuator activated", PRIVATE);
    return 1;
   d41e2:	2001      	movs	r0, #1
  else
  {
    Particle.publish("Failure in command", PRIVATE);
    return -1;
  } 
}
   d41e4:	b004      	add	sp, #16
   d41e6:	bd70      	pop	{r4, r5, r6, pc}
   d41e8:	4917      	ldr	r1, [pc, #92]	; (d4248 <_Z13actuator_test6String+0x98>)
   d41ea:	4630      	mov	r0, r6
   d41ec:	f000 fbf5 	bl	d49da <_ZNK6String6equalsEPKc>
  else if (command == "off")
   d41f0:	4602      	mov	r2, r0
   d41f2:	b190      	cbz	r0, d421a <_Z13actuator_test6String+0x6a>
    digitalWrite(actuator, LOW);
   d41f4:	4b12      	ldr	r3, [pc, #72]	; (d4240 <_Z13actuator_test6String+0x90>)
   d41f6:	4621      	mov	r1, r4
   d41f8:	8818      	ldrh	r0, [r3, #0]
   d41fa:	f001 fd14 	bl	d5c26 <digitalWrite>
   d41fe:	782b      	ldrb	r3, [r5, #0]
   d4200:	4912      	ldr	r1, [pc, #72]	; (d424c <_Z13actuator_test6String+0x9c>)
   d4202:	f88d 3000 	strb.w	r3, [sp]
   d4206:	4622      	mov	r2, r4
   d4208:	233c      	movs	r3, #60	; 0x3c
   d420a:	a802      	add	r0, sp, #8
   d420c:	f000 fe94 	bl	d4f38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4210:	a803      	add	r0, sp, #12
   d4212:	f7ff ffb7 	bl	d4184 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 0;
   d4216:	4620      	mov	r0, r4
   d4218:	e7e4      	b.n	d41e4 <_Z13actuator_test6String+0x34>
   d421a:	782b      	ldrb	r3, [r5, #0]
   d421c:	490c      	ldr	r1, [pc, #48]	; (d4250 <_Z13actuator_test6String+0xa0>)
   d421e:	f88d 3000 	strb.w	r3, [sp]
   d4222:	a802      	add	r0, sp, #8
   d4224:	233c      	movs	r3, #60	; 0x3c
   d4226:	f000 fe87 	bl	d4f38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d422a:	a803      	add	r0, sp, #12
   d422c:	f7ff ffaa 	bl	d4184 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return -1;
   d4230:	f04f 30ff 	mov.w	r0, #4294967295
   d4234:	e7d6      	b.n	d41e4 <_Z13actuator_test6String+0x34>
   d4236:	bf00      	nop
   d4238:	000d5e82 	.word	0x000d5e82
   d423c:	2003e63c 	.word	0x2003e63c
   d4240:	2003e5cc 	.word	0x2003e5cc
   d4244:	000d5e85 	.word	0x000d5e85
   d4248:	000d5e98 	.word	0x000d5e98
   d424c:	000d5e9c 	.word	0x000d5e9c
   d4250:	000d5eb1 	.word	0x000d5eb1

000d4254 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d4254:	680b      	ldr	r3, [r1, #0]
   d4256:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d4258:	b113      	cbz	r3, d4260 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d425a:	685a      	ldr	r2, [r3, #4]
   d425c:	3201      	adds	r2, #1
   d425e:	605a      	str	r2, [r3, #4]
      }
   d4260:	4770      	bx	lr
	...

000d4264 <_Z16actuator_commandPKc>:
//      token: 6c8b51fd99f54209516d578e06384b56cc0a9113
// Actuator call function from https
// Curl string:
//    curl https://api.particle.io/v1/devices/DEVICE-ID/Actuator?access_token=ACCESS-TOKEN -d arg={access:<deny or allow>}
int actuator_command(const char *data)
{
   d4264:	b530      	push	{r4, r5, lr}
   d4266:	b099      	sub	sp, #100	; 0x64
inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
    return strcmp(s_, str) == 0;
   d4268:	4d5b      	ldr	r5, [pc, #364]	; (d43d8 <_Z16actuator_commandPKc+0x174>)
   d426a:	9003      	str	r0, [sp, #12]
    return parseCopy(json, strlen(json));
   d426c:	f001 fde3 	bl	d5e36 <strlen>
   d4270:	9903      	ldr	r1, [sp, #12]
   d4272:	4602      	mov	r2, r0
   d4274:	a804      	add	r0, sp, #16
   d4276:	f001 fc31 	bl	d5adc <_ZN5spark9JSONValue9parseCopyEPKcj>
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
   d427a:	9c06      	ldr	r4, [sp, #24]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d427c:	9b04      	ldr	r3, [sp, #16]
   d427e:	930e      	str	r3, [sp, #56]	; 0x38
   d4280:	a905      	add	r1, sp, #20
   d4282:	a80f      	add	r0, sp, #60	; 0x3c
   d4284:	f7ff ffe6 	bl	d4254 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4288:	aa0e      	add	r2, sp, #56	; 0x38
   d428a:	4621      	mov	r1, r4
   d428c:	a812      	add	r0, sp, #72	; 0x48
   d428e:	f001 fbe5 	bl	d5a5c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4292:	a80f      	add	r0, sp, #60	; 0x3c
   d4294:	f7ff ff76 	bl	d4184 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  
  JSONValue app_msg = JSONValue::parseCopy(data);
  JSONObjectIterator iter(app_msg);
  while(iter.next())
   d4298:	a812      	add	r0, sp, #72	; 0x48
   d429a:	f001 fbf7 	bl	d5a8c <_ZN5spark18JSONObjectIterator4nextEv>
   d429e:	2800      	cmp	r0, #0
   d42a0:	f000 8097 	beq.w	d43d2 <_Z16actuator_commandPKc+0x16e>
inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
    return JSONValue(v_, d_);
   d42a4:	9c16      	ldr	r4, [sp, #88]	; 0x58
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d42a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d42a8:	930e      	str	r3, [sp, #56]	; 0x38
   d42aa:	a913      	add	r1, sp, #76	; 0x4c
   d42ac:	a80f      	add	r0, sp, #60	; 0x3c
   d42ae:	f7ff ffd1 	bl	d4254 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d42b2:	aa0e      	add	r2, sp, #56	; 0x38
   d42b4:	4621      	mov	r1, r4
   d42b6:	a807      	add	r0, sp, #28
   d42b8:	f001 fabe 	bl	d5838 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d42bc:	a80f      	add	r0, sp, #60	; 0x3c
   d42be:	f7ff ff61 	bl	d4184 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return JSONString(t_, d_);
   d42c2:	9c09      	ldr	r4, [sp, #36]	; 0x24
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d42c4:	9b07      	ldr	r3, [sp, #28]
   d42c6:	930a      	str	r3, [sp, #40]	; 0x28
   d42c8:	a908      	add	r1, sp, #32
   d42ca:	a80b      	add	r0, sp, #44	; 0x2c
   d42cc:	f7ff ffc2 	bl	d4254 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d42d0:	aa0a      	add	r2, sp, #40	; 0x28
   d42d2:	4621      	mov	r1, r4
   d42d4:	a80e      	add	r0, sp, #56	; 0x38
   d42d6:	f001 fb9d 	bl	d5a14 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d42da:	a80b      	add	r0, sp, #44	; 0x2c
   d42dc:	f7ff ff52 	bl	d4184 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  {
    String val = iter.value().toString().data();
   d42e0:	9910      	ldr	r1, [sp, #64]	; 0x40
   d42e2:	a80a      	add	r0, sp, #40	; 0x28
   d42e4:	f000 fb4b 	bl	d497e <_ZN6StringC1EPKc>
   d42e8:	a80f      	add	r0, sp, #60	; 0x3c
   d42ea:	f7ff ff4b 	bl	d4184 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d42ee:	a808      	add	r0, sp, #32
   d42f0:	f7ff ff48 	bl	d4184 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return JSONString(k_, d_);
   d42f4:	9c15      	ldr	r4, [sp, #84]	; 0x54
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d42f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d42f8:	9307      	str	r3, [sp, #28]
   d42fa:	a913      	add	r1, sp, #76	; 0x4c
   d42fc:	a808      	add	r0, sp, #32
   d42fe:	f7ff ffa9 	bl	d4254 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4302:	4621      	mov	r1, r4
   d4304:	aa07      	add	r2, sp, #28
   d4306:	a80e      	add	r0, sp, #56	; 0x38
   d4308:	f001 fb84 	bl	d5a14 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d430c:	a808      	add	r0, sp, #32
   d430e:	f7ff ff39 	bl	d4184 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d4312:	9810      	ldr	r0, [sp, #64]	; 0x40
   d4314:	4629      	mov	r1, r5
   d4316:	f001 fd67 	bl	d5de8 <strcmp>
   d431a:	4604      	mov	r4, r0
   d431c:	a80f      	add	r0, sp, #60	; 0x3c
   d431e:	f7ff ff31 	bl	d4184 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    if (iter.name() == "access")
   d4322:	2c00      	cmp	r4, #0
   d4324:	d151      	bne.n	d43ca <_Z16actuator_commandPKc+0x166>
   d4326:	492d      	ldr	r1, [pc, #180]	; (d43dc <_Z16actuator_commandPKc+0x178>)
   d4328:	4d2d      	ldr	r5, [pc, #180]	; (d43e0 <_Z16actuator_commandPKc+0x17c>)
   d432a:	a80a      	add	r0, sp, #40	; 0x28
   d432c:	f000 fb55 	bl	d49da <_ZNK6String6equalsEPKc>
    {
      if (val == "allow")
   d4330:	b1e8      	cbz	r0, d436e <_Z16actuator_commandPKc+0x10a>
   d4332:	782b      	ldrb	r3, [r5, #0]
   d4334:	4a29      	ldr	r2, [pc, #164]	; (d43dc <_Z16actuator_commandPKc+0x178>)
   d4336:	492b      	ldr	r1, [pc, #172]	; (d43e4 <_Z16actuator_commandPKc+0x180>)
   d4338:	f88d 3000 	strb.w	r3, [sp]
   d433c:	a80e      	add	r0, sp, #56	; 0x38
   d433e:	233c      	movs	r3, #60	; 0x3c
   d4340:	f000 fdfa 	bl	d4f38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4344:	a80f      	add	r0, sp, #60	; 0x3c
   d4346:	f7ff ff1d 	bl	d4184 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      {
        Particle.publish("Lock_hook", "allow", PRIVATE);
        digitalWrite(actuator, HIGH);
   d434a:	4b27      	ldr	r3, [pc, #156]	; (d43e8 <_Z16actuator_commandPKc+0x184>)
   d434c:	2101      	movs	r1, #1
   d434e:	8818      	ldrh	r0, [r3, #0]
   d4350:	f001 fc69 	bl	d5c26 <digitalWrite>
        return 1;
   d4354:	2401      	movs	r4, #1
    String val = iter.value().toString().data();
   d4356:	a80a      	add	r0, sp, #40	; 0x28
   d4358:	f000 fac6 	bl	d48e8 <_ZN6StringD1Ev>
   d435c:	a813      	add	r0, sp, #76	; 0x4c
   d435e:	f7ff ff11 	bl	d4184 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4362:	a805      	add	r0, sp, #20
   d4364:	f7ff ff0e 	bl	d4184 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return -1;
      }
    }
  }
  return -2;
   d4368:	4620      	mov	r0, r4
   d436a:	b019      	add	sp, #100	; 0x64
   d436c:	bd30      	pop	{r4, r5, pc}
   d436e:	491f      	ldr	r1, [pc, #124]	; (d43ec <_Z16actuator_commandPKc+0x188>)
   d4370:	a80a      	add	r0, sp, #40	; 0x28
   d4372:	f000 fb32 	bl	d49da <_ZNK6String6equalsEPKc>
   d4376:	782b      	ldrb	r3, [r5, #0]
   d4378:	f88d 3000 	strb.w	r3, [sp]
   d437c:	233c      	movs	r3, #60	; 0x3c
      else if (val == "deny")
   d437e:	b168      	cbz	r0, d439c <_Z16actuator_commandPKc+0x138>
   d4380:	4a1a      	ldr	r2, [pc, #104]	; (d43ec <_Z16actuator_commandPKc+0x188>)
   d4382:	4918      	ldr	r1, [pc, #96]	; (d43e4 <_Z16actuator_commandPKc+0x180>)
   d4384:	a80e      	add	r0, sp, #56	; 0x38
   d4386:	f000 fdd7 	bl	d4f38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d438a:	a80f      	add	r0, sp, #60	; 0x3c
   d438c:	f7ff fefa 	bl	d4184 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        digitalWrite(actuator, LOW);
   d4390:	4b15      	ldr	r3, [pc, #84]	; (d43e8 <_Z16actuator_commandPKc+0x184>)
   d4392:	4621      	mov	r1, r4
   d4394:	8818      	ldrh	r0, [r3, #0]
   d4396:	f001 fc46 	bl	d5c26 <digitalWrite>
        return 0;
   d439a:	e7dc      	b.n	d4356 <_Z16actuator_commandPKc+0xf2>
   d439c:	4a14      	ldr	r2, [pc, #80]	; (d43f0 <_Z16actuator_commandPKc+0x18c>)
   d439e:	4911      	ldr	r1, [pc, #68]	; (d43e4 <_Z16actuator_commandPKc+0x180>)
   d43a0:	a80e      	add	r0, sp, #56	; 0x38
   d43a2:	f000 fdc9 	bl	d4f38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d43a6:	a80f      	add	r0, sp, #60	; 0x3c
   d43a8:	f7ff feec 	bl	d4184 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d43ac:	782b      	ldrb	r3, [r5, #0]
   d43ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d43b0:	4910      	ldr	r1, [pc, #64]	; (d43f4 <_Z16actuator_commandPKc+0x190>)
   d43b2:	f88d 3000 	strb.w	r3, [sp]
   d43b6:	a80e      	add	r0, sp, #56	; 0x38
   d43b8:	233c      	movs	r3, #60	; 0x3c
   d43ba:	f000 fdbd 	bl	d4f38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d43be:	a80f      	add	r0, sp, #60	; 0x3c
   d43c0:	f7ff fee0 	bl	d4184 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return -1;
   d43c4:	f04f 34ff 	mov.w	r4, #4294967295
   d43c8:	e7c5      	b.n	d4356 <_Z16actuator_commandPKc+0xf2>
    String val = iter.value().toString().data();
   d43ca:	a80a      	add	r0, sp, #40	; 0x28
   d43cc:	f000 fa8c 	bl	d48e8 <_ZN6StringD1Ev>
   d43d0:	e762      	b.n	d4298 <_Z16actuator_commandPKc+0x34>
  return -2;
   d43d2:	f06f 0401 	mvn.w	r4, #1
   d43d6:	e7c1      	b.n	d435c <_Z16actuator_commandPKc+0xf8>
   d43d8:	000d5ec4 	.word	0x000d5ec4
   d43dc:	000d5ecb 	.word	0x000d5ecb
   d43e0:	2003e63c 	.word	0x2003e63c
   d43e4:	000d5ed1 	.word	0x000d5ed1
   d43e8:	2003e5cc 	.word	0x2003e5cc
   d43ec:	000d5edb 	.word	0x000d5edb
   d43f0:	000d5ee0 	.word	0x000d5ee0
   d43f4:	000d5eef 	.word	0x000d5eef

000d43f8 <_GLOBAL__sub_I_actuator>:
        val_(val) {
   d43f8:	4b01      	ldr	r3, [pc, #4]	; (d4400 <_GLOBAL__sub_I_actuator+0x8>)
   d43fa:	2201      	movs	r2, #1
   d43fc:	701a      	strb	r2, [r3, #0]
   d43fe:	4770      	bx	lr
   d4400:	2003e63c 	.word	0x2003e63c

000d4404 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4404:	b508      	push	{r3, lr}
   d4406:	4b02      	ldr	r3, [pc, #8]	; (d4410 <netdb_freeaddrinfo+0xc>)
   d4408:	681b      	ldr	r3, [r3, #0]
   d440a:	689b      	ldr	r3, [r3, #8]
   d440c:	9301      	str	r3, [sp, #4]
   d440e:	bd08      	pop	{r3, pc}
   d4410:	00030268 	.word	0x00030268

000d4414 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4414:	b508      	push	{r3, lr}
   d4416:	4b02      	ldr	r3, [pc, #8]	; (d4420 <netdb_getaddrinfo+0xc>)
   d4418:	681b      	ldr	r3, [r3, #0]
   d441a:	68db      	ldr	r3, [r3, #12]
   d441c:	9301      	str	r3, [sp, #4]
   d441e:	bd08      	pop	{r3, pc}
   d4420:	00030268 	.word	0x00030268

000d4424 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4424:	b508      	push	{r3, lr}
   d4426:	4b02      	ldr	r3, [pc, #8]	; (d4430 <HAL_Validate_Pin_Function+0xc>)
   d4428:	681b      	ldr	r3, [r3, #0]
   d442a:	685b      	ldr	r3, [r3, #4]
   d442c:	9301      	str	r3, [sp, #4]
   d442e:	bd08      	pop	{r3, pc}
   d4430:	0003022c 	.word	0x0003022c

000d4434 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4434:	b508      	push	{r3, lr}
   d4436:	4b02      	ldr	r3, [pc, #8]	; (d4440 <HAL_Pin_Mode+0xc>)
   d4438:	681b      	ldr	r3, [r3, #0]
   d443a:	689b      	ldr	r3, [r3, #8]
   d443c:	9301      	str	r3, [sp, #4]
   d443e:	bd08      	pop	{r3, pc}
   d4440:	0003022c 	.word	0x0003022c

000d4444 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4444:	b508      	push	{r3, lr}
   d4446:	4b02      	ldr	r3, [pc, #8]	; (d4450 <HAL_Get_Pin_Mode+0xc>)
   d4448:	681b      	ldr	r3, [r3, #0]
   d444a:	68db      	ldr	r3, [r3, #12]
   d444c:	9301      	str	r3, [sp, #4]
   d444e:	bd08      	pop	{r3, pc}
   d4450:	0003022c 	.word	0x0003022c

000d4454 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4454:	b508      	push	{r3, lr}
   d4456:	4b02      	ldr	r3, [pc, #8]	; (d4460 <HAL_GPIO_Write+0xc>)
   d4458:	681b      	ldr	r3, [r3, #0]
   d445a:	691b      	ldr	r3, [r3, #16]
   d445c:	9301      	str	r3, [sp, #4]
   d445e:	bd08      	pop	{r3, pc}
   d4460:	0003022c 	.word	0x0003022c

000d4464 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d4464:	b508      	push	{r3, lr}
   d4466:	4b02      	ldr	r3, [pc, #8]	; (d4470 <hal_adc_read+0xc>)
   d4468:	681b      	ldr	r3, [r3, #0]
   d446a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d446c:	9301      	str	r3, [sp, #4]
   d446e:	bd08      	pop	{r3, pc}
   d4470:	0003022c 	.word	0x0003022c

000d4474 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4474:	b508      	push	{r3, lr}
   d4476:	4b02      	ldr	r3, [pc, #8]	; (d4480 <HAL_RNG_GetRandomNumber+0xc>)
   d4478:	681b      	ldr	r3, [r3, #0]
   d447a:	685b      	ldr	r3, [r3, #4]
   d447c:	9301      	str	r3, [sp, #4]
   d447e:	bd08      	pop	{r3, pc}
   d4480:	00030218 	.word	0x00030218

000d4484 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4484:	b508      	push	{r3, lr}
   d4486:	4b02      	ldr	r3, [pc, #8]	; (d4490 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4488:	681b      	ldr	r3, [r3, #0]
   d448a:	695b      	ldr	r3, [r3, #20]
   d448c:	9301      	str	r3, [sp, #4]
   d448e:	bd08      	pop	{r3, pc}
   d4490:	00030218 	.word	0x00030218

000d4494 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4494:	b508      	push	{r3, lr}
   d4496:	4b02      	ldr	r3, [pc, #8]	; (d44a0 <os_mutex_recursive_create+0xc>)
   d4498:	681b      	ldr	r3, [r3, #0]
   d449a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d449c:	9301      	str	r3, [sp, #4]
   d449e:	bd08      	pop	{r3, pc}
   d44a0:	00030248 	.word	0x00030248

000d44a4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d44a4:	b508      	push	{r3, lr}
   d44a6:	4b02      	ldr	r3, [pc, #8]	; (d44b0 <os_mutex_recursive_destroy+0xc>)
   d44a8:	681b      	ldr	r3, [r3, #0]
   d44aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d44ac:	9301      	str	r3, [sp, #4]
   d44ae:	bd08      	pop	{r3, pc}
   d44b0:	00030248 	.word	0x00030248

000d44b4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d44b4:	b508      	push	{r3, lr}
   d44b6:	4b02      	ldr	r3, [pc, #8]	; (d44c0 <inet_inet_ntop+0xc>)
   d44b8:	681b      	ldr	r3, [r3, #0]
   d44ba:	695b      	ldr	r3, [r3, #20]
   d44bc:	9301      	str	r3, [sp, #4]
   d44be:	bd08      	pop	{r3, pc}
   d44c0:	00030264 	.word	0x00030264

000d44c4 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d44c4:	b508      	push	{r3, lr}
   d44c6:	4b02      	ldr	r3, [pc, #8]	; (d44d0 <hal_usart_init+0xc>)
   d44c8:	681b      	ldr	r3, [r3, #0]
   d44ca:	681b      	ldr	r3, [r3, #0]
   d44cc:	9301      	str	r3, [sp, #4]
   d44ce:	bd08      	pop	{r3, pc}
   d44d0:	0003023c 	.word	0x0003023c

000d44d4 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d44d4:	b508      	push	{r3, lr}
   d44d6:	4b02      	ldr	r3, [pc, #8]	; (d44e0 <hal_usart_write+0xc>)
   d44d8:	681b      	ldr	r3, [r3, #0]
   d44da:	68db      	ldr	r3, [r3, #12]
   d44dc:	9301      	str	r3, [sp, #4]
   d44de:	bd08      	pop	{r3, pc}
   d44e0:	0003023c 	.word	0x0003023c

000d44e4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d44e4:	b508      	push	{r3, lr}
   d44e6:	4b02      	ldr	r3, [pc, #8]	; (d44f0 <hal_usart_available+0xc>)
   d44e8:	681b      	ldr	r3, [r3, #0]
   d44ea:	691b      	ldr	r3, [r3, #16]
   d44ec:	9301      	str	r3, [sp, #4]
   d44ee:	bd08      	pop	{r3, pc}
   d44f0:	0003023c 	.word	0x0003023c

000d44f4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d44f4:	b508      	push	{r3, lr}
   d44f6:	4b02      	ldr	r3, [pc, #8]	; (d4500 <hal_usart_read+0xc>)
   d44f8:	681b      	ldr	r3, [r3, #0]
   d44fa:	695b      	ldr	r3, [r3, #20]
   d44fc:	9301      	str	r3, [sp, #4]
   d44fe:	bd08      	pop	{r3, pc}
   d4500:	0003023c 	.word	0x0003023c

000d4504 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4504:	b508      	push	{r3, lr}
   d4506:	4b02      	ldr	r3, [pc, #8]	; (d4510 <hal_usart_peek+0xc>)
   d4508:	681b      	ldr	r3, [r3, #0]
   d450a:	699b      	ldr	r3, [r3, #24]
   d450c:	9301      	str	r3, [sp, #4]
   d450e:	bd08      	pop	{r3, pc}
   d4510:	0003023c 	.word	0x0003023c

000d4514 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4514:	b508      	push	{r3, lr}
   d4516:	4b02      	ldr	r3, [pc, #8]	; (d4520 <hal_usart_flush+0xc>)
   d4518:	681b      	ldr	r3, [r3, #0]
   d451a:	69db      	ldr	r3, [r3, #28]
   d451c:	9301      	str	r3, [sp, #4]
   d451e:	bd08      	pop	{r3, pc}
   d4520:	0003023c 	.word	0x0003023c

000d4524 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4524:	b508      	push	{r3, lr}
   d4526:	4b02      	ldr	r3, [pc, #8]	; (d4530 <hal_usart_is_enabled+0xc>)
   d4528:	681b      	ldr	r3, [r3, #0]
   d452a:	6a1b      	ldr	r3, [r3, #32]
   d452c:	9301      	str	r3, [sp, #4]
   d452e:	bd08      	pop	{r3, pc}
   d4530:	0003023c 	.word	0x0003023c

000d4534 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4534:	b508      	push	{r3, lr}
   d4536:	4b02      	ldr	r3, [pc, #8]	; (d4540 <hal_usart_available_data_for_write+0xc>)
   d4538:	681b      	ldr	r3, [r3, #0]
   d453a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d453c:	9301      	str	r3, [sp, #4]
   d453e:	bd08      	pop	{r3, pc}
   d4540:	0003023c 	.word	0x0003023c

000d4544 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4544:	b508      	push	{r3, lr}
   d4546:	4b02      	ldr	r3, [pc, #8]	; (d4550 <hal_i2c_write+0xc>)
   d4548:	681b      	ldr	r3, [r3, #0]
   d454a:	6a1b      	ldr	r3, [r3, #32]
   d454c:	9301      	str	r3, [sp, #4]
   d454e:	bd08      	pop	{r3, pc}
   d4550:	00030228 	.word	0x00030228

000d4554 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4554:	b508      	push	{r3, lr}
   d4556:	4b02      	ldr	r3, [pc, #8]	; (d4560 <hal_i2c_available+0xc>)
   d4558:	681b      	ldr	r3, [r3, #0]
   d455a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d455c:	9301      	str	r3, [sp, #4]
   d455e:	bd08      	pop	{r3, pc}
   d4560:	00030228 	.word	0x00030228

000d4564 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4564:	b508      	push	{r3, lr}
   d4566:	4b02      	ldr	r3, [pc, #8]	; (d4570 <hal_i2c_read+0xc>)
   d4568:	681b      	ldr	r3, [r3, #0]
   d456a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d456c:	9301      	str	r3, [sp, #4]
   d456e:	bd08      	pop	{r3, pc}
   d4570:	00030228 	.word	0x00030228

000d4574 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4574:	b508      	push	{r3, lr}
   d4576:	4b02      	ldr	r3, [pc, #8]	; (d4580 <hal_i2c_peek+0xc>)
   d4578:	681b      	ldr	r3, [r3, #0]
   d457a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d457c:	9301      	str	r3, [sp, #4]
   d457e:	bd08      	pop	{r3, pc}
   d4580:	00030228 	.word	0x00030228

000d4584 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4584:	b508      	push	{r3, lr}
   d4586:	4b02      	ldr	r3, [pc, #8]	; (d4590 <hal_i2c_flush+0xc>)
   d4588:	681b      	ldr	r3, [r3, #0]
   d458a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d458c:	9301      	str	r3, [sp, #4]
   d458e:	bd08      	pop	{r3, pc}
   d4590:	00030228 	.word	0x00030228

000d4594 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4594:	b508      	push	{r3, lr}
   d4596:	4b02      	ldr	r3, [pc, #8]	; (d45a0 <hal_i2c_is_enabled+0xc>)
   d4598:	681b      	ldr	r3, [r3, #0]
   d459a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d459c:	9301      	str	r3, [sp, #4]
   d459e:	bd08      	pop	{r3, pc}
   d45a0:	00030228 	.word	0x00030228

000d45a4 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d45a4:	b508      	push	{r3, lr}
   d45a6:	4b02      	ldr	r3, [pc, #8]	; (d45b0 <hal_i2c_init+0xc>)
   d45a8:	681b      	ldr	r3, [r3, #0]
   d45aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d45ac:	9301      	str	r3, [sp, #4]
   d45ae:	bd08      	pop	{r3, pc}
   d45b0:	00030228 	.word	0x00030228

000d45b4 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d45b4:	b508      	push	{r3, lr}
   d45b6:	4b02      	ldr	r3, [pc, #8]	; (d45c0 <hal_spi_init+0xc>)
   d45b8:	681b      	ldr	r3, [r3, #0]
   d45ba:	69db      	ldr	r3, [r3, #28]
   d45bc:	9301      	str	r3, [sp, #4]
   d45be:	bd08      	pop	{r3, pc}
   d45c0:	00030230 	.word	0x00030230

000d45c4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d45c4:	b508      	push	{r3, lr}
   d45c6:	4b02      	ldr	r3, [pc, #8]	; (d45d0 <hal_spi_is_enabled+0xc>)
   d45c8:	681b      	ldr	r3, [r3, #0]
   d45ca:	6a1b      	ldr	r3, [r3, #32]
   d45cc:	9301      	str	r3, [sp, #4]
   d45ce:	bd08      	pop	{r3, pc}
   d45d0:	00030230 	.word	0x00030230

000d45d4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d45d4:	b508      	push	{r3, lr}
   d45d6:	4b02      	ldr	r3, [pc, #8]	; (d45e0 <HAL_USB_USART_Init+0xc>)
   d45d8:	681b      	ldr	r3, [r3, #0]
   d45da:	681b      	ldr	r3, [r3, #0]
   d45dc:	9301      	str	r3, [sp, #4]
   d45de:	bd08      	pop	{r3, pc}
   d45e0:	0003024c 	.word	0x0003024c

000d45e4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d45e4:	b508      	push	{r3, lr}
   d45e6:	4b02      	ldr	r3, [pc, #8]	; (d45f0 <HAL_USB_USART_Available_Data+0xc>)
   d45e8:	681b      	ldr	r3, [r3, #0]
   d45ea:	691b      	ldr	r3, [r3, #16]
   d45ec:	9301      	str	r3, [sp, #4]
   d45ee:	bd08      	pop	{r3, pc}
   d45f0:	0003024c 	.word	0x0003024c

000d45f4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d45f4:	b508      	push	{r3, lr}
   d45f6:	4b02      	ldr	r3, [pc, #8]	; (d4600 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d45f8:	681b      	ldr	r3, [r3, #0]
   d45fa:	695b      	ldr	r3, [r3, #20]
   d45fc:	9301      	str	r3, [sp, #4]
   d45fe:	bd08      	pop	{r3, pc}
   d4600:	0003024c 	.word	0x0003024c

000d4604 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4604:	b508      	push	{r3, lr}
   d4606:	4b02      	ldr	r3, [pc, #8]	; (d4610 <HAL_USB_USART_Receive_Data+0xc>)
   d4608:	681b      	ldr	r3, [r3, #0]
   d460a:	699b      	ldr	r3, [r3, #24]
   d460c:	9301      	str	r3, [sp, #4]
   d460e:	bd08      	pop	{r3, pc}
   d4610:	0003024c 	.word	0x0003024c

000d4614 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4614:	b508      	push	{r3, lr}
   d4616:	4b02      	ldr	r3, [pc, #8]	; (d4620 <HAL_USB_USART_Send_Data+0xc>)
   d4618:	681b      	ldr	r3, [r3, #0]
   d461a:	69db      	ldr	r3, [r3, #28]
   d461c:	9301      	str	r3, [sp, #4]
   d461e:	bd08      	pop	{r3, pc}
   d4620:	0003024c 	.word	0x0003024c

000d4624 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4624:	b508      	push	{r3, lr}
   d4626:	4b02      	ldr	r3, [pc, #8]	; (d4630 <HAL_USB_USART_Flush_Data+0xc>)
   d4628:	681b      	ldr	r3, [r3, #0]
   d462a:	6a1b      	ldr	r3, [r3, #32]
   d462c:	9301      	str	r3, [sp, #4]
   d462e:	bd08      	pop	{r3, pc}
   d4630:	0003024c 	.word	0x0003024c

000d4634 <jsmn_init>:
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))

DYNALIB_FN(14, services, jsmn_init, void(jsmn_parser*, void*))
   d4634:	b508      	push	{r3, lr}
   d4636:	4b02      	ldr	r3, [pc, #8]	; (d4640 <jsmn_init+0xc>)
   d4638:	681b      	ldr	r3, [r3, #0]
   d463a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d463c:	9301      	str	r3, [sp, #4]
   d463e:	bd08      	pop	{r3, pc}
   d4640:	00030260 	.word	0x00030260

000d4644 <jsmn_parse>:
DYNALIB_FN(15, services, jsmn_parse, jsmnerr_t(jsmn_parser*, const char*, size_t, jsmntok_t*, unsigned int, void*))
   d4644:	b508      	push	{r3, lr}
   d4646:	4b02      	ldr	r3, [pc, #8]	; (d4650 <jsmn_parse+0xc>)
   d4648:	681b      	ldr	r3, [r3, #0]
   d464a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d464c:	9301      	str	r3, [sp, #4]
   d464e:	bd08      	pop	{r3, pc}
   d4650:	00030260 	.word	0x00030260

000d4654 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4654:	b508      	push	{r3, lr}
   d4656:	4b02      	ldr	r3, [pc, #8]	; (d4660 <set_system_mode+0xc>)
   d4658:	681b      	ldr	r3, [r3, #0]
   d465a:	685b      	ldr	r3, [r3, #4]
   d465c:	9301      	str	r3, [sp, #4]
   d465e:	bd08      	pop	{r3, pc}
   d4660:	00030220 	.word	0x00030220

000d4664 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4664:	b508      	push	{r3, lr}
   d4666:	4b02      	ldr	r3, [pc, #8]	; (d4670 <application_thread_current+0xc>)
   d4668:	681b      	ldr	r3, [r3, #0]
   d466a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d466c:	9301      	str	r3, [sp, #4]
   d466e:	bd08      	pop	{r3, pc}
   d4670:	00030220 	.word	0x00030220

000d4674 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4674:	b508      	push	{r3, lr}
   d4676:	4b02      	ldr	r3, [pc, #8]	; (d4680 <application_thread_invoke+0xc>)
   d4678:	681b      	ldr	r3, [r3, #0]
   d467a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d467c:	9301      	str	r3, [sp, #4]
   d467e:	bd08      	pop	{r3, pc}
   d4680:	00030220 	.word	0x00030220

000d4684 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4684:	b508      	push	{r3, lr}
   d4686:	4b03      	ldr	r3, [pc, #12]	; (d4694 <system_ctrl_set_app_request_handler+0x10>)
   d4688:	681b      	ldr	r3, [r3, #0]
   d468a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d468e:	9301      	str	r3, [sp, #4]
   d4690:	bd08      	pop	{r3, pc}
   d4692:	0000      	.short	0x0000
   d4694:	00030220 	.word	0x00030220

000d4698 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4698:	b508      	push	{r3, lr}
   d469a:	4b03      	ldr	r3, [pc, #12]	; (d46a8 <system_ctrl_set_result+0x10>)
   d469c:	681b      	ldr	r3, [r3, #0]
   d469e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d46a2:	9301      	str	r3, [sp, #4]
   d46a4:	bd08      	pop	{r3, pc}
   d46a6:	0000      	.short	0x0000
   d46a8:	00030220 	.word	0x00030220

000d46ac <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d46ac:	b508      	push	{r3, lr}
   d46ae:	4b02      	ldr	r3, [pc, #8]	; (d46b8 <network_connect+0xc>)
   d46b0:	681b      	ldr	r3, [r3, #0]
   d46b2:	685b      	ldr	r3, [r3, #4]
   d46b4:	9301      	str	r3, [sp, #4]
   d46b6:	bd08      	pop	{r3, pc}
   d46b8:	00030240 	.word	0x00030240

000d46bc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d46bc:	b508      	push	{r3, lr}
   d46be:	4b02      	ldr	r3, [pc, #8]	; (d46c8 <network_connecting+0xc>)
   d46c0:	681b      	ldr	r3, [r3, #0]
   d46c2:	689b      	ldr	r3, [r3, #8]
   d46c4:	9301      	str	r3, [sp, #4]
   d46c6:	bd08      	pop	{r3, pc}
   d46c8:	00030240 	.word	0x00030240

000d46cc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d46cc:	b508      	push	{r3, lr}
   d46ce:	4b02      	ldr	r3, [pc, #8]	; (d46d8 <network_disconnect+0xc>)
   d46d0:	681b      	ldr	r3, [r3, #0]
   d46d2:	68db      	ldr	r3, [r3, #12]
   d46d4:	9301      	str	r3, [sp, #4]
   d46d6:	bd08      	pop	{r3, pc}
   d46d8:	00030240 	.word	0x00030240

000d46dc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d46dc:	b508      	push	{r3, lr}
   d46de:	4b02      	ldr	r3, [pc, #8]	; (d46e8 <network_ready+0xc>)
   d46e0:	681b      	ldr	r3, [r3, #0]
   d46e2:	691b      	ldr	r3, [r3, #16]
   d46e4:	9301      	str	r3, [sp, #4]
   d46e6:	bd08      	pop	{r3, pc}
   d46e8:	00030240 	.word	0x00030240

000d46ec <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d46ec:	b508      	push	{r3, lr}
   d46ee:	4b02      	ldr	r3, [pc, #8]	; (d46f8 <network_on+0xc>)
   d46f0:	681b      	ldr	r3, [r3, #0]
   d46f2:	695b      	ldr	r3, [r3, #20]
   d46f4:	9301      	str	r3, [sp, #4]
   d46f6:	bd08      	pop	{r3, pc}
   d46f8:	00030240 	.word	0x00030240

000d46fc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d46fc:	b508      	push	{r3, lr}
   d46fe:	4b02      	ldr	r3, [pc, #8]	; (d4708 <network_off+0xc>)
   d4700:	681b      	ldr	r3, [r3, #0]
   d4702:	699b      	ldr	r3, [r3, #24]
   d4704:	9301      	str	r3, [sp, #4]
   d4706:	bd08      	pop	{r3, pc}
   d4708:	00030240 	.word	0x00030240

000d470c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d470c:	b508      	push	{r3, lr}
   d470e:	4b02      	ldr	r3, [pc, #8]	; (d4718 <network_listen+0xc>)
   d4710:	681b      	ldr	r3, [r3, #0]
   d4712:	69db      	ldr	r3, [r3, #28]
   d4714:	9301      	str	r3, [sp, #4]
   d4716:	bd08      	pop	{r3, pc}
   d4718:	00030240 	.word	0x00030240

000d471c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d471c:	b508      	push	{r3, lr}
   d471e:	4b02      	ldr	r3, [pc, #8]	; (d4728 <network_listening+0xc>)
   d4720:	681b      	ldr	r3, [r3, #0]
   d4722:	6a1b      	ldr	r3, [r3, #32]
   d4724:	9301      	str	r3, [sp, #4]
   d4726:	bd08      	pop	{r3, pc}
   d4728:	00030240 	.word	0x00030240

000d472c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d472c:	b508      	push	{r3, lr}
   d472e:	4b02      	ldr	r3, [pc, #8]	; (d4738 <network_set_listen_timeout+0xc>)
   d4730:	681b      	ldr	r3, [r3, #0]
   d4732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4734:	9301      	str	r3, [sp, #4]
   d4736:	bd08      	pop	{r3, pc}
   d4738:	00030240 	.word	0x00030240

000d473c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d473c:	b508      	push	{r3, lr}
   d473e:	4b02      	ldr	r3, [pc, #8]	; (d4748 <network_get_listen_timeout+0xc>)
   d4740:	681b      	ldr	r3, [r3, #0]
   d4742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4744:	9301      	str	r3, [sp, #4]
   d4746:	bd08      	pop	{r3, pc}
   d4748:	00030240 	.word	0x00030240

000d474c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d474c:	b508      	push	{r3, lr}
   d474e:	4b02      	ldr	r3, [pc, #8]	; (d4758 <spark_variable+0xc>)
   d4750:	681b      	ldr	r3, [r3, #0]
   d4752:	681b      	ldr	r3, [r3, #0]
   d4754:	9301      	str	r3, [sp, #4]
   d4756:	bd08      	pop	{r3, pc}
   d4758:	00030244 	.word	0x00030244

000d475c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d475c:	b508      	push	{r3, lr}
   d475e:	4b02      	ldr	r3, [pc, #8]	; (d4768 <spark_function+0xc>)
   d4760:	681b      	ldr	r3, [r3, #0]
   d4762:	685b      	ldr	r3, [r3, #4]
   d4764:	9301      	str	r3, [sp, #4]
   d4766:	bd08      	pop	{r3, pc}
   d4768:	00030244 	.word	0x00030244

000d476c <spark_cloud_flag_connected>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d476c:	b508      	push	{r3, lr}
   d476e:	4b02      	ldr	r3, [pc, #8]	; (d4778 <spark_cloud_flag_connected+0xc>)
   d4770:	681b      	ldr	r3, [r3, #0]
   d4772:	695b      	ldr	r3, [r3, #20]
   d4774:	9301      	str	r3, [sp, #4]
   d4776:	bd08      	pop	{r3, pc}
   d4778:	00030244 	.word	0x00030244

000d477c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d477c:	b508      	push	{r3, lr}
   d477e:	4b02      	ldr	r3, [pc, #8]	; (d4788 <spark_send_event+0xc>)
   d4780:	681b      	ldr	r3, [r3, #0]
   d4782:	6a1b      	ldr	r3, [r3, #32]
   d4784:	9301      	str	r3, [sp, #4]
   d4786:	bd08      	pop	{r3, pc}
   d4788:	00030244 	.word	0x00030244

000d478c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d478c:	b508      	push	{r3, lr}
   d478e:	4b02      	ldr	r3, [pc, #8]	; (d4798 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4790:	681b      	ldr	r3, [r3, #0]
   d4792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4794:	9301      	str	r3, [sp, #4]
   d4796:	bd08      	pop	{r3, pc}
   d4798:	00030244 	.word	0x00030244

000d479c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d479c:	b508      	push	{r3, lr}
   d479e:	4b02      	ldr	r3, [pc, #8]	; (d47a8 <malloc+0xc>)
   d47a0:	681b      	ldr	r3, [r3, #0]
   d47a2:	681b      	ldr	r3, [r3, #0]
   d47a4:	9301      	str	r3, [sp, #4]
   d47a6:	bd08      	pop	{r3, pc}
   d47a8:	0003021c 	.word	0x0003021c

000d47ac <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d47ac:	b508      	push	{r3, lr}
   d47ae:	4b02      	ldr	r3, [pc, #8]	; (d47b8 <free+0xc>)
   d47b0:	681b      	ldr	r3, [r3, #0]
   d47b2:	685b      	ldr	r3, [r3, #4]
   d47b4:	9301      	str	r3, [sp, #4]
   d47b6:	bd08      	pop	{r3, pc}
   d47b8:	0003021c 	.word	0x0003021c

000d47bc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d47bc:	b508      	push	{r3, lr}
   d47be:	4b02      	ldr	r3, [pc, #8]	; (d47c8 <realloc+0xc>)
   d47c0:	681b      	ldr	r3, [r3, #0]
   d47c2:	689b      	ldr	r3, [r3, #8]
   d47c4:	9301      	str	r3, [sp, #4]
   d47c6:	bd08      	pop	{r3, pc}
   d47c8:	0003021c 	.word	0x0003021c

000d47cc <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d47cc:	b508      	push	{r3, lr}
   d47ce:	4b02      	ldr	r3, [pc, #8]	; (d47d8 <abort+0xc>)
   d47d0:	681b      	ldr	r3, [r3, #0]
   d47d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d47d4:	9301      	str	r3, [sp, #4]
   d47d6:	bd08      	pop	{r3, pc}
   d47d8:	0003021c 	.word	0x0003021c

000d47dc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d47dc:	b508      	push	{r3, lr}
   d47de:	4b02      	ldr	r3, [pc, #8]	; (d47e8 <_malloc_r+0xc>)
   d47e0:	681b      	ldr	r3, [r3, #0]
   d47e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d47e4:	9301      	str	r3, [sp, #4]
   d47e6:	bd08      	pop	{r3, pc}
   d47e8:	0003021c 	.word	0x0003021c

000d47ec <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d47ec:	b508      	push	{r3, lr}
   d47ee:	4b02      	ldr	r3, [pc, #8]	; (d47f8 <newlib_impure_ptr_callback+0xc>)
   d47f0:	681b      	ldr	r3, [r3, #0]
   d47f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d47f4:	9301      	str	r3, [sp, #4]
   d47f6:	bd08      	pop	{r3, pc}
   d47f8:	0003021c 	.word	0x0003021c

000d47fc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d47fc:	2200      	movs	r2, #0
   d47fe:	6840      	ldr	r0, [r0, #4]
   d4800:	4611      	mov	r1, r2
   d4802:	f7ff bf8b 	b.w	d471c <network_listening>

000d4806 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4806:	2200      	movs	r2, #0
   d4808:	6840      	ldr	r0, [r0, #4]
   d480a:	4611      	mov	r1, r2
   d480c:	f7ff bf96 	b.w	d473c <network_get_listen_timeout>

000d4810 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4810:	6840      	ldr	r0, [r0, #4]
   d4812:	2200      	movs	r2, #0
   d4814:	f7ff bf8a 	b.w	d472c <network_set_listen_timeout>

000d4818 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4818:	6840      	ldr	r0, [r0, #4]
   d481a:	2200      	movs	r2, #0
   d481c:	f081 0101 	eor.w	r1, r1, #1
   d4820:	f7ff bf74 	b.w	d470c <network_listen>

000d4824 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4824:	2300      	movs	r3, #0
   d4826:	6840      	ldr	r0, [r0, #4]
   d4828:	461a      	mov	r2, r3
   d482a:	4619      	mov	r1, r3
   d482c:	f7ff bf66 	b.w	d46fc <network_off>

000d4830 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4830:	2300      	movs	r3, #0
   d4832:	6840      	ldr	r0, [r0, #4]
   d4834:	461a      	mov	r2, r3
   d4836:	4619      	mov	r1, r3
   d4838:	f7ff bf58 	b.w	d46ec <network_on>

000d483c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d483c:	2200      	movs	r2, #0
   d483e:	6840      	ldr	r0, [r0, #4]
   d4840:	4611      	mov	r1, r2
   d4842:	f7ff bf4b 	b.w	d46dc <network_ready>

000d4846 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4846:	2200      	movs	r2, #0
   d4848:	6840      	ldr	r0, [r0, #4]
   d484a:	4611      	mov	r1, r2
   d484c:	f7ff bf36 	b.w	d46bc <network_connecting>

000d4850 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4850:	6840      	ldr	r0, [r0, #4]
   d4852:	2200      	movs	r2, #0
   d4854:	2102      	movs	r1, #2
   d4856:	f7ff bf39 	b.w	d46cc <network_disconnect>

000d485a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d485a:	2300      	movs	r3, #0
   d485c:	6840      	ldr	r0, [r0, #4]
   d485e:	461a      	mov	r2, r3
   d4860:	f7ff bf24 	b.w	d46ac <network_connect>

000d4864 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4864:	4b02      	ldr	r3, [pc, #8]	; (d4870 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4866:	2203      	movs	r2, #3
   d4868:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d486a:	4a02      	ldr	r2, [pc, #8]	; (d4874 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d486c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d486e:	4770      	bx	lr
   d4870:	2003e644 	.word	0x2003e644
   d4874:	000d5f08 	.word	0x000d5f08

000d4878 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d4878:	b510      	push	{r4, lr}
   d487a:	4604      	mov	r4, r0
   d487c:	4608      	mov	r0, r1
{
    _spi = spi;
   d487e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d4880:	f7ff fe98 	bl	d45b4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4884:	2300      	movs	r3, #0
   d4886:	6063      	str	r3, [r4, #4]
}
   d4888:	4620      	mov	r0, r4
   d488a:	bd10      	pop	{r4, pc}

000d488c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d488c:	b510      	push	{r4, lr}
   d488e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4890:	6800      	ldr	r0, [r0, #0]
   d4892:	b118      	cbz	r0, d489c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d4894:	f7ff ff8a 	bl	d47ac <free>
            wakeupSource_ = nullptr;
   d4898:	2300      	movs	r3, #0
   d489a:	6023      	str	r3, [r4, #0]
        }
    }
   d489c:	bd10      	pop	{r4, pc}

000d489e <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d489e:	b510      	push	{r4, lr}
   d48a0:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d48a2:	f7ff fff3 	bl	d488c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d48a6:	4620      	mov	r0, r4
   d48a8:	bd10      	pop	{r4, pc}
	...

000d48ac <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d48ac:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d48ae:	4b09      	ldr	r3, [pc, #36]	; (d48d4 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d48b0:	4c09      	ldr	r4, [pc, #36]	; (d48d8 <_GLOBAL__sub_I_System+0x2c>)
   d48b2:	2202      	movs	r2, #2
   d48b4:	2000      	movs	r0, #0
   d48b6:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d48b8:	4b08      	ldr	r3, [pc, #32]	; (d48dc <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d48ba:	6020      	str	r0, [r4, #0]
   d48bc:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d48be:	71a0      	strb	r0, [r4, #6]
   d48c0:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d48c2:	f7ff fec7 	bl	d4654 <set_system_mode>
SystemClass System;
   d48c6:	4620      	mov	r0, r4
   d48c8:	4a05      	ldr	r2, [pc, #20]	; (d48e0 <_GLOBAL__sub_I_System+0x34>)
   d48ca:	4906      	ldr	r1, [pc, #24]	; (d48e4 <_GLOBAL__sub_I_System+0x38>)
   d48cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d48d0:	f001 ba1a 	b.w	d5d08 <__aeabi_atexit>
   d48d4:	2003e658 	.word	0x2003e658
   d48d8:	2003e64c 	.word	0x2003e64c
   d48dc:	ffff0000 	.word	0xffff0000
   d48e0:	2003e638 	.word	0x2003e638
   d48e4:	000d489f 	.word	0x000d489f

000d48e8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d48e8:	b510      	push	{r4, lr}
   d48ea:	4604      	mov	r4, r0
{
	free(buffer);
   d48ec:	6800      	ldr	r0, [r0, #0]
   d48ee:	f7ff ff5d 	bl	d47ac <free>
}
   d48f2:	4620      	mov	r0, r4
   d48f4:	bd10      	pop	{r4, pc}

000d48f6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d48f6:	b510      	push	{r4, lr}
   d48f8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d48fa:	6800      	ldr	r0, [r0, #0]
   d48fc:	b108      	cbz	r0, d4902 <_ZN6String10invalidateEv+0xc>
   d48fe:	f7ff ff55 	bl	d47ac <free>
	buffer = NULL;
   d4902:	2300      	movs	r3, #0
	capacity = len = 0;
   d4904:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d4908:	6023      	str	r3, [r4, #0]
}
   d490a:	bd10      	pop	{r4, pc}

000d490c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d490c:	b538      	push	{r3, r4, r5, lr}
   d490e:	4604      	mov	r4, r0
   d4910:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4912:	6800      	ldr	r0, [r0, #0]
   d4914:	3101      	adds	r1, #1
   d4916:	f7ff ff51 	bl	d47bc <realloc>
	if (newbuffer) {
   d491a:	b110      	cbz	r0, d4922 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d491c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d4920:	2001      	movs	r0, #1
	}
	return 0;
}
   d4922:	bd38      	pop	{r3, r4, r5, pc}

000d4924 <_ZN6String7reserveEj>:
{
   d4924:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4926:	6803      	ldr	r3, [r0, #0]
{
   d4928:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d492a:	b123      	cbz	r3, d4936 <_ZN6String7reserveEj+0x12>
   d492c:	6843      	ldr	r3, [r0, #4]
   d492e:	428b      	cmp	r3, r1
   d4930:	d301      	bcc.n	d4936 <_ZN6String7reserveEj+0x12>
   d4932:	2001      	movs	r0, #1
}
   d4934:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d4936:	4620      	mov	r0, r4
   d4938:	f7ff ffe8 	bl	d490c <_ZN6String12changeBufferEj>
   d493c:	2800      	cmp	r0, #0
   d493e:	d0f9      	beq.n	d4934 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d4940:	68a3      	ldr	r3, [r4, #8]
   d4942:	2b00      	cmp	r3, #0
   d4944:	d1f5      	bne.n	d4932 <_ZN6String7reserveEj+0xe>
   d4946:	6822      	ldr	r2, [r4, #0]
   d4948:	7013      	strb	r3, [r2, #0]
   d494a:	e7f2      	b.n	d4932 <_ZN6String7reserveEj+0xe>

000d494c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d494c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d494e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d4950:	4611      	mov	r1, r2
   d4952:	9201      	str	r2, [sp, #4]
{
   d4954:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d4956:	f7ff ffe5 	bl	d4924 <_ZN6String7reserveEj>
   d495a:	9a01      	ldr	r2, [sp, #4]
   d495c:	b928      	cbnz	r0, d496a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d495e:	4620      	mov	r0, r4
   d4960:	f7ff ffc9 	bl	d48f6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d4964:	4620      	mov	r0, r4
   d4966:	b003      	add	sp, #12
   d4968:	bd30      	pop	{r4, r5, pc}
	len = length;
   d496a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d496c:	4629      	mov	r1, r5
   d496e:	6820      	ldr	r0, [r4, #0]
   d4970:	f001 f9e6 	bl	d5d40 <memcpy>
	buffer[len] = 0;
   d4974:	6822      	ldr	r2, [r4, #0]
   d4976:	68a3      	ldr	r3, [r4, #8]
   d4978:	2100      	movs	r1, #0
   d497a:	54d1      	strb	r1, [r2, r3]
	return *this;
   d497c:	e7f2      	b.n	d4964 <_ZN6String4copyEPKcj+0x18>

000d497e <_ZN6StringC1EPKc>:
	buffer = NULL;
   d497e:	2300      	movs	r3, #0
String::String(const char *cstr)
   d4980:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d4982:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d4986:	4604      	mov	r4, r0
	len = 0;
   d4988:	6083      	str	r3, [r0, #8]
	flags = 0;
   d498a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d498c:	b141      	cbz	r1, d49a0 <_ZN6StringC1EPKc+0x22>
   d498e:	4608      	mov	r0, r1
   d4990:	9101      	str	r1, [sp, #4]
   d4992:	f001 fa50 	bl	d5e36 <strlen>
   d4996:	9901      	ldr	r1, [sp, #4]
   d4998:	4602      	mov	r2, r0
   d499a:	4620      	mov	r0, r4
   d499c:	f7ff ffd6 	bl	d494c <_ZN6String4copyEPKcj>
}
   d49a0:	4620      	mov	r0, r4
   d49a2:	b002      	add	sp, #8
   d49a4:	bd10      	pop	{r4, pc}

000d49a6 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d49a6:	4288      	cmp	r0, r1
{
   d49a8:	b510      	push	{r4, lr}
   d49aa:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d49ac:	d005      	beq.n	d49ba <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d49ae:	680b      	ldr	r3, [r1, #0]
   d49b0:	b12b      	cbz	r3, d49be <_ZN6StringaSERKS_+0x18>
   d49b2:	688a      	ldr	r2, [r1, #8]
   d49b4:	4619      	mov	r1, r3
   d49b6:	f7ff ffc9 	bl	d494c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d49ba:	4620      	mov	r0, r4
   d49bc:	bd10      	pop	{r4, pc}
	else invalidate();
   d49be:	f7ff ff9a 	bl	d48f6 <_ZN6String10invalidateEv>
   d49c2:	e7fa      	b.n	d49ba <_ZN6StringaSERKS_+0x14>

000d49c4 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d49c4:	b510      	push	{r4, lr}
	buffer = NULL;
   d49c6:	2300      	movs	r3, #0
String::String(const String &value)
   d49c8:	4604      	mov	r4, r0
	capacity = 0;
   d49ca:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d49ce:	6083      	str	r3, [r0, #8]
	flags = 0;
   d49d0:	7303      	strb	r3, [r0, #12]
	*this = value;
   d49d2:	f7ff ffe8 	bl	d49a6 <_ZN6StringaSERKS_>
}
   d49d6:	4620      	mov	r0, r4
   d49d8:	bd10      	pop	{r4, pc}

000d49da <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d49da:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d49dc:	6882      	ldr	r2, [r0, #8]
   d49de:	b93a      	cbnz	r2, d49f0 <_ZNK6String6equalsEPKc+0x16>
   d49e0:	b121      	cbz	r1, d49ec <_ZNK6String6equalsEPKc+0x12>
   d49e2:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d49e4:	fab0 f080 	clz	r0, r0
   d49e8:	0940      	lsrs	r0, r0, #5
   d49ea:	e000      	b.n	d49ee <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d49ec:	2001      	movs	r0, #1
}
   d49ee:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d49f0:	6800      	ldr	r0, [r0, #0]
   d49f2:	b909      	cbnz	r1, d49f8 <_ZNK6String6equalsEPKc+0x1e>
   d49f4:	7800      	ldrb	r0, [r0, #0]
   d49f6:	e7f5      	b.n	d49e4 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d49f8:	f001 f9f6 	bl	d5de8 <strcmp>
   d49fc:	e7f2      	b.n	d49e4 <_ZNK6String6equalsEPKc+0xa>

000d49fe <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d49fe:	b510      	push	{r4, lr}
   d4a00:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4a02:	6800      	ldr	r0, [r0, #0]
   d4a04:	b108      	cbz	r0, d4a0a <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4a06:	f7ff fd4d 	bl	d44a4 <os_mutex_recursive_destroy>
    }
   d4a0a:	4620      	mov	r0, r4
   d4a0c:	bd10      	pop	{r4, pc}
	...

000d4a10 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4a10:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d4a12:	4c06      	ldr	r4, [pc, #24]	; (d4a2c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4a14:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d4a16:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d4a18:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d4a1a:	f7ff fd3b 	bl	d4494 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d4a1e:	4620      	mov	r0, r4
   d4a20:	4a03      	ldr	r2, [pc, #12]	; (d4a30 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4a22:	4904      	ldr	r1, [pc, #16]	; (d4a34 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d4a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d4a28:	f001 b96e 	b.w	d5d08 <__aeabi_atexit>
   d4a2c:	2003e65c 	.word	0x2003e65c
   d4a30:	2003e638 	.word	0x2003e638
   d4a34:	000d49ff 	.word	0x000d49ff

000d4a38 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4a3a:	4606      	mov	r6, r0
   d4a3c:	460d      	mov	r5, r1
  size_t n = 0;
   d4a3e:	188f      	adds	r7, r1, r2
   d4a40:	2400      	movs	r4, #0
  while (size--) {
   d4a42:	42bd      	cmp	r5, r7
   d4a44:	d00c      	beq.n	d4a60 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4a46:	6833      	ldr	r3, [r6, #0]
   d4a48:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4a4c:	689b      	ldr	r3, [r3, #8]
   d4a4e:	4630      	mov	r0, r6
   d4a50:	4798      	blx	r3
     if (chunk>=0)
   d4a52:	1e03      	subs	r3, r0, #0
   d4a54:	db01      	blt.n	d4a5a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4a56:	441c      	add	r4, r3
  while (size--) {
   d4a58:	e7f3      	b.n	d4a42 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4a5a:	2c00      	cmp	r4, #0
   d4a5c:	bf08      	it	eq
   d4a5e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d4a60:	4620      	mov	r0, r4
   d4a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4a64 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4a64:	b513      	push	{r0, r1, r4, lr}
   d4a66:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d4a68:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d4a6a:	b159      	cbz	r1, d4a84 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d4a6c:	9101      	str	r1, [sp, #4]
   d4a6e:	f001 f9e2 	bl	d5e36 <strlen>
   d4a72:	6823      	ldr	r3, [r4, #0]
   d4a74:	9901      	ldr	r1, [sp, #4]
   d4a76:	68db      	ldr	r3, [r3, #12]
   d4a78:	4602      	mov	r2, r0
   d4a7a:	4620      	mov	r0, r4
    }
   d4a7c:	b002      	add	sp, #8
   d4a7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d4a82:	4718      	bx	r3
    }
   d4a84:	b002      	add	sp, #8
   d4a86:	bd10      	pop	{r4, pc}

000d4a88 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4a88:	6803      	ldr	r3, [r0, #0]
   d4a8a:	689b      	ldr	r3, [r3, #8]
   d4a8c:	4718      	bx	r3

000d4a8e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4a8e:	b530      	push	{r4, r5, lr}
   d4a90:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4a92:	2300      	movs	r3, #0
   d4a94:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4a98:	2a01      	cmp	r2, #1
   d4a9a:	bf98      	it	ls
   d4a9c:	220a      	movls	r2, #10
   d4a9e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d4aa0:	460d      	mov	r5, r1
   d4aa2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d4aa6:	fb01 5312 	mls	r3, r1, r2, r5
   d4aaa:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4aae:	2b09      	cmp	r3, #9
   d4ab0:	bf94      	ite	ls
   d4ab2:	3330      	addls	r3, #48	; 0x30
   d4ab4:	3337      	addhi	r3, #55	; 0x37
   d4ab6:	b2db      	uxtb	r3, r3
  } while(n);
   d4ab8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4aba:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d4abe:	d9ef      	bls.n	d4aa0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4ac0:	4621      	mov	r1, r4
   d4ac2:	f7ff ffcf 	bl	d4a64 <_ZN5Print5writeEPKc>
}
   d4ac6:	b00b      	add	sp, #44	; 0x2c
   d4ac8:	bd30      	pop	{r4, r5, pc}
	...

000d4acc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4acc:	4b01      	ldr	r3, [pc, #4]	; (d4ad4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4ace:	4a02      	ldr	r2, [pc, #8]	; (d4ad8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4ad0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d4ad2:	4770      	bx	lr
   d4ad4:	2003e660 	.word	0x2003e660
   d4ad8:	000d5f34 	.word	0x000d5f34

000d4adc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4adc:	4b02      	ldr	r3, [pc, #8]	; (d4ae8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4ade:	681a      	ldr	r2, [r3, #0]
   d4ae0:	4b02      	ldr	r3, [pc, #8]	; (d4aec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4ae2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d4ae4:	4770      	bx	lr
   d4ae6:	bf00      	nop
   d4ae8:	2003e5d0 	.word	0x2003e5d0
   d4aec:	2003e664 	.word	0x2003e664

000d4af0 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d4af0:	b510      	push	{r4, lr}
      if (_M_manager)
   d4af2:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4af4:	4604      	mov	r4, r0
      if (_M_manager)
   d4af6:	b113      	cbz	r3, d4afe <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4af8:	2203      	movs	r2, #3
   d4afa:	4601      	mov	r1, r0
   d4afc:	4798      	blx	r3
    }
   d4afe:	4620      	mov	r0, r4
   d4b00:	bd10      	pop	{r4, pc}

000d4b02 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4b02:	b510      	push	{r4, lr}
   d4b04:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   d4b06:	f7ff fff3 	bl	d4af0 <_ZNSt14_Function_baseD1Ev>
   d4b0a:	4620      	mov	r0, r4
   d4b0c:	bd10      	pop	{r4, pc}

000d4b0e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d4b0e:	b513      	push	{r0, r1, r4, lr}
   d4b10:	460b      	mov	r3, r1
   d4b12:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4b14:	e9d0 0100 	ldrd	r0, r1, [r0]
   d4b18:	466c      	mov	r4, sp
   d4b1a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4b1e:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4b22:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4b26:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4b2a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4b2e:	b002      	add	sp, #8
   d4b30:	bd10      	pop	{r4, pc}
	...

000d4b34 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d4b34:	4803      	ldr	r0, [pc, #12]	; (d4b44 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4b36:	4a04      	ldr	r2, [pc, #16]	; (d4b48 <_GLOBAL__sub_I_RGB+0x14>)
   d4b38:	4904      	ldr	r1, [pc, #16]	; (d4b4c <_GLOBAL__sub_I_RGB+0x18>)
   d4b3a:	2300      	movs	r3, #0
   d4b3c:	6083      	str	r3, [r0, #8]
   d4b3e:	f001 b8e3 	b.w	d5d08 <__aeabi_atexit>
   d4b42:	bf00      	nop
   d4b44:	2003e668 	.word	0x2003e668
   d4b48:	2003e638 	.word	0x2003e638
   d4b4c:	000d4b03 	.word	0x000d4b03

000d4b50 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d4b50:	4b01      	ldr	r3, [pc, #4]	; (d4b58 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d4b52:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d4b54:	4770      	bx	lr
   d4b56:	bf00      	nop
   d4b58:	2003e5d4 	.word	0x2003e5d4

000d4b5c <serialEventRun>:
{
   d4b5c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4b5e:	4b0b      	ldr	r3, [pc, #44]	; (d4b8c <serialEventRun+0x30>)
   d4b60:	b143      	cbz	r3, d4b74 <serialEventRun+0x18>
   d4b62:	f000 fc29 	bl	d53b8 <_Z16_fetch_usbserialv>
   d4b66:	6803      	ldr	r3, [r0, #0]
   d4b68:	691b      	ldr	r3, [r3, #16]
   d4b6a:	4798      	blx	r3
   d4b6c:	2800      	cmp	r0, #0
   d4b6e:	dd01      	ble.n	d4b74 <serialEventRun+0x18>
        serialEvent();
   d4b70:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d4b74:	4b06      	ldr	r3, [pc, #24]	; (d4b90 <serialEventRun+0x34>)
   d4b76:	b143      	cbz	r3, d4b8a <serialEventRun+0x2e>
   d4b78:	f000 fc9c 	bl	d54b4 <_Z22__fetch_global_Serial1v>
   d4b7c:	6803      	ldr	r3, [r0, #0]
   d4b7e:	691b      	ldr	r3, [r3, #16]
   d4b80:	4798      	blx	r3
   d4b82:	2800      	cmp	r0, #0
   d4b84:	dd01      	ble.n	d4b8a <serialEventRun+0x2e>
        serialEvent1();
   d4b86:	f3af 8000 	nop.w
}
   d4b8a:	bd08      	pop	{r3, pc}
	...

000d4b94 <_post_loop>:
{
   d4b94:	b508      	push	{r3, lr}
	serialEventRun();
   d4b96:	f7ff ffe1 	bl	d4b5c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4b9a:	f7ff fc73 	bl	d4484 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4b9e:	4b01      	ldr	r3, [pc, #4]	; (d4ba4 <_post_loop+0x10>)
   d4ba0:	6018      	str	r0, [r3, #0]
}
   d4ba2:	bd08      	pop	{r3, pc}
   d4ba4:	2003e7d4 	.word	0x2003e7d4

000d4ba8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4ba8:	4802      	ldr	r0, [pc, #8]	; (d4bb4 <_Z33system_initialize_user_backup_ramv+0xc>)
   d4baa:	4a03      	ldr	r2, [pc, #12]	; (d4bb8 <_Z33system_initialize_user_backup_ramv+0x10>)
   d4bac:	4903      	ldr	r1, [pc, #12]	; (d4bbc <_Z33system_initialize_user_backup_ramv+0x14>)
   d4bae:	1a12      	subs	r2, r2, r0
   d4bb0:	f001 b8c6 	b.w	d5d40 <memcpy>
   d4bb4:	2003f400 	.word	0x2003f400
   d4bb8:	2003f404 	.word	0x2003f404
   d4bbc:	000d60c0 	.word	0x000d60c0

000d4bc0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4bc0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4bc2:	2300      	movs	r3, #0
   d4bc4:	9300      	str	r3, [sp, #0]
   d4bc6:	461a      	mov	r2, r3
   d4bc8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4bcc:	f7ff fd64 	bl	d4698 <system_ctrl_set_result>
}
   d4bd0:	b003      	add	sp, #12
   d4bd2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4bd8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d4bd8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4bda:	8843      	ldrh	r3, [r0, #2]
   d4bdc:	2b0a      	cmp	r3, #10
   d4bde:	d008      	beq.n	d4bf2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4be0:	2b50      	cmp	r3, #80	; 0x50
   d4be2:	d10b      	bne.n	d4bfc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d4be4:	4b09      	ldr	r3, [pc, #36]	; (d4c0c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4be6:	681b      	ldr	r3, [r3, #0]
   d4be8:	b14b      	cbz	r3, d4bfe <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d4bea:	b003      	add	sp, #12
   d4bec:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d4bf0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d4bf2:	f7ff ffe5 	bl	d4bc0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d4bf6:	b003      	add	sp, #12
   d4bf8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4bfc:	2300      	movs	r3, #0
   d4bfe:	9300      	str	r3, [sp, #0]
   d4c00:	461a      	mov	r2, r3
   d4c02:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4c06:	f7ff fd47 	bl	d4698 <system_ctrl_set_result>
}
   d4c0a:	e7f4      	b.n	d4bf6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d4c0c:	2003e67c 	.word	0x2003e67c

000d4c10 <module_user_init_hook>:
{
   d4c10:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4c12:	4c12      	ldr	r4, [pc, #72]	; (d4c5c <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4c14:	4812      	ldr	r0, [pc, #72]	; (d4c60 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4c16:	4d13      	ldr	r5, [pc, #76]	; (d4c64 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4c18:	2100      	movs	r1, #0
   d4c1a:	f7ff fde7 	bl	d47ec <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4c1e:	6823      	ldr	r3, [r4, #0]
   d4c20:	42ab      	cmp	r3, r5
   d4c22:	4b11      	ldr	r3, [pc, #68]	; (d4c68 <module_user_init_hook+0x58>)
   d4c24:	bf0c      	ite	eq
   d4c26:	2201      	moveq	r2, #1
   d4c28:	2200      	movne	r2, #0
   d4c2a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4c2c:	d002      	beq.n	d4c34 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d4c2e:	f7ff ffbb 	bl	d4ba8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4c32:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4c34:	f7ff fc1e 	bl	d4474 <HAL_RNG_GetRandomNumber>
   d4c38:	4604      	mov	r4, r0
    srand(seed);
   d4c3a:	f001 f8b1 	bl	d5da0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4c3e:	4b0b      	ldr	r3, [pc, #44]	; (d4c6c <module_user_init_hook+0x5c>)
   d4c40:	b113      	cbz	r3, d4c48 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d4c42:	4620      	mov	r0, r4
   d4c44:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4c48:	2100      	movs	r1, #0
   d4c4a:	4808      	ldr	r0, [pc, #32]	; (d4c6c <module_user_init_hook+0x5c>)
   d4c4c:	f7ff fd9e 	bl	d478c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d4c50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4c54:	4806      	ldr	r0, [pc, #24]	; (d4c70 <module_user_init_hook+0x60>)
   d4c56:	2100      	movs	r1, #0
   d4c58:	f7ff bd14 	b.w	d4684 <system_ctrl_set_app_request_handler>
   d4c5c:	2003f400 	.word	0x2003f400
   d4c60:	000d4b51 	.word	0x000d4b51
   d4c64:	9a271c1e 	.word	0x9a271c1e
   d4c68:	2003e678 	.word	0x2003e678
   d4c6c:	00000000 	.word	0x00000000
   d4c70:	000d4bd9 	.word	0x000d4bd9

000d4c74 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4c74:	4770      	bx	lr

000d4c76 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d4c76:	2000      	movs	r0, #0
   d4c78:	4770      	bx	lr

000d4c7a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4c7a:	b510      	push	{r4, lr}
   d4c7c:	2110      	movs	r1, #16
   d4c7e:	4604      	mov	r4, r0
   d4c80:	f001 f847 	bl	d5d12 <_ZdlPvj>
   d4c84:	4620      	mov	r0, r4
   d4c86:	bd10      	pop	{r4, pc}

000d4c88 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d4c88:	b508      	push	{r3, lr}
      { delete this; }
   d4c8a:	f7ff fff6 	bl	d4c7a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4c8e:	bd08      	pop	{r3, pc}

000d4c90 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4c90:	b530      	push	{r4, r5, lr}
        type_(type) {
   d4c92:	2200      	movs	r2, #0
   d4c94:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d4c98:	6002      	str	r2, [r0, #0]
   d4c9a:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d4c9c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4c9e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d4ca0:	680c      	ldr	r4, [r1, #0]
   d4ca2:	8085      	strh	r5, [r0, #4]
   d4ca4:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4ca6:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d4ca8:	bd30      	pop	{r4, r5, pc}

000d4caa <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4caa:	b510      	push	{r4, lr}
   d4cac:	4604      	mov	r4, r0
    free((void*)msg_);
   d4cae:	6800      	ldr	r0, [r0, #0]
   d4cb0:	f7ff fd7c 	bl	d47ac <free>
}
   d4cb4:	4620      	mov	r0, r4
   d4cb6:	bd10      	pop	{r4, pc}

000d4cb8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d4cb8:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4cba:	68c4      	ldr	r4, [r0, #12]
   d4cbc:	b1f4      	cbz	r4, d4cfc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d4cbe:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4cc0:	2b02      	cmp	r3, #2
   d4cc2:	d103      	bne.n	d4ccc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d4cc4:	f104 000c 	add.w	r0, r4, #12
   d4cc8:	f7ff ffef 	bl	d4caa <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d4ccc:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d4cce:	b135      	cbz	r5, d4cde <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d4cd0:	4628      	mov	r0, r5
   d4cd2:	f7ff ff0d 	bl	d4af0 <_ZNSt14_Function_baseD1Ev>
   d4cd6:	2110      	movs	r1, #16
   d4cd8:	4628      	mov	r0, r5
   d4cda:	f001 f81a 	bl	d5d12 <_ZdlPvj>
   d4cde:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4ce0:	b135      	cbz	r5, d4cf0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d4ce2:	4628      	mov	r0, r5
   d4ce4:	f7ff ff04 	bl	d4af0 <_ZNSt14_Function_baseD1Ev>
   d4ce8:	2110      	movs	r1, #16
   d4cea:	4628      	mov	r0, r5
   d4cec:	f001 f811 	bl	d5d12 <_ZdlPvj>
   d4cf0:	4620      	mov	r0, r4
   d4cf2:	2114      	movs	r1, #20
   d4cf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4cf8:	f001 b80b 	b.w	d5d12 <_ZdlPvj>
   d4cfc:	bd38      	pop	{r3, r4, r5, pc}

000d4cfe <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d4cfe:	b510      	push	{r4, lr}
   d4d00:	b088      	sub	sp, #32
   d4d02:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d4d04:	4668      	mov	r0, sp
   d4d06:	f7ff fe3a 	bl	d497e <_ZN6StringC1EPKc>
    return (*fn)(p);
   d4d0a:	4669      	mov	r1, sp
   d4d0c:	a804      	add	r0, sp, #16
   d4d0e:	f7ff fe59 	bl	d49c4 <_ZN6StringC1ERKS_>
   d4d12:	a804      	add	r0, sp, #16
   d4d14:	47a0      	blx	r4
   d4d16:	4604      	mov	r4, r0
   d4d18:	a804      	add	r0, sp, #16
   d4d1a:	f7ff fde5 	bl	d48e8 <_ZN6StringD1Ev>
    String p(param);
   d4d1e:	4668      	mov	r0, sp
   d4d20:	f7ff fde2 	bl	d48e8 <_ZN6StringD1Ev>
}
   d4d24:	4620      	mov	r0, r4
   d4d26:	b008      	add	sp, #32
   d4d28:	bd10      	pop	{r4, pc}

000d4d2a <_ZN10CloudClass22call_std_user_functionEPvPKcS0_>:

int CloudClass::call_std_user_function(void* data, const char* param, void* reserved)
{
   d4d2a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4d2c:	4604      	mov	r4, r0
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
   d4d2e:	4668      	mov	r0, sp
   d4d30:	f7ff fe25 	bl	d497e <_ZN6StringC1EPKc>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4d34:	68a3      	ldr	r3, [r4, #8]
   d4d36:	b90b      	cbnz	r3, d4d3c <_ZN10CloudClass22call_std_user_functionEPvPKcS0_+0x12>
	__throw_bad_function_call();
   d4d38:	f000 fff1 	bl	d5d1e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4d3c:	68e3      	ldr	r3, [r4, #12]
   d4d3e:	4669      	mov	r1, sp
   d4d40:	4620      	mov	r0, r4
   d4d42:	4798      	blx	r3
   d4d44:	4604      	mov	r4, r0
   d4d46:	4668      	mov	r0, sp
   d4d48:	f7ff fdce 	bl	d48e8 <_ZN6StringD1Ev>
}
   d4d4c:	4620      	mov	r0, r4
   d4d4e:	b004      	add	sp, #16
   d4d50:	bd10      	pop	{r4, pc}

000d4d52 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d4d52:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d4d54:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d4d56:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d4d5a:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d4d5c:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4d5e:	461a      	mov	r2, r3
   d4d60:	4669      	mov	r1, sp
   d4d62:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d4d64:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d4d68:	f8ad 4000 	strh.w	r4, [sp]
   d4d6c:	f7ff fcf6 	bl	d475c <spark_function>
}
   d4d70:	b004      	add	sp, #16
   d4d72:	bd10      	pop	{r4, pc}

000d4d74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4d74:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4d76:	460e      	mov	r6, r1
   d4d78:	4604      	mov	r4, r0
   d4d7a:	f856 3b04 	ldr.w	r3, [r6], #4
   d4d7e:	9300      	str	r3, [sp, #0]
   d4d80:	460d      	mov	r5, r1
   d4d82:	a801      	add	r0, sp, #4
   d4d84:	4631      	mov	r1, r6
   d4d86:	f7ff fa65 	bl	d4254 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4d8a:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4d8c:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d4d8e:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4d90:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d4d92:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d4d94:	2300      	movs	r3, #0
   d4d96:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4d98:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d4d9a:	f7ff f9f3 	bl	d4184 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d9e:	4630      	mov	r0, r6
   d4da0:	f7ff f9f0 	bl	d4184 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d4da4:	4628      	mov	r0, r5
   d4da6:	2108      	movs	r1, #8
   d4da8:	f000 ffb3 	bl	d5d12 <_ZdlPvj>
        return p;
    }
   d4dac:	4620      	mov	r0, r4
   d4dae:	b002      	add	sp, #8
   d4db0:	bd70      	pop	{r4, r5, r6, pc}

000d4db2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d4db2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d4db4:	b510      	push	{r4, lr}
      if (_M_empty())
   d4db6:	b90a      	cbnz	r2, d4dbc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4db8:	f000 ffb1 	bl	d5d1e <_ZSt25__throw_bad_function_callv>
    }
   d4dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4dc0:	68c3      	ldr	r3, [r0, #12]
   d4dc2:	4718      	bx	r3

000d4dc4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4dc4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d4dc6:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d4dc8:	f100 0110 	add.w	r1, r0, #16
   d4dcc:	f7ff fff1 	bl	d4db2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d4dd0:	bd08      	pop	{r3, pc}

000d4dd2 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d4dd2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d4dd4:	b510      	push	{r4, lr}
      if (_M_empty())
   d4dd6:	b90a      	cbnz	r2, d4ddc <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4dd8:	f000 ffa1 	bl	d5d1e <_ZSt25__throw_bad_function_callv>
    }
   d4ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4de0:	68c3      	ldr	r3, [r0, #12]
   d4de2:	4718      	bx	r3

000d4de4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4de4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d4de6:	6800      	ldr	r0, [r0, #0]
   d4de8:	f100 0110 	add.w	r1, r0, #16
   d4dec:	f7ff fff1 	bl	d4dd2 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d4df0:	bd08      	pop	{r3, pc}
	...

000d4df4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d4df4:	b538      	push	{r3, r4, r5, lr}
   d4df6:	2300      	movs	r3, #0
   d4df8:	4604      	mov	r4, r0
   d4dfa:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4dfc:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d4dfe:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4e00:	f7ff f947 	bl	d4092 <_Znwj>
   d4e04:	b128      	cbz	r0, d4e12 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d4e06:	2301      	movs	r3, #1
   d4e08:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d4e0c:	4b02      	ldr	r3, [pc, #8]	; (d4e18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d4e0e:	6003      	str	r3, [r0, #0]
   d4e10:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4e12:	6020      	str	r0, [r4, #0]
	}
   d4e14:	4620      	mov	r0, r4
   d4e16:	bd38      	pop	{r3, r4, r5, pc}
   d4e18:	000d5f5c 	.word	0x000d5f5c

000d4e1c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d4e1c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d4e1e:	2300      	movs	r3, #0
   d4e20:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4e22:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4e24:	4604      	mov	r4, r0
   d4e26:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d4e28:	b12b      	cbz	r3, d4e36 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4e2a:	2202      	movs	r2, #2
   d4e2c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4e2e:	68eb      	ldr	r3, [r5, #12]
   d4e30:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4e32:	68ab      	ldr	r3, [r5, #8]
   d4e34:	60a3      	str	r3, [r4, #8]
    }
   d4e36:	4620      	mov	r0, r4
   d4e38:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4e3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d4e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4e3e:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d4e40:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d4e42:	4668      	mov	r0, sp
   d4e44:	f7ff ff24 	bl	d4c90 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d4e48:	f04f 0302 	mov.w	r3, #2
   d4e4c:	e8d4 2f4f 	ldrexb	r2, [r4]
   d4e50:	2a00      	cmp	r2, #0
   d4e52:	d103      	bne.n	d4e5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d4e54:	e8c4 3f41 	strexb	r1, r3, [r4]
   d4e58:	2900      	cmp	r1, #0
   d4e5a:	d1f7      	bne.n	d4e4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d4e5c:	d125      	bne.n	d4eaa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d4e5e:	f104 050c 	add.w	r5, r4, #12
   d4e62:	4669      	mov	r1, sp
   d4e64:	4628      	mov	r0, r5
   d4e66:	f7ff ff13 	bl	d4c90 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d4e6a:	f3bf 8f5b 	dmb	ish
   d4e6e:	2301      	movs	r3, #1
   d4e70:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d4e72:	2000      	movs	r0, #0
   d4e74:	f104 0308 	add.w	r3, r4, #8
   d4e78:	f3bf 8f5b 	dmb	ish
   d4e7c:	e853 6f00 	ldrex	r6, [r3]
   d4e80:	e843 0200 	strex	r2, r0, [r3]
   d4e84:	2a00      	cmp	r2, #0
   d4e86:	d1f9      	bne.n	d4e7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d4e88:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d4e8c:	b16e      	cbz	r6, d4eaa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d4e8e:	f7ff fbe9 	bl	d4664 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d4e92:	b178      	cbz	r0, d4eb4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4e94:	4629      	mov	r1, r5
   d4e96:	4630      	mov	r0, r6
   d4e98:	f7ff ff8b 	bl	d4db2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d4e9c:	4630      	mov	r0, r6
   d4e9e:	f7ff fe27 	bl	d4af0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d4ea2:	2110      	movs	r1, #16
   d4ea4:	4630      	mov	r0, r6
   d4ea6:	f000 ff34 	bl	d5d12 <_ZdlPvj>
        p_->setError(std::move(error));
   d4eaa:	4668      	mov	r0, sp
   d4eac:	f7ff fefd 	bl	d4caa <_ZN8particle5ErrorD1Ev>
    }
   d4eb0:	b009      	add	sp, #36	; 0x24
   d4eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4eb4:	4631      	mov	r1, r6
   d4eb6:	a802      	add	r0, sp, #8
   d4eb8:	f7ff ffb0 	bl	d4e1c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d4ebc:	68e0      	ldr	r0, [r4, #12]
   d4ebe:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d4ec2:	b108      	cbz	r0, d4ec8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d4ec4:	f000 ff9a 	bl	d5dfc <strdup>
        type_(type) {
   d4ec8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4eca:	2010      	movs	r0, #16
   d4ecc:	f8ad 501c 	strh.w	r5, [sp, #28]
   d4ed0:	f7ff f8df 	bl	d4092 <_Znwj>
   d4ed4:	4605      	mov	r5, r0
   d4ed6:	b1e8      	cbz	r0, d4f14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d4ed8:	2700      	movs	r7, #0
   d4eda:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4edc:	2018      	movs	r0, #24
   d4ede:	f7ff f8d8 	bl	d4092 <_Znwj>
   d4ee2:	4604      	mov	r4, r0
   d4ee4:	b188      	cbz	r0, d4f0a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d4ee6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d4ee8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d4eea:	a802      	add	r0, sp, #8
   d4eec:	f7ff fe0f 	bl	d4b0e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4ef0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4ef2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4ef4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4ef6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4ef8:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4efa:	a906      	add	r1, sp, #24
   d4efc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4efe:	60e3      	str	r3, [r4, #12]
   d4f00:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d4f04:	9205      	str	r2, [sp, #20]
   d4f06:	f7ff fec3 	bl	d4c90 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d4f0a:	4b08      	ldr	r3, [pc, #32]	; (d4f2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d4f0c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4f0e:	4b08      	ldr	r3, [pc, #32]	; (d4f30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4f10:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d4f12:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d4f14:	a806      	add	r0, sp, #24
   d4f16:	f7ff fec8 	bl	d4caa <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d4f1a:	a802      	add	r0, sp, #8
   d4f1c:	f7ff fde8 	bl	d4af0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4f20:	2200      	movs	r2, #0
   d4f22:	4629      	mov	r1, r5
   d4f24:	4803      	ldr	r0, [pc, #12]	; (d4f34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d4f26:	f7ff fba5 	bl	d4674 <application_thread_invoke>
   d4f2a:	e7b7      	b.n	d4e9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d4f2c:	000d4dc5 	.word	0x000d4dc5
   d4f30:	000d505d 	.word	0x000d505d
   d4f34:	000d5509 	.word	0x000d5509

000d4f38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4f3c:	b08a      	sub	sp, #40	; 0x28
   d4f3e:	4605      	mov	r5, r0
   d4f40:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d4f44:	460c      	mov	r4, r1
   d4f46:	4617      	mov	r7, r2
   d4f48:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4f4a:	f7ff fc0f 	bl	d476c <spark_cloud_flag_connected>
   d4f4e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d4f50:	4682      	mov	sl, r0
   d4f52:	bb38      	cbnz	r0, d4fa4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d4f54:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d4f58:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4f5a:	a905      	add	r1, sp, #20
   d4f5c:	4630      	mov	r0, r6
   d4f5e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4f62:	f7ff fe95 	bl	d4c90 <_ZN8particle5ErrorC1EOS0_>
   d4f66:	2014      	movs	r0, #20
   d4f68:	f7ff f893 	bl	d4092 <_Znwj>
   d4f6c:	4604      	mov	r4, r0
   d4f6e:	b148      	cbz	r0, d4f84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d4f70:	2302      	movs	r3, #2
   d4f72:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4f74:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4f76:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4f7a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d4f7c:	4631      	mov	r1, r6
   d4f7e:	300c      	adds	r0, #12
   d4f80:	f7ff fe86 	bl	d4c90 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d4f84:	4628      	mov	r0, r5
	: __shared_count(__p)
   d4f86:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d4f88:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d4f8c:	f7ff ff32 	bl	d4df4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4f90:	4630      	mov	r0, r6
   d4f92:	f7ff fe8a 	bl	d4caa <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d4f96:	a805      	add	r0, sp, #20
   d4f98:	f7ff fe87 	bl	d4caa <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d4f9c:	4628      	mov	r0, r5
   d4f9e:	b00a      	add	sp, #40	; 0x28
   d4fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4fa4:	230c      	movs	r3, #12
   d4fa6:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d4faa:	2014      	movs	r0, #20
   d4fac:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d4fb0:	9307      	str	r3, [sp, #28]
   d4fb2:	f7ff f86e 	bl	d4092 <_Znwj>
   d4fb6:	4601      	mov	r1, r0
   d4fb8:	b128      	cbz	r0, d4fc6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4fba:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d4fbe:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4fc2:	f880 a001 	strb.w	sl, [r0, #1]
   d4fc6:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d4fc8:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d4fca:	f7ff ff13 	bl	d4df4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d4fce:	4b22      	ldr	r3, [pc, #136]	; (d5058 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d4fd0:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d4fd2:	2008      	movs	r0, #8
   d4fd4:	f7ff f85d 	bl	d4092 <_Znwj>
   d4fd8:	4682      	mov	sl, r0
   d4fda:	b128      	cbz	r0, d4fe8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4fdc:	9b03      	ldr	r3, [sp, #12]
   d4fde:	f840 3b04 	str.w	r3, [r0], #4
   d4fe2:	a904      	add	r1, sp, #16
   d4fe4:	f7ff f936 	bl	d4254 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4fe8:	9600      	str	r6, [sp, #0]
   d4fea:	fa5f f389 	uxtb.w	r3, r9
   d4fee:	4642      	mov	r2, r8
   d4ff0:	4639      	mov	r1, r7
   d4ff2:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d4ff4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4ff8:	f7ff fbc0 	bl	d477c <spark_send_event>
   d4ffc:	b9b8      	cbnz	r0, d502e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d4ffe:	9b03      	ldr	r3, [sp, #12]
   d5000:	785b      	ldrb	r3, [r3, #1]
   d5002:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5006:	b993      	cbnz	r3, d502e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d5008:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d500c:	a905      	add	r1, sp, #20
   d500e:	a803      	add	r0, sp, #12
   d5010:	9205      	str	r2, [sp, #20]
   d5012:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5016:	f7ff ff11 	bl	d4e3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d501a:	a805      	add	r0, sp, #20
   d501c:	f7ff fe45 	bl	d4caa <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5020:	a805      	add	r0, sp, #20
   d5022:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5024:	f7ff fea6 	bl	d4d74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d5028:	a806      	add	r0, sp, #24
   d502a:	f7ff f8ab 	bl	d4184 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d502e:	9b03      	ldr	r3, [sp, #12]
   d5030:	9305      	str	r3, [sp, #20]
   d5032:	a904      	add	r1, sp, #16
   d5034:	a806      	add	r0, sp, #24
   d5036:	f7ff f90d 	bl	d4254 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d503a:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d503c:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d503e:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d5040:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d5042:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d5044:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d5046:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d5048:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d504a:	f7ff f89b 	bl	d4184 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d504e:	a804      	add	r0, sp, #16
   d5050:	f7ff f898 	bl	d4184 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d5054:	e7a2      	b.n	d4f9c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d5056:	bf00      	nop
   d5058:	000d5121 	.word	0x000d5121

000d505c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d505c:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d505e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5060:	4605      	mov	r5, r0
	  switch (__op)
   d5062:	d007      	beq.n	d5074 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d5064:	2a03      	cmp	r2, #3
   d5066:	d018      	beq.n	d509a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d5068:	2a01      	cmp	r2, #1
   d506a:	d101      	bne.n	d5070 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d506c:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d506e:	6003      	str	r3, [r0, #0]
	}
   d5070:	2000      	movs	r0, #0
   d5072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d5074:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d5076:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d5078:	f7ff f80b 	bl	d4092 <_Znwj>
   d507c:	4604      	mov	r4, r0
   d507e:	b150      	cbz	r0, d5096 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5080:	4631      	mov	r1, r6
   d5082:	f7ff fecb 	bl	d4e1c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d5086:	6930      	ldr	r0, [r6, #16]
   d5088:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d508c:	b108      	cbz	r0, d5092 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d508e:	f000 feb5 	bl	d5dfc <strdup>
        type_(type) {
   d5092:	6120      	str	r0, [r4, #16]
   d5094:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d5096:	602c      	str	r4, [r5, #0]
	}
   d5098:	e7ea      	b.n	d5070 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d509a:	6804      	ldr	r4, [r0, #0]
   d509c:	2c00      	cmp	r4, #0
   d509e:	d0e7      	beq.n	d5070 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d50a0:	f104 0010 	add.w	r0, r4, #16
   d50a4:	f7ff fe01 	bl	d4caa <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d50a8:	4620      	mov	r0, r4
   d50aa:	f7ff fd21 	bl	d4af0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d50ae:	2118      	movs	r1, #24
   d50b0:	4620      	mov	r0, r4
   d50b2:	f000 fe2e 	bl	d5d12 <_ZdlPvj>
   d50b6:	e7db      	b.n	d5070 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d50b8 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d50b8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d50ba:	2300      	movs	r3, #0
   d50bc:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d50be:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d50c0:	4604      	mov	r4, r0
   d50c2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d50c4:	b12b      	cbz	r3, d50d2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d50c6:	2202      	movs	r2, #2
   d50c8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d50ca:	68eb      	ldr	r3, [r5, #12]
   d50cc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d50ce:	68ab      	ldr	r3, [r5, #8]
   d50d0:	60a3      	str	r3, [r4, #8]
    }
   d50d2:	4620      	mov	r0, r4
   d50d4:	bd38      	pop	{r3, r4, r5, pc}

000d50d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d50d6:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d50d8:	b570      	push	{r4, r5, r6, lr}
   d50da:	4604      	mov	r4, r0
	  switch (__op)
   d50dc:	d007      	beq.n	d50ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d50de:	2a03      	cmp	r2, #3
   d50e0:	d012      	beq.n	d5108 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d50e2:	2a01      	cmp	r2, #1
   d50e4:	d101      	bne.n	d50ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d50e6:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d50e8:	6003      	str	r3, [r0, #0]
	}
   d50ea:	2000      	movs	r0, #0
   d50ec:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d50ee:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d50f0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d50f2:	f7fe ffce 	bl	d4092 <_Znwj>
   d50f6:	4605      	mov	r5, r0
   d50f8:	b120      	cbz	r0, d5104 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d50fa:	4631      	mov	r1, r6
   d50fc:	f7ff ffdc 	bl	d50b8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5100:	7c33      	ldrb	r3, [r6, #16]
   d5102:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d5104:	6025      	str	r5, [r4, #0]
	}
   d5106:	e7f0      	b.n	d50ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d5108:	6804      	ldr	r4, [r0, #0]
   d510a:	2c00      	cmp	r4, #0
   d510c:	d0ed      	beq.n	d50ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d510e:	4620      	mov	r0, r4
   d5110:	f7ff fcee 	bl	d4af0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d5114:	2114      	movs	r1, #20
   d5116:	4620      	mov	r0, r4
   d5118:	f000 fdfb 	bl	d5d12 <_ZdlPvj>
   d511c:	e7e5      	b.n	d50ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d5120 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5120:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5122:	b089      	sub	sp, #36	; 0x24
   d5124:	4604      	mov	r4, r0
   d5126:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5128:	a801      	add	r0, sp, #4
   d512a:	4611      	mov	r1, r2
   d512c:	f7ff fe22 	bl	d4d74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5130:	b1a4      	cbz	r4, d515c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5132:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5134:	b11d      	cbz	r5, d513e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d5136:	4628      	mov	r0, r5
   d5138:	f000 fe60 	bl	d5dfc <strdup>
   d513c:	4605      	mov	r5, r0
   d513e:	a801      	add	r0, sp, #4
   d5140:	a903      	add	r1, sp, #12
        type_(type) {
   d5142:	9503      	str	r5, [sp, #12]
   d5144:	f8ad 4010 	strh.w	r4, [sp, #16]
   d5148:	f7ff fe78 	bl	d4e3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d514c:	a803      	add	r0, sp, #12
   d514e:	f7ff fdac 	bl	d4caa <_ZN8particle5ErrorD1Ev>
   d5152:	a802      	add	r0, sp, #8
   d5154:	f7ff f816 	bl	d4184 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5158:	b009      	add	sp, #36	; 0x24
   d515a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d515c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d515e:	2301      	movs	r3, #1
   d5160:	e8d5 2f4f 	ldrexb	r2, [r5]
   d5164:	2a00      	cmp	r2, #0
   d5166:	d103      	bne.n	d5170 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d5168:	e8c5 3f41 	strexb	r1, r3, [r5]
   d516c:	2900      	cmp	r1, #0
   d516e:	d1f7      	bne.n	d5160 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d5170:	d1ef      	bne.n	d5152 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d5172:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d5174:	f3bf 8f5b 	dmb	ish
   d5178:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d517a:	1d2b      	adds	r3, r5, #4
   d517c:	f3bf 8f5b 	dmb	ish
   d5180:	e853 6f00 	ldrex	r6, [r3]
   d5184:	e843 4200 	strex	r2, r4, [r3]
   d5188:	2a00      	cmp	r2, #0
   d518a:	d1f9      	bne.n	d5180 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d518c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d5190:	2e00      	cmp	r6, #0
   d5192:	d0de      	beq.n	d5152 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d5194:	4620      	mov	r0, r4
   d5196:	f7ff fa65 	bl	d4664 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d519a:	4607      	mov	r7, r0
   d519c:	b160      	cbz	r0, d51b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d519e:	f105 010c 	add.w	r1, r5, #12
   d51a2:	4630      	mov	r0, r6
   d51a4:	f7ff fe15 	bl	d4dd2 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d51a8:	4630      	mov	r0, r6
   d51aa:	f7ff fca1 	bl	d4af0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d51ae:	2110      	movs	r1, #16
   d51b0:	4630      	mov	r0, r6
   d51b2:	f000 fdae 	bl	d5d12 <_ZdlPvj>
   d51b6:	e7cc      	b.n	d5152 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d51b8:	4631      	mov	r1, r6
   d51ba:	a803      	add	r0, sp, #12
   d51bc:	f7ff ff7c 	bl	d50b8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d51c0:	7b2b      	ldrb	r3, [r5, #12]
   d51c2:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d51c6:	2010      	movs	r0, #16
   d51c8:	f7fe ff63 	bl	d4092 <_Znwj>
   d51cc:	4605      	mov	r5, r0
   d51ce:	b1d0      	cbz	r0, d5206 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d51d0:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d51d2:	2014      	movs	r0, #20
   d51d4:	f7fe ff5d 	bl	d4092 <_Znwj>
   d51d8:	4604      	mov	r4, r0
   d51da:	b178      	cbz	r0, d51fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d51dc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d51de:	4601      	mov	r1, r0
   d51e0:	a803      	add	r0, sp, #12
   d51e2:	f7ff fc94 	bl	d4b0e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d51e6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d51e8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d51ea:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d51ec:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d51ee:	9205      	str	r2, [sp, #20]
   d51f0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d51f2:	60e3      	str	r3, [r4, #12]
   d51f4:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d51f8:	9206      	str	r2, [sp, #24]
   d51fa:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d51fc:	4b06      	ldr	r3, [pc, #24]	; (d5218 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d51fe:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5200:	4b06      	ldr	r3, [pc, #24]	; (d521c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5202:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d5204:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d5206:	a803      	add	r0, sp, #12
   d5208:	f7ff fc72 	bl	d4af0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d520c:	2200      	movs	r2, #0
   d520e:	4629      	mov	r1, r5
   d5210:	4803      	ldr	r0, [pc, #12]	; (d5220 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d5212:	f7ff fa2f 	bl	d4674 <application_thread_invoke>
   d5216:	e7c7      	b.n	d51a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d5218:	000d4de5 	.word	0x000d4de5
   d521c:	000d50d7 	.word	0x000d50d7
   d5220:	000d5509 	.word	0x000d5509

000d5224 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5224:	4770      	bx	lr

000d5226 <_ZN9IPAddressD0Ev>:
   d5226:	b510      	push	{r4, lr}
   d5228:	2118      	movs	r1, #24
   d522a:	4604      	mov	r4, r0
   d522c:	f000 fd71 	bl	d5d12 <_ZdlPvj>
   d5230:	4620      	mov	r0, r4
   d5232:	bd10      	pop	{r4, pc}

000d5234 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5234:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5236:	7d03      	ldrb	r3, [r0, #20]
   d5238:	2b06      	cmp	r3, #6
{
   d523a:	b08d      	sub	sp, #52	; 0x34
   d523c:	460e      	mov	r6, r1
   d523e:	f100 0704 	add.w	r7, r0, #4
   d5242:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5246:	d012      	beq.n	d526e <_ZNK9IPAddress7printToER5Print+0x3a>
   d5248:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d524c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5250:	220a      	movs	r2, #10
   d5252:	4630      	mov	r0, r6
   d5254:	f7ff fc1b 	bl	d4a8e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5258:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d525a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d525c:	d019      	beq.n	d5292 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d525e:	2c00      	cmp	r4, #0
   d5260:	d0f4      	beq.n	d524c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5262:	212e      	movs	r1, #46	; 0x2e
   d5264:	4630      	mov	r0, r6
   d5266:	f7ff fc0f 	bl	d4a88 <_ZN5Print5printEc>
   d526a:	4404      	add	r4, r0
   d526c:	e7ee      	b.n	d524c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d526e:	232f      	movs	r3, #47	; 0x2f
   d5270:	466a      	mov	r2, sp
   d5272:	4639      	mov	r1, r7
   d5274:	200a      	movs	r0, #10
		buf[0] = 0;
   d5276:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d527a:	f7ff f91b 	bl	d44b4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d527e:	4668      	mov	r0, sp
   d5280:	f000 fdd9 	bl	d5e36 <strlen>
   d5284:	6833      	ldr	r3, [r6, #0]
   d5286:	4602      	mov	r2, r0
   d5288:	68db      	ldr	r3, [r3, #12]
   d528a:	4669      	mov	r1, sp
   d528c:	4630      	mov	r0, r6
   d528e:	4798      	blx	r3
   d5290:	4604      	mov	r4, r0
    }
    return n;
}
   d5292:	4620      	mov	r0, r4
   d5294:	b00d      	add	sp, #52	; 0x34
   d5296:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5298 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5298:	b510      	push	{r4, lr}
   d529a:	4b05      	ldr	r3, [pc, #20]	; (d52b0 <_ZN9IPAddressC1Ev+0x18>)
   d529c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d529e:	2211      	movs	r2, #17
   d52a0:	f840 3b04 	str.w	r3, [r0], #4
   d52a4:	2100      	movs	r1, #0
   d52a6:	f000 fd73 	bl	d5d90 <memset>
}
   d52aa:	4620      	mov	r0, r4
   d52ac:	bd10      	pop	{r4, pc}
   d52ae:	bf00      	nop
   d52b0:	000d5f78 	.word	0x000d5f78

000d52b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d52b4:	4603      	mov	r3, r0
   d52b6:	4a07      	ldr	r2, [pc, #28]	; (d52d4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d52b8:	b510      	push	{r4, lr}
   d52ba:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d52be:	f101 0210 	add.w	r2, r1, #16
   d52c2:	f851 4b04 	ldr.w	r4, [r1], #4
   d52c6:	f843 4b04 	str.w	r4, [r3], #4
   d52ca:	4291      	cmp	r1, r2
   d52cc:	d1f9      	bne.n	d52c2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d52ce:	780a      	ldrb	r2, [r1, #0]
   d52d0:	701a      	strb	r2, [r3, #0]
}
   d52d2:	bd10      	pop	{r4, pc}
   d52d4:	000d5f78 	.word	0x000d5f78

000d52d8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d52d8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d52da:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d52de:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d52e2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d52e6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d52ea:	2304      	movs	r3, #4
   d52ec:	6041      	str	r1, [r0, #4]
   d52ee:	7503      	strb	r3, [r0, #20]
}
   d52f0:	bd10      	pop	{r4, pc}

000d52f2 <_ZN9IPAddressaSEPKh>:
{
   d52f2:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d52f4:	78cb      	ldrb	r3, [r1, #3]
   d52f6:	9300      	str	r3, [sp, #0]
   d52f8:	788b      	ldrb	r3, [r1, #2]
   d52fa:	784a      	ldrb	r2, [r1, #1]
   d52fc:	7809      	ldrb	r1, [r1, #0]
   d52fe:	f7ff ffeb 	bl	d52d8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5302:	b002      	add	sp, #8
   d5304:	bd10      	pop	{r4, pc}

000d5306 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5306:	7441      	strb	r1, [r0, #17]
}
   d5308:	4770      	bx	lr

000d530a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d530a:	4770      	bx	lr

000d530c <_ZN9USBSerial4readEv>:
{
   d530c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d530e:	2100      	movs	r1, #0
   d5310:	7c00      	ldrb	r0, [r0, #16]
   d5312:	f7ff f977 	bl	d4604 <HAL_USB_USART_Receive_Data>
}
   d5316:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d531a:	bd08      	pop	{r3, pc}

000d531c <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d531c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d531e:	2101      	movs	r1, #1
   d5320:	7c00      	ldrb	r0, [r0, #16]
   d5322:	f7ff f96f 	bl	d4604 <HAL_USB_USART_Receive_Data>
}
   d5326:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d532a:	bd08      	pop	{r3, pc}

000d532c <_ZN9USBSerial17availableForWriteEv>:
{
   d532c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d532e:	7c00      	ldrb	r0, [r0, #16]
   d5330:	f7ff f960 	bl	d45f4 <HAL_USB_USART_Available_Data_For_Write>
}
   d5334:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5338:	bd08      	pop	{r3, pc}

000d533a <_ZN9USBSerial9availableEv>:
{
   d533a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d533c:	7c00      	ldrb	r0, [r0, #16]
   d533e:	f7ff f951 	bl	d45e4 <HAL_USB_USART_Available_Data>
}
   d5342:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5346:	bd08      	pop	{r3, pc}

000d5348 <_ZN9USBSerial5writeEh>:
{
   d5348:	b513      	push	{r0, r1, r4, lr}
   d534a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d534c:	7c00      	ldrb	r0, [r0, #16]
{
   d534e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5350:	f7ff f950 	bl	d45f4 <HAL_USB_USART_Available_Data_For_Write>
   d5354:	2800      	cmp	r0, #0
   d5356:	9901      	ldr	r1, [sp, #4]
   d5358:	dc01      	bgt.n	d535e <_ZN9USBSerial5writeEh+0x16>
   d535a:	7c60      	ldrb	r0, [r4, #17]
   d535c:	b120      	cbz	r0, d5368 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d535e:	7c20      	ldrb	r0, [r4, #16]
   d5360:	f7ff f958 	bl	d4614 <HAL_USB_USART_Send_Data>
   d5364:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5368:	b002      	add	sp, #8
   d536a:	bd10      	pop	{r4, pc}

000d536c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d536c:	7c00      	ldrb	r0, [r0, #16]
   d536e:	f7ff b959 	b.w	d4624 <HAL_USB_USART_Flush_Data>

000d5372 <_ZN9USBSerialD0Ev>:
   d5372:	b510      	push	{r4, lr}
   d5374:	2114      	movs	r1, #20
   d5376:	4604      	mov	r4, r0
   d5378:	f000 fccb 	bl	d5d12 <_ZdlPvj>
   d537c:	4620      	mov	r0, r4
   d537e:	bd10      	pop	{r4, pc}

000d5380 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5380:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5386:	4604      	mov	r4, r0
   d5388:	4608      	mov	r0, r1
   d538a:	2100      	movs	r1, #0
   d538c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5390:	4b04      	ldr	r3, [pc, #16]	; (d53a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5392:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5394:	2301      	movs	r3, #1
  _serial = serial;
   d5396:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5398:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d539a:	4611      	mov	r1, r2
   d539c:	f7ff f91a 	bl	d45d4 <HAL_USB_USART_Init>
}
   d53a0:	4620      	mov	r0, r4
   d53a2:	bd10      	pop	{r4, pc}
   d53a4:	000d5f8c 	.word	0x000d5f8c

000d53a8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d53a8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d53aa:	2214      	movs	r2, #20
{
   d53ac:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d53ae:	2100      	movs	r1, #0
   d53b0:	f000 fcee 	bl	d5d90 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d53b4:	4620      	mov	r0, r4
   d53b6:	bd10      	pop	{r4, pc}

000d53b8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d53b8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d53ba:	4c10      	ldr	r4, [pc, #64]	; (d53fc <_Z16_fetch_usbserialv+0x44>)
{
   d53bc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d53be:	a803      	add	r0, sp, #12
   d53c0:	f7ff fff2 	bl	d53a8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d53c4:	7821      	ldrb	r1, [r4, #0]
   d53c6:	f3bf 8f5b 	dmb	ish
   d53ca:	f011 0101 	ands.w	r1, r1, #1
   d53ce:	d111      	bne.n	d53f4 <_Z16_fetch_usbserialv+0x3c>
   d53d0:	4620      	mov	r0, r4
   d53d2:	9101      	str	r1, [sp, #4]
   d53d4:	f7fe fe65 	bl	d40a2 <__cxa_guard_acquire>
   d53d8:	9901      	ldr	r1, [sp, #4]
   d53da:	b158      	cbz	r0, d53f4 <_Z16_fetch_usbserialv+0x3c>
   d53dc:	aa03      	add	r2, sp, #12
   d53de:	4808      	ldr	r0, [pc, #32]	; (d5400 <_Z16_fetch_usbserialv+0x48>)
   d53e0:	f7ff ffce 	bl	d5380 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d53e4:	4620      	mov	r0, r4
   d53e6:	f7fe fe61 	bl	d40ac <__cxa_guard_release>
   d53ea:	4a06      	ldr	r2, [pc, #24]	; (d5404 <_Z16_fetch_usbserialv+0x4c>)
   d53ec:	4906      	ldr	r1, [pc, #24]	; (d5408 <_Z16_fetch_usbserialv+0x50>)
   d53ee:	4804      	ldr	r0, [pc, #16]	; (d5400 <_Z16_fetch_usbserialv+0x48>)
   d53f0:	f000 fc8a 	bl	d5d08 <__aeabi_atexit>
	return _usbserial;
}
   d53f4:	4802      	ldr	r0, [pc, #8]	; (d5400 <_Z16_fetch_usbserialv+0x48>)
   d53f6:	b008      	add	sp, #32
   d53f8:	bd10      	pop	{r4, pc}
   d53fa:	bf00      	nop
   d53fc:	2003e680 	.word	0x2003e680
   d5400:	2003e684 	.word	0x2003e684
   d5404:	2003e638 	.word	0x2003e638
   d5408:	000d530b 	.word	0x000d530b

000d540c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d540c:	4770      	bx	lr

000d540e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d540e:	7441      	strb	r1, [r0, #17]
}
   d5410:	4770      	bx	lr

000d5412 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d5412:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d5414:	7c00      	ldrb	r0, [r0, #16]
   d5416:	f7ff f88d 	bl	d4534 <hal_usart_available_data_for_write>
}
   d541a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d541e:	bd08      	pop	{r3, pc}

000d5420 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5420:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d5422:	7c00      	ldrb	r0, [r0, #16]
   d5424:	f7ff f85e 	bl	d44e4 <hal_usart_available>
}
   d5428:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d542c:	bd08      	pop	{r3, pc}

000d542e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d542e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d5430:	7c00      	ldrb	r0, [r0, #16]
   d5432:	f7ff f867 	bl	d4504 <hal_usart_peek>
}
   d5436:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d543a:	bd08      	pop	{r3, pc}

000d543c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d543c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d543e:	7c00      	ldrb	r0, [r0, #16]
   d5440:	f7ff f858 	bl	d44f4 <hal_usart_read>
}
   d5444:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5448:	bd08      	pop	{r3, pc}

000d544a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d544a:	7c00      	ldrb	r0, [r0, #16]
   d544c:	f7ff b862 	b.w	d4514 <hal_usart_flush>

000d5450 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5450:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5452:	7c45      	ldrb	r5, [r0, #17]
{
   d5454:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5456:	b12d      	cbz	r5, d5464 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d5458:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d545a:	b003      	add	sp, #12
   d545c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d5460:	f7ff b838 	b.w	d44d4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5464:	7c00      	ldrb	r0, [r0, #16]
   d5466:	9101      	str	r1, [sp, #4]
   d5468:	f7ff f864 	bl	d4534 <hal_usart_available_data_for_write>
   d546c:	2800      	cmp	r0, #0
   d546e:	9901      	ldr	r1, [sp, #4]
   d5470:	dcf2      	bgt.n	d5458 <_ZN11USARTSerial5writeEh+0x8>
}
   d5472:	4628      	mov	r0, r5
   d5474:	b003      	add	sp, #12
   d5476:	bd30      	pop	{r4, r5, pc}

000d5478 <_ZN11USARTSerialD0Ev>:
   d5478:	b510      	push	{r4, lr}
   d547a:	2114      	movs	r1, #20
   d547c:	4604      	mov	r4, r0
   d547e:	f000 fc48 	bl	d5d12 <_ZdlPvj>
   d5482:	4620      	mov	r0, r4
   d5484:	bd10      	pop	{r4, pc}
	...

000d5488 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d5488:	b510      	push	{r4, lr}
   d548a:	f04f 0c00 	mov.w	ip, #0
   d548e:	4604      	mov	r4, r0
   d5490:	4608      	mov	r0, r1
   d5492:	4611      	mov	r1, r2
   d5494:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5498:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d549c:	4a04      	ldr	r2, [pc, #16]	; (d54b0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d549e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d54a0:	2201      	movs	r2, #1
  _serial = serial;
   d54a2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d54a4:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d54a6:	461a      	mov	r2, r3
   d54a8:	f7ff f80c 	bl	d44c4 <hal_usart_init>
}
   d54ac:	4620      	mov	r0, r4
   d54ae:	bd10      	pop	{r4, pc}
   d54b0:	000d5fbc 	.word	0x000d5fbc

000d54b4 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d54b4:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d54b6:	4c0e      	ldr	r4, [pc, #56]	; (d54f0 <_Z22__fetch_global_Serial1v+0x3c>)
   d54b8:	7821      	ldrb	r1, [r4, #0]
   d54ba:	f3bf 8f5b 	dmb	ish
   d54be:	f011 0101 	ands.w	r1, r1, #1
   d54c2:	d112      	bne.n	d54ea <_Z22__fetch_global_Serial1v+0x36>
   d54c4:	4620      	mov	r0, r4
   d54c6:	9101      	str	r1, [sp, #4]
   d54c8:	f7fe fdeb 	bl	d40a2 <__cxa_guard_acquire>
   d54cc:	9901      	ldr	r1, [sp, #4]
   d54ce:	b160      	cbz	r0, d54ea <_Z22__fetch_global_Serial1v+0x36>
   d54d0:	4a08      	ldr	r2, [pc, #32]	; (d54f4 <_Z22__fetch_global_Serial1v+0x40>)
   d54d2:	4b09      	ldr	r3, [pc, #36]	; (d54f8 <_Z22__fetch_global_Serial1v+0x44>)
   d54d4:	4809      	ldr	r0, [pc, #36]	; (d54fc <_Z22__fetch_global_Serial1v+0x48>)
   d54d6:	f7ff ffd7 	bl	d5488 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d54da:	4620      	mov	r0, r4
   d54dc:	f7fe fde6 	bl	d40ac <__cxa_guard_release>
   d54e0:	4a07      	ldr	r2, [pc, #28]	; (d5500 <_Z22__fetch_global_Serial1v+0x4c>)
   d54e2:	4908      	ldr	r1, [pc, #32]	; (d5504 <_Z22__fetch_global_Serial1v+0x50>)
   d54e4:	4805      	ldr	r0, [pc, #20]	; (d54fc <_Z22__fetch_global_Serial1v+0x48>)
   d54e6:	f000 fc0f 	bl	d5d08 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d54ea:	4804      	ldr	r0, [pc, #16]	; (d54fc <_Z22__fetch_global_Serial1v+0x48>)
   d54ec:	b002      	add	sp, #8
   d54ee:	bd10      	pop	{r4, pc}
   d54f0:	2003e698 	.word	0x2003e698
   d54f4:	2003e69c 	.word	0x2003e69c
   d54f8:	2003e720 	.word	0x2003e720
   d54fc:	2003e7a4 	.word	0x2003e7a4
   d5500:	2003e638 	.word	0x2003e638
   d5504:	000d540d 	.word	0x000d540d

000d5508 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5508:	b510      	push	{r4, lr}
      if (_M_empty())
   d550a:	6883      	ldr	r3, [r0, #8]
   d550c:	4604      	mov	r4, r0
   d550e:	b90b      	cbnz	r3, d5514 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5510:	f000 fc05 	bl	d5d1e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5514:	68c3      	ldr	r3, [r0, #12]
   d5516:	4798      	blx	r3
      if (_M_manager)
   d5518:	68a3      	ldr	r3, [r4, #8]
   d551a:	b11b      	cbz	r3, d5524 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d551c:	2203      	movs	r2, #3
   d551e:	4621      	mov	r1, r4
   d5520:	4620      	mov	r0, r4
   d5522:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5524:	4620      	mov	r0, r4
   d5526:	2110      	movs	r1, #16
}
   d5528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d552c:	f000 bbf1 	b.w	d5d12 <_ZdlPvj>

000d5530 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d5530:	4770      	bx	lr

000d5532 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5532:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5534:	4606      	mov	r6, r0
   d5536:	4615      	mov	r5, r2
   d5538:	460c      	mov	r4, r1
   d553a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d553c:	42bc      	cmp	r4, r7
   d553e:	d006      	beq.n	d554e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5540:	6833      	ldr	r3, [r6, #0]
   d5542:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5546:	689b      	ldr	r3, [r3, #8]
   d5548:	4630      	mov	r0, r6
   d554a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d554c:	e7f6      	b.n	d553c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d554e:	4628      	mov	r0, r5
   d5550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5552 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d5552:	7c00      	ldrb	r0, [r0, #16]
   d5554:	2200      	movs	r2, #0
   d5556:	f7fe bff5 	b.w	d4544 <hal_i2c_write>

000d555a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d555a:	7c00      	ldrb	r0, [r0, #16]
   d555c:	2100      	movs	r1, #0
   d555e:	f7fe bff9 	b.w	d4554 <hal_i2c_available>

000d5562 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d5562:	7c00      	ldrb	r0, [r0, #16]
   d5564:	2100      	movs	r1, #0
   d5566:	f7fe bffd 	b.w	d4564 <hal_i2c_read>

000d556a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d556a:	7c00      	ldrb	r0, [r0, #16]
   d556c:	2100      	movs	r1, #0
   d556e:	f7ff b801 	b.w	d4574 <hal_i2c_peek>

000d5572 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d5572:	7c00      	ldrb	r0, [r0, #16]
   d5574:	2100      	movs	r1, #0
   d5576:	f7ff b805 	b.w	d4584 <hal_i2c_flush>

000d557a <_ZN7TwoWireD0Ev>:
   d557a:	b510      	push	{r4, lr}
   d557c:	2114      	movs	r1, #20
   d557e:	4604      	mov	r4, r0
   d5580:	f000 fbc7 	bl	d5d12 <_ZdlPvj>
   d5584:	4620      	mov	r0, r4
   d5586:	bd10      	pop	{r4, pc}

000d5588 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5588:	b510      	push	{r4, lr}
   d558a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d558e:	4604      	mov	r4, r0
   d5590:	4608      	mov	r0, r1
   d5592:	2100      	movs	r1, #0
   d5594:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5598:	4b03      	ldr	r3, [pc, #12]	; (d55a8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d559a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d559c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d559e:	4611      	mov	r1, r2
   d55a0:	f7ff f800 	bl	d45a4 <hal_i2c_init>
}
   d55a4:	4620      	mov	r0, r4
   d55a6:	bd10      	pop	{r4, pc}
   d55a8:	000d5fec 	.word	0x000d5fec

000d55ac <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d55ac:	2200      	movs	r2, #0
   d55ae:	6840      	ldr	r0, [r0, #4]
   d55b0:	4611      	mov	r1, r2
   d55b2:	f7ff b893 	b.w	d46dc <network_ready>

000d55b6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d55b6:	2200      	movs	r2, #0
   d55b8:	6840      	ldr	r0, [r0, #4]
   d55ba:	4611      	mov	r1, r2
   d55bc:	f7ff b8ae 	b.w	d471c <network_listening>

000d55c0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d55c0:	2200      	movs	r2, #0
   d55c2:	6840      	ldr	r0, [r0, #4]
   d55c4:	4611      	mov	r1, r2
   d55c6:	f7ff b8b9 	b.w	d473c <network_get_listen_timeout>

000d55ca <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d55ca:	6840      	ldr	r0, [r0, #4]
   d55cc:	2200      	movs	r2, #0
   d55ce:	f7ff b8ad 	b.w	d472c <network_set_listen_timeout>

000d55d2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d55d2:	6840      	ldr	r0, [r0, #4]
   d55d4:	2200      	movs	r2, #0
   d55d6:	f081 0101 	eor.w	r1, r1, #1
   d55da:	f7ff b897 	b.w	d470c <network_listen>

000d55de <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d55de:	2300      	movs	r3, #0
   d55e0:	6840      	ldr	r0, [r0, #4]
   d55e2:	461a      	mov	r2, r3
   d55e4:	4619      	mov	r1, r3
   d55e6:	f7ff b889 	b.w	d46fc <network_off>

000d55ea <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d55ea:	2300      	movs	r3, #0
   d55ec:	6840      	ldr	r0, [r0, #4]
   d55ee:	461a      	mov	r2, r3
   d55f0:	4619      	mov	r1, r3
   d55f2:	f7ff b87b 	b.w	d46ec <network_on>

000d55f6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d55f6:	2200      	movs	r2, #0
   d55f8:	6840      	ldr	r0, [r0, #4]
   d55fa:	4611      	mov	r1, r2
   d55fc:	f7ff b85e 	b.w	d46bc <network_connecting>

000d5600 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5600:	6840      	ldr	r0, [r0, #4]
   d5602:	2200      	movs	r2, #0
   d5604:	2102      	movs	r1, #2
   d5606:	f7ff b861 	b.w	d46cc <network_disconnect>

000d560a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d560a:	2300      	movs	r3, #0
   d560c:	6840      	ldr	r0, [r0, #4]
   d560e:	461a      	mov	r2, r3
   d5610:	f7ff b84c 	b.w	d46ac <network_connect>

000d5614 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5614:	4b02      	ldr	r3, [pc, #8]	; (d5620 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5616:	2204      	movs	r2, #4
   d5618:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d561a:	4a02      	ldr	r2, [pc, #8]	; (d5624 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d561c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d561e:	4770      	bx	lr
   d5620:	2003e7b8 	.word	0x2003e7b8
   d5624:	000d6014 	.word	0x000d6014

000d5628 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5628:	2300      	movs	r3, #0
   d562a:	6840      	ldr	r0, [r0, #4]
   d562c:	461a      	mov	r2, r3
   d562e:	f7ff b83d 	b.w	d46ac <network_connect>

000d5632 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5632:	6840      	ldr	r0, [r0, #4]
   d5634:	2200      	movs	r2, #0
   d5636:	2102      	movs	r1, #2
   d5638:	f7ff b848 	b.w	d46cc <network_disconnect>

000d563c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d563c:	2200      	movs	r2, #0
   d563e:	6840      	ldr	r0, [r0, #4]
   d5640:	4611      	mov	r1, r2
   d5642:	f7ff b83b 	b.w	d46bc <network_connecting>

000d5646 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5646:	2200      	movs	r2, #0
   d5648:	6840      	ldr	r0, [r0, #4]
   d564a:	4611      	mov	r1, r2
   d564c:	f7ff b846 	b.w	d46dc <network_ready>

000d5650 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5650:	2300      	movs	r3, #0
   d5652:	6840      	ldr	r0, [r0, #4]
   d5654:	461a      	mov	r2, r3
   d5656:	4619      	mov	r1, r3
   d5658:	f7ff b848 	b.w	d46ec <network_on>

000d565c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d565c:	2300      	movs	r3, #0
   d565e:	6840      	ldr	r0, [r0, #4]
   d5660:	461a      	mov	r2, r3
   d5662:	4619      	mov	r1, r3
   d5664:	f7ff b84a 	b.w	d46fc <network_off>

000d5668 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5668:	6840      	ldr	r0, [r0, #4]
   d566a:	2200      	movs	r2, #0
   d566c:	f081 0101 	eor.w	r1, r1, #1
   d5670:	f7ff b84c 	b.w	d470c <network_listen>

000d5674 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5674:	6840      	ldr	r0, [r0, #4]
   d5676:	2200      	movs	r2, #0
   d5678:	f7ff b858 	b.w	d472c <network_set_listen_timeout>

000d567c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d567c:	2200      	movs	r2, #0
   d567e:	6840      	ldr	r0, [r0, #4]
   d5680:	4611      	mov	r1, r2
   d5682:	f7ff b85b 	b.w	d473c <network_get_listen_timeout>

000d5686 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5686:	2200      	movs	r2, #0
   d5688:	6840      	ldr	r0, [r0, #4]
   d568a:	4611      	mov	r1, r2
   d568c:	f7ff b846 	b.w	d471c <network_listening>

000d5690 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5690:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5694:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d5696:	b095      	sub	sp, #84	; 0x54
   d5698:	4616      	mov	r6, r2
   d569a:	460d      	mov	r5, r1
   d569c:	4607      	mov	r7, r0
    IPAddress addr;
   d569e:	f7ff fdfb 	bl	d5298 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d56a2:	4621      	mov	r1, r4
   d56a4:	2218      	movs	r2, #24
   d56a6:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d56a8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d56aa:	f000 fb71 	bl	d5d90 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d56ae:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d56b0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d56b4:	4621      	mov	r1, r4
   d56b6:	466b      	mov	r3, sp
   d56b8:	aa0c      	add	r2, sp, #48	; 0x30
   d56ba:	4630      	mov	r0, r6
   d56bc:	f7fe feaa 	bl	d4414 <netdb_getaddrinfo>
    if (!r) {
   d56c0:	4604      	mov	r4, r0
   d56c2:	2800      	cmp	r0, #0
   d56c4:	d146      	bne.n	d5754 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d56c6:	4602      	mov	r2, r0
   d56c8:	2101      	movs	r1, #1
   d56ca:	6868      	ldr	r0, [r5, #4]
   d56cc:	f7ff f806 	bl	d46dc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d56d0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d56d2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d56d4:	4622      	mov	r2, r4
   d56d6:	6868      	ldr	r0, [r5, #4]
   d56d8:	f7ff f800 	bl	d46dc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d56dc:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d56de:	4681      	mov	r9, r0
        bool ok = false;
   d56e0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d56e2:	2e00      	cmp	r6, #0
   d56e4:	d036      	beq.n	d5754 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d56e6:	2900      	cmp	r1, #0
   d56e8:	d134      	bne.n	d5754 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d56ea:	6873      	ldr	r3, [r6, #4]
   d56ec:	2b02      	cmp	r3, #2
   d56ee:	d003      	beq.n	d56f8 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d56f0:	2b0a      	cmp	r3, #10
   d56f2:	d00b      	beq.n	d570c <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d56f4:	69f6      	ldr	r6, [r6, #28]
   d56f6:	e7f4      	b.n	d56e2 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d56f8:	f1b8 0f00 	cmp.w	r8, #0
   d56fc:	d004      	beq.n	d5708 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d56fe:	6971      	ldr	r1, [r6, #20]
   d5700:	4638      	mov	r0, r7
   d5702:	3104      	adds	r1, #4
   d5704:	f7ff fdf5 	bl	d52f2 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d5708:	4641      	mov	r1, r8
   d570a:	e7f3      	b.n	d56f4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d570c:	f1b9 0f00 	cmp.w	r9, #0
   d5710:	d101      	bne.n	d5716 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d5712:	4649      	mov	r1, r9
   d5714:	e7ee      	b.n	d56f4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5716:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5718:	2210      	movs	r2, #16
   d571a:	a801      	add	r0, sp, #4
   d571c:	f000 fb38 	bl	d5d90 <memset>
                    a.v = 6;
   d5720:	2306      	movs	r3, #6
   d5722:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5726:	ad01      	add	r5, sp, #4
   d5728:	f104 0308 	add.w	r3, r4, #8
   d572c:	3418      	adds	r4, #24
   d572e:	6818      	ldr	r0, [r3, #0]
   d5730:	6859      	ldr	r1, [r3, #4]
   d5732:	462a      	mov	r2, r5
   d5734:	c203      	stmia	r2!, {r0, r1}
   d5736:	3308      	adds	r3, #8
   d5738:	42a3      	cmp	r3, r4
   d573a:	4615      	mov	r5, r2
   d573c:	d1f7      	bne.n	d572e <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d573e:	a901      	add	r1, sp, #4
   d5740:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d5742:	ad07      	add	r5, sp, #28
   d5744:	f7ff fdb6 	bl	d52b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5748:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d574a:	1d3c      	adds	r4, r7, #4
   d574c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d574e:	682b      	ldr	r3, [r5, #0]
   d5750:	7023      	strb	r3, [r4, #0]
   d5752:	e7de      	b.n	d5712 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5754:	9800      	ldr	r0, [sp, #0]
   d5756:	f7fe fe55 	bl	d4404 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d575a:	4638      	mov	r0, r7
   d575c:	b015      	add	sp, #84	; 0x54
   d575e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5764 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5764:	4b02      	ldr	r3, [pc, #8]	; (d5770 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5766:	4a03      	ldr	r2, [pc, #12]	; (d5774 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5768:	601a      	str	r2, [r3, #0]
   d576a:	2200      	movs	r2, #0
   d576c:	605a      	str	r2, [r3, #4]

} // spark
   d576e:	4770      	bx	lr
   d5770:	2003e7c0 	.word	0x2003e7c0
   d5774:	000d6048 	.word	0x000d6048

000d5778 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d5778:	f100 0310 	add.w	r3, r0, #16
   d577c:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d577e:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d5782:	2901      	cmp	r1, #1
   d5784:	4618      	mov	r0, r3
   d5786:	d108      	bne.n	d579a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d5788:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d578c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d5790:	3a01      	subs	r2, #1
   d5792:	f103 0310 	add.w	r3, r3, #16
   d5796:	d1f2      	bne.n	d577e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d5798:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d579a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d579c:	bf04      	itt	eq
   d579e:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d57a2:	1852      	addeq	r2, r2, r1
   d57a4:	e7f4      	b.n	d5790 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d57a6 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d57a6:	4770      	bx	lr

000d57a8 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d57a8:	2000      	movs	r0, #0
   d57aa:	4770      	bx	lr

000d57ac <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d57ac:	b510      	push	{r4, lr}
   d57ae:	2110      	movs	r1, #16
   d57b0:	4604      	mov	r4, r0
   d57b2:	f000 faae 	bl	d5d12 <_ZdlPvj>
   d57b6:	4620      	mov	r0, r4
   d57b8:	bd10      	pop	{r4, pc}

000d57ba <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d57ba:	b508      	push	{r3, lr}
      { delete this; }
   d57bc:	f7ff fff6 	bl	d57ac <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d57c0:	bd08      	pop	{r3, pc}

000d57c2 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d57c2:	b510      	push	{r4, lr}
      { delete _M_ptr; }
   d57c4:	68c4      	ldr	r4, [r0, #12]
   d57c6:	b17c      	cbz	r4, d57e8 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
            json(nullptr),
            freeJson(false) {
    }

    ~JSONData() {
        delete[] tokens;
   d57c8:	6820      	ldr	r0, [r4, #0]
   d57ca:	b108      	cbz	r0, d57d0 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0xe>
   d57cc:	f7fe fc67 	bl	d409e <_ZdaPv>
        if (freeJson) {
   d57d0:	7a23      	ldrb	r3, [r4, #8]
   d57d2:	b11b      	cbz	r3, d57dc <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
            delete[] json;
   d57d4:	6860      	ldr	r0, [r4, #4]
   d57d6:	b108      	cbz	r0, d57dc <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
   d57d8:	f7fe fc61 	bl	d409e <_ZdaPv>
   d57dc:	4620      	mov	r0, r4
   d57de:	210c      	movs	r1, #12
   d57e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d57e4:	f000 ba95 	b.w	d5d12 <_ZdlPvj>
   d57e8:	bd10      	pop	{r4, pc}

000d57ea <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d57ea:	b510      	push	{r4, lr}
          _M_dispose();
   d57ec:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d57ee:	4604      	mov	r4, r0
          _M_dispose();
   d57f0:	689b      	ldr	r3, [r3, #8]
   d57f2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d57f4:	68a3      	ldr	r3, [r4, #8]
   d57f6:	3b01      	subs	r3, #1
   d57f8:	60a3      	str	r3, [r4, #8]
   d57fa:	b92b      	cbnz	r3, d5808 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d57fc:	6823      	ldr	r3, [r4, #0]
   d57fe:	4620      	mov	r0, r4
   d5800:	68db      	ldr	r3, [r3, #12]
    }
   d5802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d5806:	4718      	bx	r3
    }
   d5808:	bd10      	pop	{r4, pc}

000d580a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d580a:	b538      	push	{r3, r4, r5, lr}
   d580c:	680b      	ldr	r3, [r1, #0]
   d580e:	6003      	str	r3, [r0, #0]
   d5810:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d5812:	6843      	ldr	r3, [r0, #4]
   d5814:	429d      	cmp	r5, r3
    class __shared_ptr
   d5816:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d5818:	d00c      	beq.n	d5834 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d581a:	b115      	cbz	r5, d5822 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d581c:	686b      	ldr	r3, [r5, #4]
   d581e:	3301      	adds	r3, #1
   d5820:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d5822:	6860      	ldr	r0, [r4, #4]
   d5824:	b128      	cbz	r0, d5832 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d5826:	6843      	ldr	r3, [r0, #4]
   d5828:	3b01      	subs	r3, #1
   d582a:	6043      	str	r3, [r0, #4]
   d582c:	b90b      	cbnz	r3, d5832 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d582e:	f7ff ffdc 	bl	d57ea <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d5832:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d5834:	4620      	mov	r0, r4
   d5836:	bd38      	pop	{r3, r4, r5, pc}

000d5838 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d5838:	460b      	mov	r3, r1
   d583a:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d583c:	2200      	movs	r2, #0
   d583e:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d5840:	e9c0 2200 	strd	r2, r2, [r0]
   d5844:	4604      	mov	r4, r0
        JSONValue() {
    if (t) {
        t_ = t;
   d5846:	6083      	str	r3, [r0, #8]
    if (t) {
   d5848:	b90b      	cbnz	r3, d584e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
        d_ = d;
    }
}
   d584a:	4620      	mov	r0, r4
   d584c:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d584e:	f7ff ffdc 	bl	d580a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d5852:	e7fa      	b.n	d584a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d5854 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>:
        return JSONValue();
    }
    return JSONValue(d->tokens, d);
}

bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d5854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5858:	b086      	sub	sp, #24
   d585a:	4607      	mov	r7, r0
   d585c:	4688      	mov	r8, r1
    jsmn_parser parser;
    parser.size = sizeof(jsmn_parser);
    jsmn_init(&parser, nullptr);
   d585e:	a802      	add	r0, sp, #8
   d5860:	2100      	movs	r1, #0
    const int n = jsmn_parse(&parser, json, size, nullptr, 0, nullptr); // Get number of tokens
   d5862:	2400      	movs	r4, #0
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d5864:	4699      	mov	r9, r3
    parser.size = sizeof(jsmn_parser);
   d5866:	2310      	movs	r3, #16
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d5868:	4692      	mov	sl, r2
    parser.size = sizeof(jsmn_parser);
   d586a:	9302      	str	r3, [sp, #8]
    jsmn_init(&parser, nullptr);
   d586c:	f7fe fee2 	bl	d4634 <jsmn_init>
    const int n = jsmn_parse(&parser, json, size, nullptr, 0, nullptr); // Get number of tokens
   d5870:	e9cd 4400 	strd	r4, r4, [sp]
   d5874:	4623      	mov	r3, r4
   d5876:	4642      	mov	r2, r8
   d5878:	4639      	mov	r1, r7
   d587a:	a802      	add	r0, sp, #8
   d587c:	f7fe fee2 	bl	d4644 <jsmn_parse>
    if (n <= 0) {
   d5880:	1e06      	subs	r6, r0, #0
   d5882:	dd1e      	ble.n	d58c2 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x6e>
        return false; // Parsing error
    }
    std::unique_ptr<jsmntok_t[]> t(new(std::nothrow) jsmntok_t[n]);
   d5884:	4910      	ldr	r1, [pc, #64]	; (d58c8 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x74>)
   d5886:	0130      	lsls	r0, r6, #4
   d5888:	f000 fa47 	bl	d5d1a <_ZnajRKSt9nothrow_t>
    if (!t) {
   d588c:	4605      	mov	r5, r0
   d588e:	b190      	cbz	r0, d58b6 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x62>
        return false;
    }
    jsmn_init(&parser, nullptr); // Reset parser
   d5890:	4621      	mov	r1, r4
   d5892:	a802      	add	r0, sp, #8
   d5894:	f7fe fece 	bl	d4634 <jsmn_init>
    if (jsmn_parse(&parser, json, size, t.get(), n, nullptr) <= 0) {
   d5898:	e9cd 6400 	strd	r6, r4, [sp]
   d589c:	462b      	mov	r3, r5
   d589e:	4642      	mov	r2, r8
   d58a0:	4639      	mov	r1, r7
   d58a2:	a802      	add	r0, sp, #8
   d58a4:	f7fe fece 	bl	d4644 <jsmn_parse>
   d58a8:	42a0      	cmp	r0, r4
   d58aa:	dd07      	ble.n	d58bc <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x68>
        return false;
    }
    *tokens = t.release();
   d58ac:	f8ca 5000 	str.w	r5, [sl]
    *count = n;
    return true;
   d58b0:	2001      	movs	r0, #1
    *count = n;
   d58b2:	f8c9 6000 	str.w	r6, [r9]
}
   d58b6:	b006      	add	sp, #24
   d58b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      typename enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type
	operator()(_Up* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d58bc:	4628      	mov	r0, r5
   d58be:	f7fe fbee 	bl	d409e <_ZdaPv>
      }
   d58c2:	4620      	mov	r0, r4
   d58c4:	e7f7      	b.n	d58b6 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x62>
   d58c6:	bf00      	nop
   d58c8:	000d6090 	.word	0x000d6090

000d58cc <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>:
        ++t;
    }
    return true;
}

bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d58cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *str = json + t->start; // Destination string
   d58d0:	6843      	ldr	r3, [r0, #4]
    const char* const end = json + t->end; // End of the source string
   d58d2:	6886      	ldr	r6, [r0, #8]
    char *str = json + t->start; // Destination string
   d58d4:	440b      	add	r3, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d58d6:	4688      	mov	r8, r1
    const char* const end = json + t->end; // End of the source string
   d58d8:	440e      	add	r6, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d58da:	4607      	mov	r7, r0
    const char *s1 = str; // Beginning of an unescaped sequence
    const char *s = s1;
   d58dc:	461c      	mov	r4, r3
    const char *s1 = str; // Beginning of an unescaped sequence
   d58de:	4619      	mov	r1, r3
                    break;
                case 'f': // Form feed
                    *str = 0x0c;
                    break;
                case 'r': // Carriage return
                    *str = 0x0d;
   d58e0:	f04f 090d 	mov.w	r9, #13
                    *str = 0x09;
   d58e4:	f04f 0a09 	mov.w	sl, #9
    while (s != end) {
   d58e8:	42b4      	cmp	r4, r6
   d58ea:	d063      	beq.n	d59b4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe8>
        if (*s == '\\') {
   d58ec:	4625      	mov	r5, r4
   d58ee:	f815 2b01 	ldrb.w	r2, [r5], #1
   d58f2:	2a5c      	cmp	r2, #92	; 0x5c
   d58f4:	d12b      	bne.n	d594e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x82>
            if (s != s1) {
   d58f6:	42a1      	cmp	r1, r4
   d58f8:	d007      	beq.n	d590a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x3e>
                const size_t n = s - s1;
   d58fa:	eba4 0b01 	sub.w	fp, r4, r1
                memmove(str, s1, n); // Shift preceeding characters
   d58fe:	4618      	mov	r0, r3
   d5900:	465a      	mov	r2, fp
   d5902:	f000 fa2b 	bl	d5d5c <memmove>
   d5906:	4603      	mov	r3, r0
                str += n;
   d5908:	445b      	add	r3, fp
            if (s == end) {
   d590a:	42b5      	cmp	r5, r6
   d590c:	d039      	beq.n	d5982 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            if (*s == 'u') { // Arbitrary character, e.g. "\u001f"
   d590e:	7862      	ldrb	r2, [r4, #1]
   d5910:	2a75      	cmp	r2, #117	; 0x75
   d5912:	d12a      	bne.n	d596a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x9e>
                ++s;
   d5914:	1ca2      	adds	r2, r4, #2
                if (end - s < 4) {
   d5916:	1ab2      	subs	r2, r6, r2
   d5918:	2a03      	cmp	r2, #3
   d591a:	dd32      	ble.n	d5982 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
    const char* const end = s + size;
   d591c:	1da0      	adds	r0, r4, #6
   d591e:	f104 0e05 	add.w	lr, r4, #5
    uint32_t v = 0;
   d5922:	f04f 0c00 	mov.w	ip, #0
    while (s != end) {
   d5926:	45ae      	cmp	lr, r5
   d5928:	d053      	beq.n	d59d2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x106>
        const char c = *s;
   d592a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
        if (c >= '0' && c <= '9') {
   d592e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   d5932:	fa5f fb82 	uxtb.w	fp, r2
   d5936:	f1bb 0f09 	cmp.w	fp, #9
   d593a:	d905      	bls.n	d5948 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
        } else if (c >= 'a' && c <= 'f') {
   d593c:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   d5940:	2a05      	cmp	r2, #5
   d5942:	d807      	bhi.n	d5954 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x88>
            n = c - 'a' + 10;
   d5944:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
        v = (v << 4) | n;
   d5948:	ea42 1c0c 	orr.w	ip, r2, ip, lsl #4
    while (s != end) {
   d594c:	e7eb      	b.n	d5926 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x5a>
   d594e:	4628      	mov	r0, r5
   d5950:	4604      	mov	r4, r0
   d5952:	e7c9      	b.n	d58e8 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x1c>
        } else if (c >= 'A' && c <= 'F') {
   d5954:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   d5958:	2a05      	cmp	r2, #5
   d595a:	d812      	bhi.n	d5982 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            n = c - 'A' + 10;
   d595c:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   d5960:	e7f2      	b.n	d5948 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
                    *str = u;
   d5962:	f803 cb01 	strb.w	ip, [r3], #1
                    s1 += 6; // Skip escaped sequence
   d5966:	4601      	mov	r1, r0
   d5968:	e7f2      	b.n	d5950 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                switch (*s) {
   d596a:	2a6e      	cmp	r2, #110	; 0x6e
   d596c:	d01c      	beq.n	d59a8 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xdc>
   d596e:	d80e      	bhi.n	d598e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xc2>
   d5970:	2a62      	cmp	r2, #98	; 0x62
   d5972:	d013      	beq.n	d599c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd0>
   d5974:	d807      	bhi.n	d5986 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xba>
   d5976:	2a2f      	cmp	r2, #47	; 0x2f
   d5978:	d011      	beq.n	d599e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   d597a:	2a5c      	cmp	r2, #92	; 0x5c
   d597c:	d00f      	beq.n	d599e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   d597e:	2a22      	cmp	r2, #34	; 0x22
   d5980:	d00d      	beq.n	d599e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                return false; // Unexpected end of string
   d5982:	2000      	movs	r0, #0
   d5984:	e023      	b.n	d59ce <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x102>
                switch (*s) {
   d5986:	2a66      	cmp	r2, #102	; 0x66
   d5988:	d1fb      	bne.n	d5982 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x0c;
   d598a:	220c      	movs	r2, #12
   d598c:	e007      	b.n	d599e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                switch (*s) {
   d598e:	2a72      	cmp	r2, #114	; 0x72
   d5990:	d00d      	beq.n	d59ae <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe2>
   d5992:	2a74      	cmp	r2, #116	; 0x74
   d5994:	d1f5      	bne.n	d5982 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x09;
   d5996:	f883 a000 	strb.w	sl, [r3]
                    break;
   d599a:	e001      	b.n	d59a0 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
                    *str = 0x08;
   d599c:	2208      	movs	r2, #8
   d599e:	701a      	strb	r2, [r3, #0]
                    break;
                default:
                    return false; // Invalid escaped sequence
                }
                ++str;
                ++s;
   d59a0:	1ca1      	adds	r1, r4, #2
                ++str;
   d59a2:	3301      	adds	r3, #1
                ++s;
   d59a4:	4608      	mov	r0, r1
   d59a6:	e7d3      	b.n	d5950 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                    *str = 0x0a;
   d59a8:	f04f 020a 	mov.w	r2, #10
   d59ac:	e7f7      	b.n	d599e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                    *str = 0x0d;
   d59ae:	f883 9000 	strb.w	r9, [r3]
                    break;
   d59b2:	e7f5      	b.n	d59a0 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
            }
        } else {
            ++s;
        }
    }
    if (s != s1) {
   d59b4:	42a1      	cmp	r1, r4
   d59b6:	d006      	beq.n	d59c6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xfa>
        const size_t n = s - s1;
   d59b8:	1a64      	subs	r4, r4, r1
        memmove(str, s1, n); // Shift remaining characters
   d59ba:	4618      	mov	r0, r3
   d59bc:	4622      	mov	r2, r4
   d59be:	f000 f9cd 	bl	d5d5c <memmove>
   d59c2:	4603      	mov	r3, r0
        str += n;
   d59c4:	4423      	add	r3, r4
    }
    t->end = str - json; // Update string length
   d59c6:	eba3 0308 	sub.w	r3, r3, r8
   d59ca:	60bb      	str	r3, [r7, #8]
    return true;
   d59cc:	2001      	movs	r0, #1
}
   d59ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (u <= 0x7f) { // Processing only code points within the basic latin block
   d59d2:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   d59d6:	d9c4      	bls.n	d5962 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x96>
   d59d8:	4621      	mov	r1, r4
   d59da:	e7b9      	b.n	d5950 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>

000d59dc <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>:
bool spark::JSONValue::stringize(jsmntok_t *t, size_t count, char *json) {
   d59dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d59de:	4604      	mov	r4, r0
   d59e0:	4615      	mov	r5, r2
    const jsmntok_t* const end = t + count;
   d59e2:	eb00 1601 	add.w	r6, r0, r1, lsl #4
            json[t->end] = '\0';
   d59e6:	2700      	movs	r7, #0
    while (t != end) {
   d59e8:	42b4      	cmp	r4, r6
   d59ea:	d010      	beq.n	d5a0e <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x32>
        if (t->type == JSMN_STRING) {
   d59ec:	7823      	ldrb	r3, [r4, #0]
   d59ee:	2b03      	cmp	r3, #3
   d59f0:	d108      	bne.n	d5a04 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x28>
            if (!unescape(t, json)) {
   d59f2:	4629      	mov	r1, r5
   d59f4:	4620      	mov	r0, r4
   d59f6:	f7ff ff69 	bl	d58cc <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>
   d59fa:	b148      	cbz	r0, d5a10 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x34>
            json[t->end] = '\0';
   d59fc:	68a3      	ldr	r3, [r4, #8]
   d59fe:	54ef      	strb	r7, [r5, r3]
        ++t;
   d5a00:	3410      	adds	r4, #16
    while (t != end) {
   d5a02:	e7f1      	b.n	d59e8 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0xc>
        } else if (t->type == JSMN_PRIMITIVE) {
   d5a04:	2b00      	cmp	r3, #0
   d5a06:	d1fb      	bne.n	d5a00 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
            json[t->end] = '\0';
   d5a08:	68a2      	ldr	r2, [r4, #8]
   d5a0a:	54ab      	strb	r3, [r5, r2]
   d5a0c:	e7f8      	b.n	d5a00 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
    return true;
   d5a0e:	2001      	movs	r0, #1
}
   d5a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d5a14 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d5a14:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d5a16:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d5a18:	e9c0 3300 	strd	r3, r3, [r0]
   d5a1c:	4604      	mov	r4, r0
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d5a1e:	480e      	ldr	r0, [pc, #56]	; (d5a58 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d5a20:	e9c4 0302 	strd	r0, r3, [r4, #8]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d5a24:	b1a9      	cbz	r1, d5a52 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d5a26:	780b      	ldrb	r3, [r1, #0]
   d5a28:	2b03      	cmp	r3, #3
   d5a2a:	d006      	beq.n	d5a3a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d5a2c:	b98b      	cbnz	r3, d5a52 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d5a2e:	6813      	ldr	r3, [r2, #0]
   d5a30:	6858      	ldr	r0, [r3, #4]
   d5a32:	684b      	ldr	r3, [r1, #4]
   d5a34:	5cc3      	ldrb	r3, [r0, r3]
   d5a36:	2b6e      	cmp	r3, #110	; 0x6e
   d5a38:	d007      	beq.n	d5a4a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d5a3a:	6813      	ldr	r3, [r2, #0]
   d5a3c:	684d      	ldr	r5, [r1, #4]
   d5a3e:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d5a40:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d5a42:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d5a44:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d5a46:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d5a48:	60e3      	str	r3, [r4, #12]
   d5a4a:	4611      	mov	r1, r2
   d5a4c:	4620      	mov	r0, r4
   d5a4e:	f7ff fedc 	bl	d580a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
        }
        d_ = d;
    }
}
   d5a52:	4620      	mov	r0, r4
   d5a54:	bd38      	pop	{r3, r4, r5, pc}
   d5a56:	bf00      	nop
   d5a58:	000d5eee 	.word	0x000d5eee

000d5a5c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d5a5c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d5a5e:	2500      	movs	r5, #0
   d5a60:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d5a62:	e9c0 5500 	strd	r5, r5, [r0]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d5a66:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d5a6a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d5a6e:	4604      	mov	r4, r0
   d5a70:	4611      	mov	r1, r2
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d5a72:	b14b      	cbz	r3, d5a88 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d5a74:	781a      	ldrb	r2, [r3, #0]
   d5a76:	2a01      	cmp	r2, #1
   d5a78:	d106      	bne.n	d5a88 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d5a7a:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d5a7e:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d5a80:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d5a82:	6143      	str	r3, [r0, #20]
   d5a84:	f7ff fec1 	bl	d580a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
        d_ = d;
    }
}
   d5a88:	4620      	mov	r0, r4
   d5a8a:	bd38      	pop	{r3, r4, r5, pc}

000d5a8c <_ZN5spark18JSONObjectIterator4nextEv>:

bool spark::JSONObjectIterator::next() {
   d5a8c:	b510      	push	{r4, lr}
    if (!n_) {
   d5a8e:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d5a90:	4604      	mov	r4, r0
    if (!n_) {
   d5a92:	b163      	cbz	r3, d5aae <_ZN5spark18JSONObjectIterator4nextEv+0x22>
        return false;
    }
    k_ = t_; // Name
   d5a94:	6880      	ldr	r0, [r0, #8]
   d5a96:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d5a98:	3b01      	subs	r3, #1
    ++t_;
   d5a9a:	3010      	adds	r0, #16
   d5a9c:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d5a9e:	6120      	str	r0, [r4, #16]
    --n_;
   d5aa0:	6163      	str	r3, [r4, #20]
    if (n_) {
   d5aa2:	b113      	cbz	r3, d5aaa <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d5aa4:	f7ff fe68 	bl	d5778 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d5aa8:	60a0      	str	r0, [r4, #8]
    }
    return true;
   d5aaa:	2001      	movs	r0, #1
   d5aac:	e000      	b.n	d5ab0 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d5aae:	4618      	mov	r0, r3
}
   d5ab0:	bd10      	pop	{r4, pc}
	...

000d5ab4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d5ab4:	b538      	push	{r3, r4, r5, lr}
   d5ab6:	2300      	movs	r3, #0
   d5ab8:	4604      	mov	r4, r0
   d5aba:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5abc:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d5abe:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5ac0:	f7fe fae7 	bl	d4092 <_Znwj>
   d5ac4:	b128      	cbz	r0, d5ad2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d5ac6:	2301      	movs	r3, #1
   d5ac8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d5acc:	4b02      	ldr	r3, [pc, #8]	; (d5ad8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x24>)
   d5ace:	6003      	str	r3, [r0, #0]
   d5ad0:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5ad2:	6020      	str	r0, [r4, #0]
	}
   d5ad4:	4620      	mov	r0, r4
   d5ad6:	bd38      	pop	{r3, r4, r5, pc}
   d5ad8:	000d607c 	.word	0x000d607c

000d5adc <_ZN5spark9JSONValue9parseCopyEPKcj>:
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   d5adc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5ade:	4604      	mov	r4, r0
   d5ae0:	b087      	sub	sp, #28
   d5ae2:	460e      	mov	r6, r1
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   d5ae4:	200c      	movs	r0, #12
   d5ae6:	4927      	ldr	r1, [pc, #156]	; (d5b84 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   d5ae8:	4615      	mov	r5, r2
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   d5aea:	f000 f914 	bl	d5d16 <_ZnwjRKSt9nothrow_t>
   d5aee:	4601      	mov	r1, r0
   d5af0:	b118      	cbz	r0, d5afa <_ZN5spark9JSONValue9parseCopyEPKcj+0x1e>
            freeJson(false) {
   d5af2:	2300      	movs	r3, #0
   d5af4:	e9c0 3300 	strd	r3, r3, [r0]
   d5af8:	7203      	strb	r3, [r0, #8]
	: __shared_count(__p)
   d5afa:	a803      	add	r0, sp, #12
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5afc:	9102      	str	r1, [sp, #8]
	: __shared_count(__p)
   d5afe:	f7ff ffd9 	bl	d5ab4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>
    if (!d) {
   d5b02:	9a02      	ldr	r2, [sp, #8]
   d5b04:	b942      	cbnz	r2, d5b18 <_ZN5spark9JSONValue9parseCopyEPKcj+0x3c>
      constexpr __shared_count() noexcept : _M_pi(0)
   d5b06:	e9c4 2200 	strd	r2, r2, [r4]
        t_(nullptr) {
   d5b0a:	60a2      	str	r2, [r4, #8]
      ~__shared_ptr() = default;
   d5b0c:	a803      	add	r0, sp, #12
   d5b0e:	f7fe fb39 	bl	d4184 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5b12:	4620      	mov	r0, r4
   d5b14:	b007      	add	sp, #28
   d5b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    size_t tokenCount = 0;
   d5b18:	2300      	movs	r3, #0
   d5b1a:	9301      	str	r3, [sp, #4]
    if (!tokenize(json, size, &d->tokens, &tokenCount)) {
   d5b1c:	4629      	mov	r1, r5
   d5b1e:	ab01      	add	r3, sp, #4
   d5b20:	4630      	mov	r0, r6
   d5b22:	f7ff fe97 	bl	d5854 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>
   d5b26:	b918      	cbnz	r0, d5b30 <_ZN5spark9JSONValue9parseCopyEPKcj+0x54>
      constexpr __shared_count() noexcept : _M_pi(0)
   d5b28:	e9c4 0000 	strd	r0, r0, [r4]
   d5b2c:	60a0      	str	r0, [r4, #8]
}
   d5b2e:	e7ed      	b.n	d5b0c <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
    d->json = new(std::nothrow) char[size + 1];
   d5b30:	4914      	ldr	r1, [pc, #80]	; (d5b84 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5b32:	9f02      	ldr	r7, [sp, #8]
   d5b34:	1c68      	adds	r0, r5, #1
   d5b36:	f000 f8f0 	bl	d5d1a <_ZnajRKSt9nothrow_t>
    if (!d->json) {
   d5b3a:	9b02      	ldr	r3, [sp, #8]
    d->json = new(std::nothrow) char[size + 1];
   d5b3c:	6078      	str	r0, [r7, #4]
    if (!d->json) {
   d5b3e:	6858      	ldr	r0, [r3, #4]
   d5b40:	2800      	cmp	r0, #0
   d5b42:	d0f1      	beq.n	d5b28 <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
    memcpy(d->json, json, size); // TODO: Copy only token data
   d5b44:	462a      	mov	r2, r5
   d5b46:	4631      	mov	r1, r6
   d5b48:	f000 f8fa 	bl	d5d40 <memcpy>
   d5b4c:	9b02      	ldr	r3, [sp, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   d5b4e:	9901      	ldr	r1, [sp, #4]
   d5b50:	6818      	ldr	r0, [r3, #0]
    d->freeJson = true;
   d5b52:	2201      	movs	r2, #1
   d5b54:	721a      	strb	r2, [r3, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   d5b56:	685a      	ldr	r2, [r3, #4]
   d5b58:	f7ff ff40 	bl	d59dc <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>
   d5b5c:	2800      	cmp	r0, #0
   d5b5e:	d0e3      	beq.n	d5b28 <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
   d5b60:	9b02      	ldr	r3, [sp, #8]
    return JSONValue(d->tokens, d);
   d5b62:	6819      	ldr	r1, [r3, #0]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5b64:	9304      	str	r3, [sp, #16]
      : _M_pi(__r._M_pi)
   d5b66:	9b03      	ldr	r3, [sp, #12]
   d5b68:	9305      	str	r3, [sp, #20]
	if (_M_pi != 0)
   d5b6a:	b113      	cbz	r3, d5b72 <_ZN5spark9JSONValue9parseCopyEPKcj+0x96>
    { ++_M_use_count; }
   d5b6c:	685a      	ldr	r2, [r3, #4]
   d5b6e:	3201      	adds	r2, #1
   d5b70:	605a      	str	r2, [r3, #4]
   d5b72:	aa04      	add	r2, sp, #16
   d5b74:	4620      	mov	r0, r4
   d5b76:	f7ff fe5f 	bl	d5838 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d5b7a:	a805      	add	r0, sp, #20
   d5b7c:	f7fe fb02 	bl	d4184 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5b80:	e7c4      	b.n	d5b0c <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
   d5b82:	bf00      	nop
   d5b84:	000d6090 	.word	0x000d6090

000d5b88 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d5b88:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d5b8a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d5b8c:	d902      	bls.n	d5b94 <pinAvailable+0xc>
    return false;
   d5b8e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d5b90:	b002      	add	sp, #8
   d5b92:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d5b94:	f1a0 030b 	sub.w	r3, r0, #11
   d5b98:	2b02      	cmp	r3, #2
   d5b9a:	d81a      	bhi.n	d5bd2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5b9c:	4c17      	ldr	r4, [pc, #92]	; (d5bfc <pinAvailable+0x74>)
   d5b9e:	7821      	ldrb	r1, [r4, #0]
   d5ba0:	f3bf 8f5b 	dmb	ish
   d5ba4:	f011 0101 	ands.w	r1, r1, #1
   d5ba8:	d10b      	bne.n	d5bc2 <pinAvailable+0x3a>
   d5baa:	4620      	mov	r0, r4
   d5bac:	9101      	str	r1, [sp, #4]
   d5bae:	f7fe fa78 	bl	d40a2 <__cxa_guard_acquire>
   d5bb2:	9901      	ldr	r1, [sp, #4]
   d5bb4:	b128      	cbz	r0, d5bc2 <pinAvailable+0x3a>
   d5bb6:	4812      	ldr	r0, [pc, #72]	; (d5c00 <pinAvailable+0x78>)
   d5bb8:	f7fe fe5e 	bl	d4878 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5bbc:	4620      	mov	r0, r4
   d5bbe:	f7fe fa75 	bl	d40ac <__cxa_guard_release>
   d5bc2:	4b0f      	ldr	r3, [pc, #60]	; (d5c00 <pinAvailable+0x78>)
   d5bc4:	7818      	ldrb	r0, [r3, #0]
   d5bc6:	f7fe fcfd 	bl	d45c4 <hal_spi_is_enabled>
   d5bca:	2800      	cmp	r0, #0
   d5bcc:	d1df      	bne.n	d5b8e <pinAvailable+0x6>
  return true; // 'pin' is available
   d5bce:	2001      	movs	r0, #1
   d5bd0:	e7de      	b.n	d5b90 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d5bd2:	2801      	cmp	r0, #1
   d5bd4:	d809      	bhi.n	d5bea <pinAvailable+0x62>
   d5bd6:	f000 f86f 	bl	d5cb8 <_Z19__fetch_global_Wirev>
   d5bda:	2100      	movs	r1, #0
   d5bdc:	7c00      	ldrb	r0, [r0, #16]
   d5bde:	f7fe fcd9 	bl	d4594 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d5be2:	f080 0001 	eor.w	r0, r0, #1
   d5be6:	b2c0      	uxtb	r0, r0
   d5be8:	e7d2      	b.n	d5b90 <pinAvailable+0x8>
   d5bea:	3809      	subs	r0, #9
   d5bec:	2801      	cmp	r0, #1
   d5bee:	d8ee      	bhi.n	d5bce <pinAvailable+0x46>
   d5bf0:	f7ff fc60 	bl	d54b4 <_Z22__fetch_global_Serial1v>
   d5bf4:	7c00      	ldrb	r0, [r0, #16]
   d5bf6:	f7fe fc95 	bl	d4524 <hal_usart_is_enabled>
   d5bfa:	e7f2      	b.n	d5be2 <pinAvailable+0x5a>
   d5bfc:	2003e7c8 	.word	0x2003e7c8
   d5c00:	2003e7cc 	.word	0x2003e7cc

000d5c04 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5c04:	2823      	cmp	r0, #35	; 0x23
{
   d5c06:	b538      	push	{r3, r4, r5, lr}
   d5c08:	4604      	mov	r4, r0
   d5c0a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5c0c:	d80a      	bhi.n	d5c24 <pinMode+0x20>
   d5c0e:	29ff      	cmp	r1, #255	; 0xff
   d5c10:	d008      	beq.n	d5c24 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d5c12:	f7ff ffb9 	bl	d5b88 <pinAvailable>
   d5c16:	b128      	cbz	r0, d5c24 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d5c18:	4629      	mov	r1, r5
   d5c1a:	4620      	mov	r0, r4
}
   d5c1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d5c20:	f7fe bc08 	b.w	d4434 <HAL_Pin_Mode>
}
   d5c24:	bd38      	pop	{r3, r4, r5, pc}

000d5c26 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5c26:	b538      	push	{r3, r4, r5, lr}
   d5c28:	4604      	mov	r4, r0
   d5c2a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5c2c:	f7fe fc0a 	bl	d4444 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5c30:	28ff      	cmp	r0, #255	; 0xff
   d5c32:	d010      	beq.n	d5c56 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d5c34:	2806      	cmp	r0, #6
   d5c36:	d804      	bhi.n	d5c42 <digitalWrite+0x1c>
   d5c38:	234d      	movs	r3, #77	; 0x4d
   d5c3a:	fa23 f000 	lsr.w	r0, r3, r0
   d5c3e:	07c3      	lsls	r3, r0, #31
   d5c40:	d409      	bmi.n	d5c56 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5c42:	4620      	mov	r0, r4
   d5c44:	f7ff ffa0 	bl	d5b88 <pinAvailable>
   d5c48:	b128      	cbz	r0, d5c56 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5c4a:	4629      	mov	r1, r5
   d5c4c:	4620      	mov	r0, r4
}
   d5c4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d5c52:	f7fe bbff 	b.w	d4454 <HAL_GPIO_Write>
}
   d5c56:	bd38      	pop	{r3, r4, r5, pc}

000d5c58 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d5c58:	280d      	cmp	r0, #13
{
   d5c5a:	b510      	push	{r4, lr}
   d5c5c:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d5c5e:	bf9c      	itt	ls
   d5c60:	340e      	addls	r4, #14
   d5c62:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5c64:	4620      	mov	r0, r4
   d5c66:	f7ff ff8f 	bl	d5b88 <pinAvailable>
   d5c6a:	b150      	cbz	r0, d5c82 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d5c6c:	2103      	movs	r1, #3
   d5c6e:	4620      	mov	r0, r4
   d5c70:	f7fe fbd8 	bl	d4424 <HAL_Validate_Pin_Function>
   d5c74:	2803      	cmp	r0, #3
   d5c76:	d104      	bne.n	d5c82 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d5c78:	4620      	mov	r0, r4
}
   d5c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d5c7e:	f7fe bbf1 	b.w	d4464 <hal_adc_read>
}
   d5c82:	2000      	movs	r0, #0
   d5c84:	bd10      	pop	{r4, pc}
	...

000d5c88 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d5c88:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d5c8a:	2300      	movs	r3, #0
   d5c8c:	2520      	movs	r5, #32
   d5c8e:	8043      	strh	r3, [r0, #2]
   d5c90:	2314      	movs	r3, #20
{
   d5c92:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d5c94:	8003      	strh	r3, [r0, #0]
   d5c96:	6085      	str	r5, [r0, #8]
   d5c98:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5c9a:	4906      	ldr	r1, [pc, #24]	; (d5cb4 <_Z17acquireWireBufferv+0x2c>)
   d5c9c:	4628      	mov	r0, r5
   d5c9e:	f000 f83c 	bl	d5d1a <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5ca2:	4904      	ldr	r1, [pc, #16]	; (d5cb4 <_Z17acquireWireBufferv+0x2c>)
	};
   d5ca4:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5ca6:	4628      	mov	r0, r5
   d5ca8:	f000 f837 	bl	d5d1a <_ZnajRKSt9nothrow_t>
	};
   d5cac:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d5cae:	4620      	mov	r0, r4
   d5cb0:	bd38      	pop	{r3, r4, r5, pc}
   d5cb2:	bf00      	nop
   d5cb4:	000d6090 	.word	0x000d6090

000d5cb8 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5cb8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5cba:	4d0f      	ldr	r5, [pc, #60]	; (d5cf8 <_Z19__fetch_global_Wirev+0x40>)
   d5cbc:	7829      	ldrb	r1, [r5, #0]
   d5cbe:	f3bf 8f5b 	dmb	ish
   d5cc2:	f011 0401 	ands.w	r4, r1, #1
{
   d5cc6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5cc8:	d113      	bne.n	d5cf2 <_Z19__fetch_global_Wirev+0x3a>
   d5cca:	4628      	mov	r0, r5
   d5ccc:	f7fe f9e9 	bl	d40a2 <__cxa_guard_acquire>
   d5cd0:	b178      	cbz	r0, d5cf2 <_Z19__fetch_global_Wirev+0x3a>
   d5cd2:	a801      	add	r0, sp, #4
   d5cd4:	f7ff ffd8 	bl	d5c88 <_Z17acquireWireBufferv>
   d5cd8:	aa01      	add	r2, sp, #4
   d5cda:	4621      	mov	r1, r4
   d5cdc:	4807      	ldr	r0, [pc, #28]	; (d5cfc <_Z19__fetch_global_Wirev+0x44>)
   d5cde:	f7ff fc53 	bl	d5588 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d5ce2:	4628      	mov	r0, r5
   d5ce4:	f7fe f9e2 	bl	d40ac <__cxa_guard_release>
   d5ce8:	4a05      	ldr	r2, [pc, #20]	; (d5d00 <_Z19__fetch_global_Wirev+0x48>)
   d5cea:	4906      	ldr	r1, [pc, #24]	; (d5d04 <_Z19__fetch_global_Wirev+0x4c>)
   d5cec:	4803      	ldr	r0, [pc, #12]	; (d5cfc <_Z19__fetch_global_Wirev+0x44>)
   d5cee:	f000 f80b 	bl	d5d08 <__aeabi_atexit>
	return wire;
}
   d5cf2:	4802      	ldr	r0, [pc, #8]	; (d5cfc <_Z19__fetch_global_Wirev+0x44>)
   d5cf4:	b007      	add	sp, #28
   d5cf6:	bd30      	pop	{r4, r5, pc}
   d5cf8:	2003e7d8 	.word	0x2003e7d8
   d5cfc:	2003e7dc 	.word	0x2003e7dc
   d5d00:	2003e638 	.word	0x2003e638
   d5d04:	000d5531 	.word	0x000d5531

000d5d08 <__aeabi_atexit>:
   d5d08:	460b      	mov	r3, r1
   d5d0a:	4601      	mov	r1, r0
   d5d0c:	4618      	mov	r0, r3
   d5d0e:	f000 b809 	b.w	d5d24 <__cxa_atexit>

000d5d12 <_ZdlPvj>:
   d5d12:	f7fe b9c2 	b.w	d409a <_ZdlPv>

000d5d16 <_ZnwjRKSt9nothrow_t>:
   d5d16:	f7fe b9bc 	b.w	d4092 <_Znwj>

000d5d1a <_ZnajRKSt9nothrow_t>:
   d5d1a:	f7fe b9bc 	b.w	d4096 <_Znaj>

000d5d1e <_ZSt25__throw_bad_function_callv>:
   d5d1e:	b508      	push	{r3, lr}
   d5d20:	f7fe fd54 	bl	d47cc <abort>

000d5d24 <__cxa_atexit>:
   d5d24:	b510      	push	{r4, lr}
   d5d26:	4c05      	ldr	r4, [pc, #20]	; (d5d3c <__cxa_atexit+0x18>)
   d5d28:	4613      	mov	r3, r2
   d5d2a:	b12c      	cbz	r4, d5d38 <__cxa_atexit+0x14>
   d5d2c:	460a      	mov	r2, r1
   d5d2e:	4601      	mov	r1, r0
   d5d30:	2002      	movs	r0, #2
   d5d32:	f3af 8000 	nop.w
   d5d36:	bd10      	pop	{r4, pc}
   d5d38:	4620      	mov	r0, r4
   d5d3a:	e7fc      	b.n	d5d36 <__cxa_atexit+0x12>
   d5d3c:	00000000 	.word	0x00000000

000d5d40 <memcpy>:
   d5d40:	440a      	add	r2, r1
   d5d42:	4291      	cmp	r1, r2
   d5d44:	f100 33ff 	add.w	r3, r0, #4294967295
   d5d48:	d100      	bne.n	d5d4c <memcpy+0xc>
   d5d4a:	4770      	bx	lr
   d5d4c:	b510      	push	{r4, lr}
   d5d4e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5d52:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5d56:	4291      	cmp	r1, r2
   d5d58:	d1f9      	bne.n	d5d4e <memcpy+0xe>
   d5d5a:	bd10      	pop	{r4, pc}

000d5d5c <memmove>:
   d5d5c:	4288      	cmp	r0, r1
   d5d5e:	b510      	push	{r4, lr}
   d5d60:	eb01 0402 	add.w	r4, r1, r2
   d5d64:	d902      	bls.n	d5d6c <memmove+0x10>
   d5d66:	4284      	cmp	r4, r0
   d5d68:	4623      	mov	r3, r4
   d5d6a:	d807      	bhi.n	d5d7c <memmove+0x20>
   d5d6c:	1e43      	subs	r3, r0, #1
   d5d6e:	42a1      	cmp	r1, r4
   d5d70:	d008      	beq.n	d5d84 <memmove+0x28>
   d5d72:	f811 2b01 	ldrb.w	r2, [r1], #1
   d5d76:	f803 2f01 	strb.w	r2, [r3, #1]!
   d5d7a:	e7f8      	b.n	d5d6e <memmove+0x12>
   d5d7c:	4402      	add	r2, r0
   d5d7e:	4601      	mov	r1, r0
   d5d80:	428a      	cmp	r2, r1
   d5d82:	d100      	bne.n	d5d86 <memmove+0x2a>
   d5d84:	bd10      	pop	{r4, pc}
   d5d86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d5d8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d5d8e:	e7f7      	b.n	d5d80 <memmove+0x24>

000d5d90 <memset>:
   d5d90:	4402      	add	r2, r0
   d5d92:	4603      	mov	r3, r0
   d5d94:	4293      	cmp	r3, r2
   d5d96:	d100      	bne.n	d5d9a <memset+0xa>
   d5d98:	4770      	bx	lr
   d5d9a:	f803 1b01 	strb.w	r1, [r3], #1
   d5d9e:	e7f9      	b.n	d5d94 <memset+0x4>

000d5da0 <srand>:
   d5da0:	b538      	push	{r3, r4, r5, lr}
   d5da2:	4b0d      	ldr	r3, [pc, #52]	; (d5dd8 <srand+0x38>)
   d5da4:	681d      	ldr	r5, [r3, #0]
   d5da6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5da8:	4604      	mov	r4, r0
   d5daa:	b97b      	cbnz	r3, d5dcc <srand+0x2c>
   d5dac:	2018      	movs	r0, #24
   d5dae:	f7fe fcf5 	bl	d479c <malloc>
   d5db2:	4a0a      	ldr	r2, [pc, #40]	; (d5ddc <srand+0x3c>)
   d5db4:	4b0a      	ldr	r3, [pc, #40]	; (d5de0 <srand+0x40>)
   d5db6:	63a8      	str	r0, [r5, #56]	; 0x38
   d5db8:	e9c0 2300 	strd	r2, r3, [r0]
   d5dbc:	4b09      	ldr	r3, [pc, #36]	; (d5de4 <srand+0x44>)
   d5dbe:	6083      	str	r3, [r0, #8]
   d5dc0:	230b      	movs	r3, #11
   d5dc2:	8183      	strh	r3, [r0, #12]
   d5dc4:	2201      	movs	r2, #1
   d5dc6:	2300      	movs	r3, #0
   d5dc8:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5dcc:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5dce:	2200      	movs	r2, #0
   d5dd0:	611c      	str	r4, [r3, #16]
   d5dd2:	615a      	str	r2, [r3, #20]
   d5dd4:	bd38      	pop	{r3, r4, r5, pc}
   d5dd6:	bf00      	nop
   d5dd8:	2003e5d4 	.word	0x2003e5d4
   d5ddc:	abcd330e 	.word	0xabcd330e
   d5de0:	e66d1234 	.word	0xe66d1234
   d5de4:	0005deec 	.word	0x0005deec

000d5de8 <strcmp>:
   d5de8:	f810 2b01 	ldrb.w	r2, [r0], #1
   d5dec:	f811 3b01 	ldrb.w	r3, [r1], #1
   d5df0:	2a01      	cmp	r2, #1
   d5df2:	bf28      	it	cs
   d5df4:	429a      	cmpcs	r2, r3
   d5df6:	d0f7      	beq.n	d5de8 <strcmp>
   d5df8:	1ad0      	subs	r0, r2, r3
   d5dfa:	4770      	bx	lr

000d5dfc <strdup>:
   d5dfc:	4b02      	ldr	r3, [pc, #8]	; (d5e08 <strdup+0xc>)
   d5dfe:	4601      	mov	r1, r0
   d5e00:	6818      	ldr	r0, [r3, #0]
   d5e02:	f000 b803 	b.w	d5e0c <_strdup_r>
   d5e06:	bf00      	nop
   d5e08:	2003e5d4 	.word	0x2003e5d4

000d5e0c <_strdup_r>:
   d5e0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5e0e:	4604      	mov	r4, r0
   d5e10:	4608      	mov	r0, r1
   d5e12:	460d      	mov	r5, r1
   d5e14:	f000 f80f 	bl	d5e36 <strlen>
   d5e18:	1c42      	adds	r2, r0, #1
   d5e1a:	4611      	mov	r1, r2
   d5e1c:	4620      	mov	r0, r4
   d5e1e:	9201      	str	r2, [sp, #4]
   d5e20:	f7fe fcdc 	bl	d47dc <_malloc_r>
   d5e24:	4604      	mov	r4, r0
   d5e26:	b118      	cbz	r0, d5e30 <_strdup_r+0x24>
   d5e28:	9a01      	ldr	r2, [sp, #4]
   d5e2a:	4629      	mov	r1, r5
   d5e2c:	f7ff ff88 	bl	d5d40 <memcpy>
   d5e30:	4620      	mov	r0, r4
   d5e32:	b003      	add	sp, #12
   d5e34:	bd30      	pop	{r4, r5, pc}

000d5e36 <strlen>:
   d5e36:	4603      	mov	r3, r0
   d5e38:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5e3c:	2a00      	cmp	r2, #0
   d5e3e:	d1fb      	bne.n	d5e38 <strlen+0x2>
   d5e40:	1a18      	subs	r0, r3, r0
   d5e42:	3801      	subs	r0, #1
   d5e44:	4770      	bx	lr

000d5e46 <link_code_end>:
	...

000d5e48 <dynalib_user>:
   d5e48:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d5e58:	0000 0000 6341 7574 7461 726f 7620 6c61     ....Actuator val
   d5e68:	6575 4100 7463 6175 6f74 2072 6574 7473     ue.Actuator test
   d5e78:	4100 7463 6175 6f74 0072 6e6f 4100 7463     .Actuator.on.Act
   d5e88:	6175 6f74 2072 6361 6974 6176 6574 0064     uator activated.
   d5e98:	666f 0066 6341 7574 7461 726f 6420 6165     off.Actuator dea
   d5ea8:	7463 7669 7461 6465 4600 6961 756c 6572     ctivated.Failure
   d5eb8:	6920 206e 6f63 6d6d 6e61 0064 6361 6563      in command.acce
   d5ec8:	7373 6100 6c6c 776f 4c00 636f 5f6b 6f68     ss.allow.Lock_ho
   d5ed8:	6b6f 6400 6e65 0079 6f63 6d6d 6e61 2064     ok.deny.command 
   d5ee8:	7265 6f72 3a72 6300 6d6f 616d 646e 6520     error:.command e
   d5ef8:	7272 726f 0000 0000                         rror....

000d5f00 <_ZTVN5spark13EthernetClassE>:
	...
   d5f08:	485b 000d 4851 000d 4847 000d 483d 000d     [H..QH..GH..=H..
   d5f18:	4831 000d 4825 000d 4819 000d 4811 000d     1H..%H...H...H..
   d5f28:	4807 000d 47fd 000d 5691 000d 7061 0070     .H...G...V..app.
   d5f38:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
   d5f48:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

000d5f54 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d5f5c:	4c75 000d 4c7b 000d 4cb9 000d 4c89 000d     uL..{L...L...L..
   d5f6c:	4c77 000d                                   wL..

000d5f70 <_ZTV9IPAddress>:
	...
   d5f78:	5235 000d 5225 000d 5227 000d               5R..%R..'R..

000d5f84 <_ZTV9USBSerial>:
	...
   d5f8c:	530b 000d 5373 000d 5349 000d 4a39 000d     .S..sS..IS..9J..
   d5f9c:	533b 000d 530d 000d 531d 000d 536d 000d     ;S...S...S..mS..
   d5fac:	532d 000d 5307 000d                         -S...S..

000d5fb4 <_ZTV11USARTSerial>:
	...
   d5fbc:	540d 000d 5479 000d 5451 000d 4a39 000d     .T..yT..QT..9J..
   d5fcc:	5421 000d 543d 000d 542f 000d 544b 000d     !T..=T../T..KT..
   d5fdc:	540f 000d 5413 000d                         .T...T..

000d5fe4 <_ZTV7TwoWire>:
	...
   d5fec:	5531 000d 557b 000d 5553 000d 5533 000d     1U..{U..SU..3U..
   d5ffc:	555b 000d 5563 000d 556b 000d 5573 000d     [U..cU..kU..sU..

000d600c <_ZTVN5spark9WiFiClassE>:
	...
   d6014:	560b 000d 5601 000d 55f7 000d 55ad 000d     .V...V...U...U..
   d6024:	55eb 000d 55df 000d 55d3 000d 55cb 000d     .U...U...U...U..
   d6034:	55c1 000d 55b7 000d 5691 000d               .U...U...V..

000d6040 <_ZTVN5spark12NetworkClassE>:
	...
   d6048:	5629 000d 5633 000d 563d 000d 5647 000d     )V..3V..=V..GV..
   d6058:	5651 000d 565d 000d 5669 000d 5675 000d     QV..]V..iV..uV..
   d6068:	567d 000d 5687 000d 5691 000d               }V...V...V..

000d6074 <_ZTVSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d607c:	57a7 000d 57ad 000d 57c3 000d 57bb 000d     .W...W...W...W..
   d608c:	57a9 000d                                   .W..

000d6090 <_ZSt7nothrow>:
	...

000d6091 <link_const_variable_data_end>:
   d6091:	00          	.byte	0x00
	...

000d6094 <link_constructors_location>:
   d6094:	000d43f9 	.word	0x000d43f9
   d6098:	000d4865 	.word	0x000d4865
   d609c:	000d48ad 	.word	0x000d48ad
   d60a0:	000d4a11 	.word	0x000d4a11
   d60a4:	000d4acd 	.word	0x000d4acd
   d60a8:	000d4add 	.word	0x000d4add
   d60ac:	000d4b35 	.word	0x000d4b35
   d60b0:	000d5615 	.word	0x000d5615
   d60b4:	000d5765 	.word	0x000d5765

000d60b8 <link_constructors_end>:
	...
