
c:/Users/janka/Documents/ParticleProjects/lock_app/target/2.0.0-rc.4/argon/lock_app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002384  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d63a0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  2003e5c4  000d63a4  0001e5c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001bc  2003e634  2003e634  0002e634  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6414  000d6414  00026414  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d643c  000d643c  0002643c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00138d47  00000000  00000000  00026440  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00015732  00000000  00000000  0015f187  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002cb2d  00000000  00000000  001748b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002820  00000000  00000000  001a13e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000078b8  00000000  00000000  001a3c06  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00036c50  00000000  00000000  001ab4be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000359df  00000000  00000000  001e210e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010aa39  00000000  00000000  00217aed  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006cb0  00000000  00000000  00322528  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 ffb5 	bl	d5f9c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 ffd7 	bl	d5fec <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e5c4 	.word	0x2003e5c4
   d4048:	000d63a4 	.word	0x000d63a4
   d404c:	2003e634 	.word	0x2003e634
   d4050:	2003e634 	.word	0x2003e634
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f000 ff05 	bl	d4e6c <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d6370 	.word	0x000d6370
   d407c:	000d6394 	.word	0x000d6394

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b85a 	b.w	d4138 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f8b1 	bl	d41ec <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f000 beaf 	b.w	d4df0 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 bcb7 	b.w	d4a04 <malloc>

000d4096 <_Znaj>:
   d4096:	f000 bcb5 	b.w	d4a04 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 bcbb 	b.w	d4a14 <free>

000d409e <_ZdaPv>:
   d409e:	f000 bcb9 	b.w	d4a14 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZNSt17_Function_handlerIFi6StringEPFiPKcEE9_M_invokeERKSt9_Any_dataOS0_>:

    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	return (*_Base::_M_get_pointer(__functor))(
   d40b2:	6803      	ldr	r3, [r0, #0]
   d40b4:	6808      	ldr	r0, [r1, #0]
   d40b6:	4718      	bx	r3

000d40b8 <_ZNSt14_Function_base13_Base_managerIPFiPKcEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	  switch (__op)
   d40b8:	2a01      	cmp	r2, #1
   d40ba:	d003      	beq.n	d40c4 <_ZNSt14_Function_base13_Base_managerIPFiPKcEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
   d40bc:	2a02      	cmp	r2, #2
   d40be:	d003      	beq.n	d40c8 <_ZNSt14_Function_base13_Base_managerIPFiPKcEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x10>
	}
   d40c0:	2000      	movs	r0, #0
   d40c2:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40c4:	6001      	str	r1, [r0, #0]
	      break;
   d40c6:	e7fb      	b.n	d40c0 <_ZNSt14_Function_base13_Base_managerIPFiPKcEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40c8:	680b      	ldr	r3, [r1, #0]
   d40ca:	6003      	str	r3, [r0, #0]
	}
   d40cc:	e7f8      	b.n	d40c0 <_ZNSt14_Function_base13_Base_managerIPFiPKcEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>
	...

000d40d0 <_ZN10CloudClass9_functionEPKcSt8functionIFi6StringEEPv.isra.0.part.0>:
    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
    }

    static bool _function(const char *funcKey, user_std_function_int_str_t func, void* reserved=NULL)
   d40d0:	b570      	push	{r4, r5, r6, lr}
   d40d2:	4606      	mov	r6, r0
    {
        bool success = false;
        if (func) // if the call-wrapper has wrapped a callable object
        {
            auto wrapper = new user_std_function_int_str_t(func);
   d40d4:	2010      	movs	r0, #16
    static bool _function(const char *funcKey, user_std_function_int_str_t func, void* reserved=NULL)
   d40d6:	460d      	mov	r5, r1
            auto wrapper = new user_std_function_int_str_t(func);
   d40d8:	f7ff ffdb 	bl	d4092 <_Znwj>
   d40dc:	4604      	mov	r4, r0
   d40de:	b188      	cbz	r0, d4104 <_ZN10CloudClass9_functionEPKcSt8functionIFi6StringEEPv.isra.0.part.0+0x34>
    _Function_base() : _M_manager(nullptr) { }
   d40e0:	2300      	movs	r3, #0
   d40e2:	6083      	str	r3, [r0, #8]
       *  or @c false when it is empty.
       *
       *  This function will not throw an %exception.
       */
      explicit operator bool() const noexcept
      { return !_M_empty(); }
   d40e4:	68ab      	ldr	r3, [r5, #8]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d40e6:	b133      	cbz	r3, d40f6 <_ZN10CloudClass9_functionEPKcSt8functionIFi6StringEEPv.isra.0.part.0+0x26>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d40e8:	2202      	movs	r2, #2
   d40ea:	4629      	mov	r1, r5
   d40ec:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d40ee:	68eb      	ldr	r3, [r5, #12]
   d40f0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d40f2:	68ab      	ldr	r3, [r5, #8]
   d40f4:	60a3      	str	r3, [r4, #8]
            if (wrapper) {
                success = register_function(call_std_user_function, wrapper, funcKey);
   d40f6:	4632      	mov	r2, r6
   d40f8:	4621      	mov	r1, r4
   d40fa:	4803      	ldr	r0, [pc, #12]	; (d4108 <_ZN10CloudClass9_functionEPKcSt8functionIFi6StringEEPv.isra.0.part.0+0x38>)
            }
        }
        return success;
    }
   d40fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                success = register_function(call_std_user_function, wrapper, funcKey);
   d4100:	f000 bf55 	b.w	d4fae <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    }
   d4104:	bd70      	pop	{r4, r5, r6, pc}
   d4106:	bf00      	nop
   d4108:	000d4f87 	.word	0x000d4f87

000d410c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d410c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d410e:	f89d 5018 	ldrb.w	r5, [sp, #24]
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   d4112:	431d      	orrs	r5, r3
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4114:	f88d 5000 	strb.w	r5, [sp]
   d4118:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d411a:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d411c:	f001 f83a 	bl	d5194 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }
   d4120:	4620      	mov	r0, r4
   d4122:	b003      	add	sp, #12
   d4124:	bd30      	pop	{r4, r5, pc}

000d4126 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d4126:	b510      	push	{r4, lr}
      if (_M_manager)
   d4128:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d412a:	4604      	mov	r4, r0
      if (_M_manager)
   d412c:	b113      	cbz	r3, d4134 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d412e:	2203      	movs	r2, #3
   d4130:	4601      	mov	r1, r0
   d4132:	4798      	blx	r3
    }
   d4134:	4620      	mov	r0, r4
   d4136:	bd10      	pop	{r4, pc}

000d4138 <setup>:
// has to be an ADC channel!!
int sensor = A0;
int sensor_val;

// setup() runs once, when the device is first turned on.
void setup() {
   d4138:	b530      	push	{r4, r5, lr}
  // Set up actuator pin
  pinMode(actuator, OUTPUT);
   d413a:	4c1d      	ldr	r4, [pc, #116]	; (d41b0 <setup+0x78>)
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d413c:	4d1d      	ldr	r5, [pc, #116]	; (d41b4 <setup+0x7c>)
   d413e:	8820      	ldrh	r0, [r4, #0]
void setup() {
   d4140:	b085      	sub	sp, #20
  pinMode(actuator, OUTPUT);
   d4142:	2101      	movs	r1, #1
   d4144:	f001 fe8c 	bl	d5e60 <pinMode>
  digitalWrite(actuator, LOW);
   d4148:	8820      	ldrh	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   d414a:	4c1b      	ldr	r4, [pc, #108]	; (d41b8 <setup+0x80>)
   d414c:	2100      	movs	r1, #0
   d414e:	f001 fe98 	bl	d5e82 <digitalWrite>

  // Set up sensor pin
  pinMode(sensor, INPUT_PULLUP);
   d4152:	4b1a      	ldr	r3, [pc, #104]	; (d41bc <setup+0x84>)
   d4154:	2102      	movs	r1, #2
   d4156:	8818      	ldrh	r0, [r3, #0]
   d4158:	f001 fe82 	bl	d5e60 <pinMode>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d415c:	4918      	ldr	r1, [pc, #96]	; (d41c0 <setup+0x88>)
   d415e:	4819      	ldr	r0, [pc, #100]	; (d41c4 <setup+0x8c>)
   d4160:	2300      	movs	r3, #0
   d4162:	2202      	movs	r2, #2
   d4164:	f000 fc26 	bl	d49b4 <spark_variable>
   d4168:	2300      	movs	r3, #0
   d416a:	4917      	ldr	r1, [pc, #92]	; (d41c8 <setup+0x90>)
   d416c:	4817      	ldr	r0, [pc, #92]	; (d41cc <setup+0x94>)
   d416e:	2202      	movs	r2, #2
   d4170:	f000 fc20 	bl	d49b4 <spark_variable>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d4174:	4a16      	ldr	r2, [pc, #88]	; (d41d0 <setup+0x98>)
   d4176:	4917      	ldr	r1, [pc, #92]	; (d41d4 <setup+0x9c>)
   d4178:	4817      	ldr	r0, [pc, #92]	; (d41d8 <setup+0xa0>)
   d417a:	f000 ff18 	bl	d4fae <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d417e:	4b17      	ldr	r3, [pc, #92]	; (d41dc <setup+0xa4>)
   d4180:	4817      	ldr	r0, [pc, #92]	; (d41e0 <setup+0xa8>)
   d4182:	9300      	str	r3, [sp, #0]
   d4184:	4669      	mov	r1, sp
	    _M_invoker = &_My_handler::_M_invoke;
   d4186:	9503      	str	r5, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4188:	9402      	str	r4, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   d418a:	f7ff ffa1 	bl	d40d0 <_ZN10CloudClass9_functionEPKcSt8functionIFi6StringEEPv.isra.0.part.0>
    class function<_Res(_ArgTypes...)>
   d418e:	4668      	mov	r0, sp
   d4190:	f7ff ffc9 	bl	d4126 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d4194:	4b13      	ldr	r3, [pc, #76]	; (d41e4 <setup+0xac>)
   d4196:	4814      	ldr	r0, [pc, #80]	; (d41e8 <setup+0xb0>)
   d4198:	9300      	str	r3, [sp, #0]
   d419a:	4669      	mov	r1, sp
	    _M_manager = &_My_handler::_M_manager;
   d419c:	e9cd 4502 	strd	r4, r5, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   d41a0:	f7ff ff96 	bl	d40d0 <_ZN10CloudClass9_functionEPKcSt8functionIFi6StringEEPv.isra.0.part.0>
    class function<_Res(_ArgTypes...)>
   d41a4:	4668      	mov	r0, sp
   d41a6:	f7ff ffbe 	bl	d4126 <_ZNSt14_Function_baseD1Ev>
  Particle.variable("Actuator value", &actuator_val, INT);
  Particle.variable("Sensor value", &sensor_val, INT);
  Particle.function("Actuator test", actuator_test);
  Particle.function("Actuator", actuator_command);
  Particle.function("Request", unlock_request);
}
   d41aa:	b005      	add	sp, #20
   d41ac:	bd30      	pop	{r4, r5, pc}
   d41ae:	bf00      	nop
   d41b0:	2003e5c4 	.word	0x2003e5c4
   d41b4:	000d40b3 	.word	0x000d40b3
   d41b8:	000d40b9 	.word	0x000d40b9
   d41bc:	2003e5c8 	.word	0x2003e5c8
   d41c0:	2003e63c 	.word	0x2003e63c
   d41c4:	000d60b8 	.word	0x000d60b8
   d41c8:	2003e640 	.word	0x2003e640
   d41cc:	000d60c7 	.word	0x000d60c7
   d41d0:	000d60d4 	.word	0x000d60d4
   d41d4:	000d4245 	.word	0x000d4245
   d41d8:	000d4f5b 	.word	0x000d4f5b
   d41dc:	000d4319 	.word	0x000d4319
   d41e0:	000d60e2 	.word	0x000d60e2
   d41e4:	000d4529 	.word	0x000d4529
   d41e8:	000d60eb 	.word	0x000d60eb

000d41ec <loop>:


void loop() {
   d41ec:	b508      	push	{r3, lr}
  actuator_val = analogRead(actuator);
   d41ee:	4b06      	ldr	r3, [pc, #24]	; (d4208 <loop+0x1c>)
   d41f0:	8818      	ldrh	r0, [r3, #0]
   d41f2:	f001 fe5f 	bl	d5eb4 <analogRead>
   d41f6:	4b05      	ldr	r3, [pc, #20]	; (d420c <loop+0x20>)
   d41f8:	6018      	str	r0, [r3, #0]
  sensor_val = analogRead(sensor);
   d41fa:	4b05      	ldr	r3, [pc, #20]	; (d4210 <loop+0x24>)
   d41fc:	8818      	ldrh	r0, [r3, #0]
   d41fe:	f001 fe59 	bl	d5eb4 <analogRead>
   d4202:	4b04      	ldr	r3, [pc, #16]	; (d4214 <loop+0x28>)
   d4204:	6018      	str	r0, [r3, #0]
}
   d4206:	bd08      	pop	{r3, pc}
   d4208:	2003e5c4 	.word	0x2003e5c4
   d420c:	2003e63c 	.word	0x2003e63c
   d4210:	2003e5c8 	.word	0x2003e5c8
   d4214:	2003e640 	.word	0x2003e640

000d4218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4218:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d421a:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d421c:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d421e:	b17c      	cbz	r4, d4240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4220:	6863      	ldr	r3, [r4, #4]
   d4222:	3b01      	subs	r3, #1
   d4224:	6063      	str	r3, [r4, #4]
   d4226:	b95b      	cbnz	r3, d4240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4228:	6823      	ldr	r3, [r4, #0]
   d422a:	4620      	mov	r0, r4
   d422c:	689b      	ldr	r3, [r3, #8]
   d422e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4230:	68a3      	ldr	r3, [r4, #8]
   d4232:	3b01      	subs	r3, #1
   d4234:	60a3      	str	r3, [r4, #8]
   d4236:	b91b      	cbnz	r3, d4240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4238:	6823      	ldr	r3, [r4, #0]
   d423a:	4620      	mov	r0, r4
   d423c:	68db      	ldr	r3, [r3, #12]
   d423e:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4240:	4628      	mov	r0, r5
   d4242:	bd38      	pop	{r3, r4, r5, pc}

000d4244 <_Z13actuator_test6String>:

// Actuator manual testing function
int actuator_test(String command)
{
   d4244:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4246:	491f      	ldr	r1, [pc, #124]	; (d42c4 <_Z13actuator_test6String+0x80>)
   d4248:	4d1f      	ldr	r5, [pc, #124]	; (d42c8 <_Z13actuator_test6String+0x84>)
   d424a:	4606      	mov	r6, r0
   d424c:	f000 fcf9 	bl	d4c42 <_ZNK6String6equalsEPKc>
  if (command == "on")
   d4250:	4604      	mov	r4, r0
   d4252:	b190      	cbz	r0, d427a <_Z13actuator_test6String+0x36>
  {
    digitalWrite(actuator, HIGH);
   d4254:	4b1d      	ldr	r3, [pc, #116]	; (d42cc <_Z13actuator_test6String+0x88>)
   d4256:	2101      	movs	r1, #1
   d4258:	8818      	ldrh	r0, [r3, #0]
   d425a:	f001 fe12 	bl	d5e82 <digitalWrite>
inline particle::Flags<TagT, ValueT>::Flags() :
   d425e:	2200      	movs	r2, #0
        return publish(eventName, NULL, flags1, flags2);
   d4260:	782b      	ldrb	r3, [r5, #0]
   d4262:	491b      	ldr	r1, [pc, #108]	; (d42d0 <_Z13actuator_test6String+0x8c>)
   d4264:	f88d 2000 	strb.w	r2, [sp]
   d4268:	a802      	add	r0, sp, #8
   d426a:	f7ff ff4f 	bl	d410c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d426e:	a803      	add	r0, sp, #12
   d4270:	f7ff ffd2 	bl	d4218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("Actuator activated", PRIVATE);
    return 1;
   d4274:	2001      	movs	r0, #1
  else
  {
    Particle.publish("Failure in command", PRIVATE);
    return -1;
  } 
}
   d4276:	b004      	add	sp, #16
   d4278:	bd70      	pop	{r4, r5, r6, pc}
   d427a:	4916      	ldr	r1, [pc, #88]	; (d42d4 <_Z13actuator_test6String+0x90>)
   d427c:	4630      	mov	r0, r6
   d427e:	f000 fce0 	bl	d4c42 <_ZNK6String6equalsEPKc>
  else if (command == "off")
   d4282:	4602      	mov	r2, r0
   d4284:	b188      	cbz	r0, d42aa <_Z13actuator_test6String+0x66>
    digitalWrite(actuator, LOW);
   d4286:	4b11      	ldr	r3, [pc, #68]	; (d42cc <_Z13actuator_test6String+0x88>)
   d4288:	4621      	mov	r1, r4
   d428a:	8818      	ldrh	r0, [r3, #0]
   d428c:	f001 fdf9 	bl	d5e82 <digitalWrite>
   d4290:	782b      	ldrb	r3, [r5, #0]
   d4292:	4911      	ldr	r1, [pc, #68]	; (d42d8 <_Z13actuator_test6String+0x94>)
   d4294:	f88d 4000 	strb.w	r4, [sp]
   d4298:	4622      	mov	r2, r4
   d429a:	a802      	add	r0, sp, #8
   d429c:	f7ff ff36 	bl	d410c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d42a0:	a803      	add	r0, sp, #12
   d42a2:	f7ff ffb9 	bl	d4218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 0;
   d42a6:	4620      	mov	r0, r4
   d42a8:	e7e5      	b.n	d4276 <_Z13actuator_test6String+0x32>
   d42aa:	782b      	ldrb	r3, [r5, #0]
   d42ac:	490b      	ldr	r1, [pc, #44]	; (d42dc <_Z13actuator_test6String+0x98>)
   d42ae:	f88d 0000 	strb.w	r0, [sp]
   d42b2:	a802      	add	r0, sp, #8
   d42b4:	f7ff ff2a 	bl	d410c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d42b8:	a803      	add	r0, sp, #12
   d42ba:	f7ff ffad 	bl	d4218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return -1;
   d42be:	f04f 30ff 	mov.w	r0, #4294967295
   d42c2:	e7d8      	b.n	d4276 <_Z13actuator_test6String+0x32>
   d42c4:	000d60f3 	.word	0x000d60f3
   d42c8:	2003e638 	.word	0x2003e638
   d42cc:	2003e5c4 	.word	0x2003e5c4
   d42d0:	000d60f6 	.word	0x000d60f6
   d42d4:	000d6109 	.word	0x000d6109
   d42d8:	000d610d 	.word	0x000d610d
   d42dc:	000d6122 	.word	0x000d6122

000d42e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d42e0:	680b      	ldr	r3, [r1, #0]
   d42e2:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d42e4:	b113      	cbz	r3, d42ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d42e6:	685a      	ldr	r2, [r3, #4]
   d42e8:	3201      	adds	r2, #1
   d42ea:	605a      	str	r2, [r3, #4]
      }
   d42ec:	4770      	bx	lr

000d42ee <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d42ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d42f0:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d42f2:	f851 3b04 	ldr.w	r3, [r1], #4
   d42f6:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d42f8:	4604      	mov	r4, r0
   d42fa:	a801      	add	r0, sp, #4
   d42fc:	f7ff fff0 	bl	d42e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d4300:	466a      	mov	r2, sp
   d4302:	4629      	mov	r1, r5
   d4304:	4620      	mov	r0, r4
   d4306:	f001 fcd7 	bl	d5cb8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d430a:	a801      	add	r0, sp, #4
   d430c:	f7ff ff84 	bl	d4218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4310:	4620      	mov	r0, r4
   d4312:	b003      	add	sp, #12
   d4314:	bd30      	pop	{r4, r5, pc}
	...

000d4318 <_Z16actuator_commandPKc>:
//
//    replace string in <>
//    in windows prompt, it might be neccessary to write curl.exe instead of
//    curl
int actuator_command(const char *data)
{
   d4318:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d431c:	b099      	sub	sp, #100	; 0x64
    return strcmp(s_, str) == 0;
   d431e:	4d74      	ldr	r5, [pc, #464]	; (d44f0 <_Z16actuator_commandPKc+0x1d8>)
   d4320:	9003      	str	r0, [sp, #12]
    return parseCopy(json, strlen(json));
   d4322:	f001 feb6 	bl	d6092 <strlen>
   d4326:	9903      	ldr	r1, [sp, #12]
   d4328:	4602      	mov	r2, r0
   d432a:	a804      	add	r0, sp, #16
   d432c:	f001 fd04 	bl	d5d38 <_ZN5spark9JSONValue9parseCopyEPKcj>
  //insert JSON string into JSON object, and itterate through object
  JSONValue master_msg = JSONValue::parseCopy(data);
  JSONObjectIterator iter(master_msg);
   d4330:	a904      	add	r1, sp, #16
   d4332:	a812      	add	r0, sp, #72	; 0x48
   d4334:	f7ff ffdb 	bl	d42ee <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>

  while(iter.next())
   d4338:	a812      	add	r0, sp, #72	; 0x48
   d433a:	f001 fcd5 	bl	d5ce8 <_ZN5spark18JSONObjectIterator4nextEv>
   d433e:	2800      	cmp	r0, #0
   d4340:	f000 80d2 	beq.w	d44e8 <_Z16actuator_commandPKc+0x1d0>
inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
    return JSONValue(v_, d_);
   d4344:	9c16      	ldr	r4, [sp, #88]	; 0x58
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4346:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d4348:	930e      	str	r3, [sp, #56]	; 0x38
   d434a:	a913      	add	r1, sp, #76	; 0x4c
   d434c:	a80f      	add	r0, sp, #60	; 0x3c
   d434e:	f7ff ffc7 	bl	d42e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4352:	aa0e      	add	r2, sp, #56	; 0x38
   d4354:	4621      	mov	r1, r4
   d4356:	a807      	add	r0, sp, #28
   d4358:	f001 fb9c 	bl	d5a94 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d435c:	a80f      	add	r0, sp, #60	; 0x3c
   d435e:	f7ff ff5b 	bl	d4218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return JSONString(t_, d_);
   d4362:	9c09      	ldr	r4, [sp, #36]	; 0x24
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4364:	9b07      	ldr	r3, [sp, #28]
   d4366:	930a      	str	r3, [sp, #40]	; 0x28
   d4368:	a908      	add	r1, sp, #32
   d436a:	a80b      	add	r0, sp, #44	; 0x2c
   d436c:	f7ff ffb8 	bl	d42e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4370:	aa0a      	add	r2, sp, #40	; 0x28
   d4372:	4621      	mov	r1, r4
   d4374:	a80e      	add	r0, sp, #56	; 0x38
   d4376:	f001 fc7b 	bl	d5c70 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d437a:	a80b      	add	r0, sp, #44	; 0x2c
   d437c:	f7ff ff4c 	bl	d4218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  {
    // make it possible to read JSON string
    String val = iter.value().toString().data();
   d4380:	9910      	ldr	r1, [sp, #64]	; 0x40
   d4382:	a80a      	add	r0, sp, #40	; 0x28
   d4384:	f000 fc2f 	bl	d4be6 <_ZN6StringC1EPKc>
   d4388:	a80f      	add	r0, sp, #60	; 0x3c
   d438a:	f7ff ff45 	bl	d4218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d438e:	a808      	add	r0, sp, #32
   d4390:	f7ff ff42 	bl	d4218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return JSONString(k_, d_);
   d4394:	9c15      	ldr	r4, [sp, #84]	; 0x54
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4396:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d4398:	9307      	str	r3, [sp, #28]
   d439a:	a913      	add	r1, sp, #76	; 0x4c
   d439c:	a808      	add	r0, sp, #32
   d439e:	f7ff ff9f 	bl	d42e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d43a2:	4621      	mov	r1, r4
   d43a4:	aa07      	add	r2, sp, #28
   d43a6:	a80e      	add	r0, sp, #56	; 0x38
   d43a8:	f001 fc62 	bl	d5c70 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d43ac:	a808      	add	r0, sp, #32
   d43ae:	f7ff ff33 	bl	d4218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d43b2:	9810      	ldr	r0, [sp, #64]	; 0x40
   d43b4:	4629      	mov	r1, r5
   d43b6:	f001 fe45 	bl	d6044 <strcmp>
   d43ba:	4604      	mov	r4, r0
   d43bc:	a80f      	add	r0, sp, #60	; 0x3c
   d43be:	f7ff ff2b 	bl	d4218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    // go through JSON string
    if (iter.name() == "access")
   d43c2:	2c00      	cmp	r4, #0
   d43c4:	f040 808c 	bne.w	d44e0 <_Z16actuator_commandPKc+0x1c8>
   d43c8:	494a      	ldr	r1, [pc, #296]	; (d44f4 <_Z16actuator_commandPKc+0x1dc>)
   d43ca:	4d4b      	ldr	r5, [pc, #300]	; (d44f8 <_Z16actuator_commandPKc+0x1e0>)
   d43cc:	a80a      	add	r0, sp, #40	; 0x28
   d43ce:	f000 fc38 	bl	d4c42 <_ZNK6String6equalsEPKc>
    {
      if (val == "allow")
   d43d2:	2800      	cmp	r0, #0
   d43d4:	d058      	beq.n	d4488 <_Z16actuator_commandPKc+0x170>
      {
        // publish to thingspeak, so guest can recieve ack msg.
        Particle.publish("Lock_hook", "master allow", PRIVATE);
   d43d6:	f88d 4000 	strb.w	r4, [sp]
   d43da:	782b      	ldrb	r3, [r5, #0]
   d43dc:	4a47      	ldr	r2, [pc, #284]	; (d44fc <_Z16actuator_commandPKc+0x1e4>)
   d43de:	4948      	ldr	r1, [pc, #288]	; (d4500 <_Z16actuator_commandPKc+0x1e8>)
        // open door
        Particle.publish("door is open", PRIVATE);
        digitalWrite(actuator, HIGH);
   d43e0:	f8df 8138 	ldr.w	r8, [pc, #312]	; d451c <_Z16actuator_commandPKc+0x204>

        // door gets closed sensing
        delay(10000); //given time to open the door
        sensor_val = analogRead(sensor);
   d43e4:	4f47      	ldr	r7, [pc, #284]	; (d4504 <_Z16actuator_commandPKc+0x1ec>)
        Particle.publish("Lock_hook", "master allow", PRIVATE);
   d43e6:	a80e      	add	r0, sp, #56	; 0x38
   d43e8:	f7ff fe90 	bl	d410c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d43ec:	a80f      	add	r0, sp, #60	; 0x3c
   d43ee:	f7ff ff13 	bl	d4218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d43f2:	f88d 4000 	strb.w	r4, [sp]
   d43f6:	782b      	ldrb	r3, [r5, #0]
   d43f8:	4943      	ldr	r1, [pc, #268]	; (d4508 <_Z16actuator_commandPKc+0x1f0>)
   d43fa:	4622      	mov	r2, r4
   d43fc:	a80e      	add	r0, sp, #56	; 0x38
   d43fe:	f7ff fe85 	bl	d410c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4402:	a80f      	add	r0, sp, #60	; 0x3c
   d4404:	f7ff ff08 	bl	d4218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        digitalWrite(actuator, HIGH);
   d4408:	2101      	movs	r1, #1
   d440a:	f8b8 0000 	ldrh.w	r0, [r8]
   d440e:	f001 fd38 	bl	d5e82 <digitalWrite>
        delay(10000); //given time to open the door
   d4412:	f242 7010 	movw	r0, #10000	; 0x2710
   d4416:	f000 fc9f 	bl	d4d58 <delay>
        sensor_val = analogRead(sensor);
   d441a:	8838      	ldrh	r0, [r7, #0]
   d441c:	f001 fd4a 	bl	d5eb4 <analogRead>
   d4420:	4b3a      	ldr	r3, [pc, #232]	; (d450c <_Z16actuator_commandPKc+0x1f4>)
        if (sensor_val >= 50) // door is closed
   d4422:	2831      	cmp	r0, #49	; 0x31
        sensor_val = analogRead(sensor);
   d4424:	6018      	str	r0, [r3, #0]
        if (sensor_val >= 50) // door is closed
   d4426:	46c1      	mov	r9, r8
   d4428:	461e      	mov	r6, r3
   d442a:	dd1d      	ble.n	d4468 <_Z16actuator_commandPKc+0x150>
        {
          digitalWrite(actuator, LOW);
   d442c:	f8b8 0000 	ldrh.w	r0, [r8]
   d4430:	4621      	mov	r1, r4
   d4432:	f001 fd26 	bl	d5e82 <digitalWrite>
   d4436:	f88d 4000 	strb.w	r4, [sp]
   d443a:	782b      	ldrb	r3, [r5, #0]
   d443c:	4622      	mov	r2, r4
   d443e:	4934      	ldr	r1, [pc, #208]	; (d4510 <_Z16actuator_commandPKc+0x1f8>)
   d4440:	a80e      	add	r0, sp, #56	; 0x38
   d4442:	f7ff fe63 	bl	d410c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4446:	a80f      	add	r0, sp, #60	; 0x3c
   d4448:	f7ff fee6 	bl	d4218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
          {
            sensor_val = analogRead(sensor);
          }
          digitalWrite(actuator, LOW);
          Particle.publish("door is closed", PRIVATE);
          return 1;
   d444c:	2401      	movs	r4, #1
    String val = iter.value().toString().data();
   d444e:	a80a      	add	r0, sp, #40	; 0x28
   d4450:	f000 fb7e 	bl	d4b50 <_ZN6StringD1Ev>
   d4454:	a813      	add	r0, sp, #76	; 0x4c
   d4456:	f7ff fedf 	bl	d4218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d445a:	a805      	add	r0, sp, #20
   d445c:	f7ff fedc 	bl	d4218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return -1;
      }
    }
  }
  return -2;
}
   d4460:	4620      	mov	r0, r4
   d4462:	b019      	add	sp, #100	; 0x64
   d4464:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            sensor_val = analogRead(sensor);
   d4468:	8838      	ldrh	r0, [r7, #0]
   d446a:	f001 fd23 	bl	d5eb4 <analogRead>
          while(sensor_val <= 50) // door is open
   d446e:	2832      	cmp	r0, #50	; 0x32
            sensor_val = analogRead(sensor);
   d4470:	6030      	str	r0, [r6, #0]
          while(sensor_val <= 50) // door is open
   d4472:	ddf9      	ble.n	d4468 <_Z16actuator_commandPKc+0x150>
          digitalWrite(actuator, LOW);
   d4474:	f8b9 0000 	ldrh.w	r0, [r9]
   d4478:	2100      	movs	r1, #0
   d447a:	f001 fd02 	bl	d5e82 <digitalWrite>
   d447e:	2200      	movs	r2, #0
   d4480:	f88d 2000 	strb.w	r2, [sp]
   d4484:	782b      	ldrb	r3, [r5, #0]
   d4486:	e7da      	b.n	d443e <_Z16actuator_commandPKc+0x126>
   d4488:	4922      	ldr	r1, [pc, #136]	; (d4514 <_Z16actuator_commandPKc+0x1fc>)
   d448a:	a80a      	add	r0, sp, #40	; 0x28
   d448c:	f000 fbd9 	bl	d4c42 <_ZNK6String6equalsEPKc>
        Particle.publish("Lock_hook", "master deny", PRIVATE);
   d4490:	f88d 4000 	strb.w	r4, [sp]
   d4494:	782b      	ldrb	r3, [r5, #0]
      else if (val == "deny")
   d4496:	b168      	cbz	r0, d44b4 <_Z16actuator_commandPKc+0x19c>
        Particle.publish("Lock_hook", "master deny", PRIVATE);
   d4498:	4a1f      	ldr	r2, [pc, #124]	; (d4518 <_Z16actuator_commandPKc+0x200>)
   d449a:	4919      	ldr	r1, [pc, #100]	; (d4500 <_Z16actuator_commandPKc+0x1e8>)
   d449c:	a80e      	add	r0, sp, #56	; 0x38
   d449e:	f7ff fe35 	bl	d410c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d44a2:	a80f      	add	r0, sp, #60	; 0x3c
   d44a4:	f7ff feb8 	bl	d4218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        digitalWrite(actuator, LOW);
   d44a8:	4b1c      	ldr	r3, [pc, #112]	; (d451c <_Z16actuator_commandPKc+0x204>)
   d44aa:	4621      	mov	r1, r4
   d44ac:	8818      	ldrh	r0, [r3, #0]
   d44ae:	f001 fce8 	bl	d5e82 <digitalWrite>
        return 0;
   d44b2:	e7cc      	b.n	d444e <_Z16actuator_commandPKc+0x136>
        Particle.publish("Lock_hook", "master command error:", PRIVATE);
   d44b4:	4a1a      	ldr	r2, [pc, #104]	; (d4520 <_Z16actuator_commandPKc+0x208>)
   d44b6:	4912      	ldr	r1, [pc, #72]	; (d4500 <_Z16actuator_commandPKc+0x1e8>)
   d44b8:	a80e      	add	r0, sp, #56	; 0x38
   d44ba:	f7ff fe27 	bl	d410c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d44be:	a80f      	add	r0, sp, #60	; 0x3c
   d44c0:	f7ff feaa 	bl	d4218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        Particle.publish("master command error", val, PRIVATE);
   d44c4:	f88d 4000 	strb.w	r4, [sp]
   d44c8:	782b      	ldrb	r3, [r5, #0]
   d44ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d44cc:	4915      	ldr	r1, [pc, #84]	; (d4524 <_Z16actuator_commandPKc+0x20c>)
   d44ce:	a80e      	add	r0, sp, #56	; 0x38
   d44d0:	f7ff fe1c 	bl	d410c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d44d4:	a80f      	add	r0, sp, #60	; 0x3c
   d44d6:	f7ff fe9f 	bl	d4218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return -1;
   d44da:	f04f 34ff 	mov.w	r4, #4294967295
   d44de:	e7b6      	b.n	d444e <_Z16actuator_commandPKc+0x136>
    String val = iter.value().toString().data();
   d44e0:	a80a      	add	r0, sp, #40	; 0x28
   d44e2:	f000 fb35 	bl	d4b50 <_ZN6StringD1Ev>
   d44e6:	e727      	b.n	d4338 <_Z16actuator_commandPKc+0x20>
  return -2;
   d44e8:	f06f 0401 	mvn.w	r4, #1
   d44ec:	e7b2      	b.n	d4454 <_Z16actuator_commandPKc+0x13c>
   d44ee:	bf00      	nop
   d44f0:	000d61b5 	.word	0x000d61b5
   d44f4:	000d613c 	.word	0x000d613c
   d44f8:	2003e638 	.word	0x2003e638
   d44fc:	000d6135 	.word	0x000d6135
   d4500:	000d6142 	.word	0x000d6142
   d4504:	2003e5c8 	.word	0x2003e5c8
   d4508:	000d614c 	.word	0x000d614c
   d450c:	2003e640 	.word	0x2003e640
   d4510:	000d6159 	.word	0x000d6159
   d4514:	000d616f 	.word	0x000d616f
   d4518:	000d6168 	.word	0x000d6168
   d451c:	2003e5c4 	.word	0x2003e5c4
   d4520:	000d6174 	.word	0x000d6174
   d4524:	000d618a 	.word	0x000d618a

000d4528 <_Z14unlock_requestPKc>:
//    access_token=<ACCESS-TOKEN> -d "arg={access:request}"
//
//    in windows prompt, it might be neccessary to write curl.exe instead of
//    curl
int unlock_request(const char *data)
{
   d4528:	b530      	push	{r4, r5, lr}
   d452a:	b099      	sub	sp, #100	; 0x64
   d452c:	4d42      	ldr	r5, [pc, #264]	; (d4638 <_Z14unlock_requestPKc+0x110>)
   d452e:	9003      	str	r0, [sp, #12]
    return parseCopy(json, strlen(json));
   d4530:	f001 fdaf 	bl	d6092 <strlen>
   d4534:	9903      	ldr	r1, [sp, #12]
   d4536:	4602      	mov	r2, r0
   d4538:	a804      	add	r0, sp, #16
   d453a:	f001 fbfd 	bl	d5d38 <_ZN5spark9JSONValue9parseCopyEPKcj>
  //insert JSON string into JSON object, and itterate through object
  JSONValue guest_msg = JSONValue::parseCopy(data);
  JSONObjectIterator iter(guest_msg);
   d453e:	a904      	add	r1, sp, #16
   d4540:	a812      	add	r0, sp, #72	; 0x48
   d4542:	f7ff fed4 	bl	d42ee <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>

  while(iter.next())
   d4546:	a812      	add	r0, sp, #72	; 0x48
   d4548:	f001 fbce 	bl	d5ce8 <_ZN5spark18JSONObjectIterator4nextEv>
   d454c:	2800      	cmp	r0, #0
   d454e:	d06f      	beq.n	d4630 <_Z14unlock_requestPKc+0x108>
    return JSONValue(v_, d_);
   d4550:	9c16      	ldr	r4, [sp, #88]	; 0x58
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4552:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d4554:	930e      	str	r3, [sp, #56]	; 0x38
   d4556:	a913      	add	r1, sp, #76	; 0x4c
   d4558:	a80f      	add	r0, sp, #60	; 0x3c
   d455a:	f7ff fec1 	bl	d42e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d455e:	aa0e      	add	r2, sp, #56	; 0x38
   d4560:	4621      	mov	r1, r4
   d4562:	a807      	add	r0, sp, #28
   d4564:	f001 fa96 	bl	d5a94 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4568:	a80f      	add	r0, sp, #60	; 0x3c
   d456a:	f7ff fe55 	bl	d4218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return JSONString(t_, d_);
   d456e:	9c09      	ldr	r4, [sp, #36]	; 0x24
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4570:	9b07      	ldr	r3, [sp, #28]
   d4572:	930a      	str	r3, [sp, #40]	; 0x28
   d4574:	a908      	add	r1, sp, #32
   d4576:	a80b      	add	r0, sp, #44	; 0x2c
   d4578:	f7ff feb2 	bl	d42e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d457c:	aa0a      	add	r2, sp, #40	; 0x28
   d457e:	4621      	mov	r1, r4
   d4580:	a80e      	add	r0, sp, #56	; 0x38
   d4582:	f001 fb75 	bl	d5c70 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4586:	a80b      	add	r0, sp, #44	; 0x2c
   d4588:	f7ff fe46 	bl	d4218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  {
    // make it possible to read JSON string
    String val = iter.value().toString().data();
   d458c:	9910      	ldr	r1, [sp, #64]	; 0x40
   d458e:	a80a      	add	r0, sp, #40	; 0x28
   d4590:	f000 fb29 	bl	d4be6 <_ZN6StringC1EPKc>
   d4594:	a80f      	add	r0, sp, #60	; 0x3c
   d4596:	f7ff fe3f 	bl	d4218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d459a:	a808      	add	r0, sp, #32
   d459c:	f7ff fe3c 	bl	d4218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return JSONString(k_, d_);
   d45a0:	9c15      	ldr	r4, [sp, #84]	; 0x54
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d45a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d45a4:	9307      	str	r3, [sp, #28]
   d45a6:	a913      	add	r1, sp, #76	; 0x4c
   d45a8:	a808      	add	r0, sp, #32
   d45aa:	f7ff fe99 	bl	d42e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d45ae:	4621      	mov	r1, r4
   d45b0:	aa07      	add	r2, sp, #28
   d45b2:	a80e      	add	r0, sp, #56	; 0x38
   d45b4:	f001 fb5c 	bl	d5c70 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d45b8:	a808      	add	r0, sp, #32
   d45ba:	f7ff fe2d 	bl	d4218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d45be:	9810      	ldr	r0, [sp, #64]	; 0x40
   d45c0:	4629      	mov	r1, r5
   d45c2:	f001 fd3f 	bl	d6044 <strcmp>
   d45c6:	4604      	mov	r4, r0
   d45c8:	a80f      	add	r0, sp, #60	; 0x3c
   d45ca:	f7ff fe25 	bl	d4218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    // go through JSON string
    if (iter.name() == "access")
   d45ce:	bb5c      	cbnz	r4, d4628 <_Z14unlock_requestPKc+0x100>
   d45d0:	491a      	ldr	r1, [pc, #104]	; (d463c <_Z14unlock_requestPKc+0x114>)
   d45d2:	a80a      	add	r0, sp, #40	; 0x28
   d45d4:	f000 fb35 	bl	d4c42 <_ZNK6String6equalsEPKc>
   d45d8:	4b19      	ldr	r3, [pc, #100]	; (d4640 <_Z14unlock_requestPKc+0x118>)
    {
      if (val == "request")
   d45da:	b1b8      	cbz	r0, d460c <_Z14unlock_requestPKc+0xe4>
      {
      Particle.publish("lock_hook", "guest request access", PRIVATE);
   d45dc:	f88d 4000 	strb.w	r4, [sp]
   d45e0:	781b      	ldrb	r3, [r3, #0]
   d45e2:	4a18      	ldr	r2, [pc, #96]	; (d4644 <_Z14unlock_requestPKc+0x11c>)
   d45e4:	4918      	ldr	r1, [pc, #96]	; (d4648 <_Z14unlock_requestPKc+0x120>)
   d45e6:	a80e      	add	r0, sp, #56	; 0x38
   d45e8:	f7ff fd90 	bl	d410c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d45ec:	a80f      	add	r0, sp, #60	; 0x3c
   d45ee:	f7ff fe13 	bl	d4218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      return 1;
   d45f2:	2401      	movs	r4, #1
    String val = iter.value().toString().data();
   d45f4:	a80a      	add	r0, sp, #40	; 0x28
   d45f6:	f000 faab 	bl	d4b50 <_ZN6StringD1Ev>
   d45fa:	a813      	add	r0, sp, #76	; 0x4c
   d45fc:	f7ff fe0c 	bl	d4218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4600:	a805      	add	r0, sp, #20
   d4602:	f7ff fe09 	bl	d4218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return -1;
      }
    }
  }
  return -2;
   d4606:	4620      	mov	r0, r4
   d4608:	b019      	add	sp, #100	; 0x64
   d460a:	bd30      	pop	{r4, r5, pc}
        Particle.publish("guest request error", val, PRIVATE);
   d460c:	f88d 0000 	strb.w	r0, [sp]
   d4610:	781b      	ldrb	r3, [r3, #0]
   d4612:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d4614:	490d      	ldr	r1, [pc, #52]	; (d464c <_Z14unlock_requestPKc+0x124>)
   d4616:	a80e      	add	r0, sp, #56	; 0x38
   d4618:	f7ff fd78 	bl	d410c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d461c:	a80f      	add	r0, sp, #60	; 0x3c
   d461e:	f7ff fdfb 	bl	d4218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return -1;
   d4622:	f04f 34ff 	mov.w	r4, #4294967295
   d4626:	e7e5      	b.n	d45f4 <_Z14unlock_requestPKc+0xcc>
    String val = iter.value().toString().data();
   d4628:	a80a      	add	r0, sp, #40	; 0x28
   d462a:	f000 fa91 	bl	d4b50 <_ZN6StringD1Ev>
   d462e:	e78a      	b.n	d4546 <_Z14unlock_requestPKc+0x1e>
  return -2;
   d4630:	f06f 0401 	mvn.w	r4, #1
   d4634:	e7e1      	b.n	d45fa <_Z14unlock_requestPKc+0xd2>
   d4636:	bf00      	nop
   d4638:	000d61b5 	.word	0x000d61b5
   d463c:	000d619f 	.word	0x000d619f
   d4640:	2003e638 	.word	0x2003e638
   d4644:	000d61a7 	.word	0x000d61a7
   d4648:	000d61bc 	.word	0x000d61bc
   d464c:	000d61c6 	.word	0x000d61c6

000d4650 <_GLOBAL__sub_I_actuator>:
        val_(val) {
   d4650:	4b01      	ldr	r3, [pc, #4]	; (d4658 <_GLOBAL__sub_I_actuator+0x8>)
   d4652:	2201      	movs	r2, #1
   d4654:	701a      	strb	r2, [r3, #0]
   d4656:	4770      	bx	lr
   d4658:	2003e638 	.word	0x2003e638

000d465c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d465c:	b508      	push	{r3, lr}
   d465e:	4b02      	ldr	r3, [pc, #8]	; (d4668 <netdb_freeaddrinfo+0xc>)
   d4660:	681b      	ldr	r3, [r3, #0]
   d4662:	689b      	ldr	r3, [r3, #8]
   d4664:	9301      	str	r3, [sp, #4]
   d4666:	bd08      	pop	{r3, pc}
   d4668:	00030268 	.word	0x00030268

000d466c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d466c:	b508      	push	{r3, lr}
   d466e:	4b02      	ldr	r3, [pc, #8]	; (d4678 <netdb_getaddrinfo+0xc>)
   d4670:	681b      	ldr	r3, [r3, #0]
   d4672:	68db      	ldr	r3, [r3, #12]
   d4674:	9301      	str	r3, [sp, #4]
   d4676:	bd08      	pop	{r3, pc}
   d4678:	00030268 	.word	0x00030268

000d467c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d467c:	b508      	push	{r3, lr}
   d467e:	4b02      	ldr	r3, [pc, #8]	; (d4688 <HAL_Validate_Pin_Function+0xc>)
   d4680:	681b      	ldr	r3, [r3, #0]
   d4682:	685b      	ldr	r3, [r3, #4]
   d4684:	9301      	str	r3, [sp, #4]
   d4686:	bd08      	pop	{r3, pc}
   d4688:	0003022c 	.word	0x0003022c

000d468c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d468c:	b508      	push	{r3, lr}
   d468e:	4b02      	ldr	r3, [pc, #8]	; (d4698 <HAL_Pin_Mode+0xc>)
   d4690:	681b      	ldr	r3, [r3, #0]
   d4692:	689b      	ldr	r3, [r3, #8]
   d4694:	9301      	str	r3, [sp, #4]
   d4696:	bd08      	pop	{r3, pc}
   d4698:	0003022c 	.word	0x0003022c

000d469c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d469c:	b508      	push	{r3, lr}
   d469e:	4b02      	ldr	r3, [pc, #8]	; (d46a8 <HAL_Get_Pin_Mode+0xc>)
   d46a0:	681b      	ldr	r3, [r3, #0]
   d46a2:	68db      	ldr	r3, [r3, #12]
   d46a4:	9301      	str	r3, [sp, #4]
   d46a6:	bd08      	pop	{r3, pc}
   d46a8:	0003022c 	.word	0x0003022c

000d46ac <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d46ac:	b508      	push	{r3, lr}
   d46ae:	4b02      	ldr	r3, [pc, #8]	; (d46b8 <HAL_GPIO_Write+0xc>)
   d46b0:	681b      	ldr	r3, [r3, #0]
   d46b2:	691b      	ldr	r3, [r3, #16]
   d46b4:	9301      	str	r3, [sp, #4]
   d46b6:	bd08      	pop	{r3, pc}
   d46b8:	0003022c 	.word	0x0003022c

000d46bc <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d46bc:	b508      	push	{r3, lr}
   d46be:	4b02      	ldr	r3, [pc, #8]	; (d46c8 <hal_adc_read+0xc>)
   d46c0:	681b      	ldr	r3, [r3, #0]
   d46c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d46c4:	9301      	str	r3, [sp, #4]
   d46c6:	bd08      	pop	{r3, pc}
   d46c8:	0003022c 	.word	0x0003022c

000d46cc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d46cc:	b508      	push	{r3, lr}
   d46ce:	4b02      	ldr	r3, [pc, #8]	; (d46d8 <HAL_RNG_GetRandomNumber+0xc>)
   d46d0:	681b      	ldr	r3, [r3, #0]
   d46d2:	685b      	ldr	r3, [r3, #4]
   d46d4:	9301      	str	r3, [sp, #4]
   d46d6:	bd08      	pop	{r3, pc}
   d46d8:	00030218 	.word	0x00030218

000d46dc <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d46dc:	b508      	push	{r3, lr}
   d46de:	4b02      	ldr	r3, [pc, #8]	; (d46e8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d46e0:	681b      	ldr	r3, [r3, #0]
   d46e2:	695b      	ldr	r3, [r3, #20]
   d46e4:	9301      	str	r3, [sp, #4]
   d46e6:	bd08      	pop	{r3, pc}
   d46e8:	00030218 	.word	0x00030218

000d46ec <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d46ec:	b508      	push	{r3, lr}
   d46ee:	4b02      	ldr	r3, [pc, #8]	; (d46f8 <os_mutex_recursive_create+0xc>)
   d46f0:	681b      	ldr	r3, [r3, #0]
   d46f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d46f4:	9301      	str	r3, [sp, #4]
   d46f6:	bd08      	pop	{r3, pc}
   d46f8:	00030248 	.word	0x00030248

000d46fc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d46fc:	b508      	push	{r3, lr}
   d46fe:	4b02      	ldr	r3, [pc, #8]	; (d4708 <os_mutex_recursive_destroy+0xc>)
   d4700:	681b      	ldr	r3, [r3, #0]
   d4702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4704:	9301      	str	r3, [sp, #4]
   d4706:	bd08      	pop	{r3, pc}
   d4708:	00030248 	.word	0x00030248

000d470c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d470c:	b508      	push	{r3, lr}
   d470e:	4b02      	ldr	r3, [pc, #8]	; (d4718 <inet_inet_ntop+0xc>)
   d4710:	681b      	ldr	r3, [r3, #0]
   d4712:	695b      	ldr	r3, [r3, #20]
   d4714:	9301      	str	r3, [sp, #4]
   d4716:	bd08      	pop	{r3, pc}
   d4718:	00030264 	.word	0x00030264

000d471c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d471c:	b508      	push	{r3, lr}
   d471e:	4b02      	ldr	r3, [pc, #8]	; (d4728 <hal_usart_init+0xc>)
   d4720:	681b      	ldr	r3, [r3, #0]
   d4722:	681b      	ldr	r3, [r3, #0]
   d4724:	9301      	str	r3, [sp, #4]
   d4726:	bd08      	pop	{r3, pc}
   d4728:	0003023c 	.word	0x0003023c

000d472c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d472c:	b508      	push	{r3, lr}
   d472e:	4b02      	ldr	r3, [pc, #8]	; (d4738 <hal_usart_write+0xc>)
   d4730:	681b      	ldr	r3, [r3, #0]
   d4732:	68db      	ldr	r3, [r3, #12]
   d4734:	9301      	str	r3, [sp, #4]
   d4736:	bd08      	pop	{r3, pc}
   d4738:	0003023c 	.word	0x0003023c

000d473c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d473c:	b508      	push	{r3, lr}
   d473e:	4b02      	ldr	r3, [pc, #8]	; (d4748 <hal_usart_available+0xc>)
   d4740:	681b      	ldr	r3, [r3, #0]
   d4742:	691b      	ldr	r3, [r3, #16]
   d4744:	9301      	str	r3, [sp, #4]
   d4746:	bd08      	pop	{r3, pc}
   d4748:	0003023c 	.word	0x0003023c

000d474c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d474c:	b508      	push	{r3, lr}
   d474e:	4b02      	ldr	r3, [pc, #8]	; (d4758 <hal_usart_read+0xc>)
   d4750:	681b      	ldr	r3, [r3, #0]
   d4752:	695b      	ldr	r3, [r3, #20]
   d4754:	9301      	str	r3, [sp, #4]
   d4756:	bd08      	pop	{r3, pc}
   d4758:	0003023c 	.word	0x0003023c

000d475c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d475c:	b508      	push	{r3, lr}
   d475e:	4b02      	ldr	r3, [pc, #8]	; (d4768 <hal_usart_peek+0xc>)
   d4760:	681b      	ldr	r3, [r3, #0]
   d4762:	699b      	ldr	r3, [r3, #24]
   d4764:	9301      	str	r3, [sp, #4]
   d4766:	bd08      	pop	{r3, pc}
   d4768:	0003023c 	.word	0x0003023c

000d476c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d476c:	b508      	push	{r3, lr}
   d476e:	4b02      	ldr	r3, [pc, #8]	; (d4778 <hal_usart_flush+0xc>)
   d4770:	681b      	ldr	r3, [r3, #0]
   d4772:	69db      	ldr	r3, [r3, #28]
   d4774:	9301      	str	r3, [sp, #4]
   d4776:	bd08      	pop	{r3, pc}
   d4778:	0003023c 	.word	0x0003023c

000d477c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d477c:	b508      	push	{r3, lr}
   d477e:	4b02      	ldr	r3, [pc, #8]	; (d4788 <hal_usart_is_enabled+0xc>)
   d4780:	681b      	ldr	r3, [r3, #0]
   d4782:	6a1b      	ldr	r3, [r3, #32]
   d4784:	9301      	str	r3, [sp, #4]
   d4786:	bd08      	pop	{r3, pc}
   d4788:	0003023c 	.word	0x0003023c

000d478c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d478c:	b508      	push	{r3, lr}
   d478e:	4b02      	ldr	r3, [pc, #8]	; (d4798 <hal_usart_available_data_for_write+0xc>)
   d4790:	681b      	ldr	r3, [r3, #0]
   d4792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4794:	9301      	str	r3, [sp, #4]
   d4796:	bd08      	pop	{r3, pc}
   d4798:	0003023c 	.word	0x0003023c

000d479c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d479c:	b508      	push	{r3, lr}
   d479e:	4b02      	ldr	r3, [pc, #8]	; (d47a8 <hal_i2c_write+0xc>)
   d47a0:	681b      	ldr	r3, [r3, #0]
   d47a2:	6a1b      	ldr	r3, [r3, #32]
   d47a4:	9301      	str	r3, [sp, #4]
   d47a6:	bd08      	pop	{r3, pc}
   d47a8:	00030228 	.word	0x00030228

000d47ac <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d47ac:	b508      	push	{r3, lr}
   d47ae:	4b02      	ldr	r3, [pc, #8]	; (d47b8 <hal_i2c_available+0xc>)
   d47b0:	681b      	ldr	r3, [r3, #0]
   d47b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d47b4:	9301      	str	r3, [sp, #4]
   d47b6:	bd08      	pop	{r3, pc}
   d47b8:	00030228 	.word	0x00030228

000d47bc <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d47bc:	b508      	push	{r3, lr}
   d47be:	4b02      	ldr	r3, [pc, #8]	; (d47c8 <hal_i2c_read+0xc>)
   d47c0:	681b      	ldr	r3, [r3, #0]
   d47c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d47c4:	9301      	str	r3, [sp, #4]
   d47c6:	bd08      	pop	{r3, pc}
   d47c8:	00030228 	.word	0x00030228

000d47cc <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d47cc:	b508      	push	{r3, lr}
   d47ce:	4b02      	ldr	r3, [pc, #8]	; (d47d8 <hal_i2c_peek+0xc>)
   d47d0:	681b      	ldr	r3, [r3, #0]
   d47d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d47d4:	9301      	str	r3, [sp, #4]
   d47d6:	bd08      	pop	{r3, pc}
   d47d8:	00030228 	.word	0x00030228

000d47dc <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d47dc:	b508      	push	{r3, lr}
   d47de:	4b02      	ldr	r3, [pc, #8]	; (d47e8 <hal_i2c_flush+0xc>)
   d47e0:	681b      	ldr	r3, [r3, #0]
   d47e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d47e4:	9301      	str	r3, [sp, #4]
   d47e6:	bd08      	pop	{r3, pc}
   d47e8:	00030228 	.word	0x00030228

000d47ec <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d47ec:	b508      	push	{r3, lr}
   d47ee:	4b02      	ldr	r3, [pc, #8]	; (d47f8 <hal_i2c_is_enabled+0xc>)
   d47f0:	681b      	ldr	r3, [r3, #0]
   d47f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d47f4:	9301      	str	r3, [sp, #4]
   d47f6:	bd08      	pop	{r3, pc}
   d47f8:	00030228 	.word	0x00030228

000d47fc <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d47fc:	b508      	push	{r3, lr}
   d47fe:	4b02      	ldr	r3, [pc, #8]	; (d4808 <hal_i2c_init+0xc>)
   d4800:	681b      	ldr	r3, [r3, #0]
   d4802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4804:	9301      	str	r3, [sp, #4]
   d4806:	bd08      	pop	{r3, pc}
   d4808:	00030228 	.word	0x00030228

000d480c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d480c:	b508      	push	{r3, lr}
   d480e:	4b02      	ldr	r3, [pc, #8]	; (d4818 <hal_spi_init+0xc>)
   d4810:	681b      	ldr	r3, [r3, #0]
   d4812:	69db      	ldr	r3, [r3, #28]
   d4814:	9301      	str	r3, [sp, #4]
   d4816:	bd08      	pop	{r3, pc}
   d4818:	00030230 	.word	0x00030230

000d481c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d481c:	b508      	push	{r3, lr}
   d481e:	4b02      	ldr	r3, [pc, #8]	; (d4828 <hal_spi_is_enabled+0xc>)
   d4820:	681b      	ldr	r3, [r3, #0]
   d4822:	6a1b      	ldr	r3, [r3, #32]
   d4824:	9301      	str	r3, [sp, #4]
   d4826:	bd08      	pop	{r3, pc}
   d4828:	00030230 	.word	0x00030230

000d482c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d482c:	b508      	push	{r3, lr}
   d482e:	4b02      	ldr	r3, [pc, #8]	; (d4838 <HAL_USB_USART_Init+0xc>)
   d4830:	681b      	ldr	r3, [r3, #0]
   d4832:	681b      	ldr	r3, [r3, #0]
   d4834:	9301      	str	r3, [sp, #4]
   d4836:	bd08      	pop	{r3, pc}
   d4838:	0003024c 	.word	0x0003024c

000d483c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d483c:	b508      	push	{r3, lr}
   d483e:	4b02      	ldr	r3, [pc, #8]	; (d4848 <HAL_USB_USART_Available_Data+0xc>)
   d4840:	681b      	ldr	r3, [r3, #0]
   d4842:	691b      	ldr	r3, [r3, #16]
   d4844:	9301      	str	r3, [sp, #4]
   d4846:	bd08      	pop	{r3, pc}
   d4848:	0003024c 	.word	0x0003024c

000d484c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d484c:	b508      	push	{r3, lr}
   d484e:	4b02      	ldr	r3, [pc, #8]	; (d4858 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4850:	681b      	ldr	r3, [r3, #0]
   d4852:	695b      	ldr	r3, [r3, #20]
   d4854:	9301      	str	r3, [sp, #4]
   d4856:	bd08      	pop	{r3, pc}
   d4858:	0003024c 	.word	0x0003024c

000d485c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d485c:	b508      	push	{r3, lr}
   d485e:	4b02      	ldr	r3, [pc, #8]	; (d4868 <HAL_USB_USART_Receive_Data+0xc>)
   d4860:	681b      	ldr	r3, [r3, #0]
   d4862:	699b      	ldr	r3, [r3, #24]
   d4864:	9301      	str	r3, [sp, #4]
   d4866:	bd08      	pop	{r3, pc}
   d4868:	0003024c 	.word	0x0003024c

000d486c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d486c:	b508      	push	{r3, lr}
   d486e:	4b02      	ldr	r3, [pc, #8]	; (d4878 <HAL_USB_USART_Send_Data+0xc>)
   d4870:	681b      	ldr	r3, [r3, #0]
   d4872:	69db      	ldr	r3, [r3, #28]
   d4874:	9301      	str	r3, [sp, #4]
   d4876:	bd08      	pop	{r3, pc}
   d4878:	0003024c 	.word	0x0003024c

000d487c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d487c:	b508      	push	{r3, lr}
   d487e:	4b02      	ldr	r3, [pc, #8]	; (d4888 <HAL_USB_USART_Flush_Data+0xc>)
   d4880:	681b      	ldr	r3, [r3, #0]
   d4882:	6a1b      	ldr	r3, [r3, #32]
   d4884:	9301      	str	r3, [sp, #4]
   d4886:	bd08      	pop	{r3, pc}
   d4888:	0003024c 	.word	0x0003024c

000d488c <jsmn_init>:
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))

DYNALIB_FN(14, services, jsmn_init, void(jsmn_parser*, void*))
   d488c:	b508      	push	{r3, lr}
   d488e:	4b02      	ldr	r3, [pc, #8]	; (d4898 <jsmn_init+0xc>)
   d4890:	681b      	ldr	r3, [r3, #0]
   d4892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4894:	9301      	str	r3, [sp, #4]
   d4896:	bd08      	pop	{r3, pc}
   d4898:	00030260 	.word	0x00030260

000d489c <jsmn_parse>:
DYNALIB_FN(15, services, jsmn_parse, jsmnerr_t(jsmn_parser*, const char*, size_t, jsmntok_t*, unsigned int, void*))
   d489c:	b508      	push	{r3, lr}
   d489e:	4b02      	ldr	r3, [pc, #8]	; (d48a8 <jsmn_parse+0xc>)
   d48a0:	681b      	ldr	r3, [r3, #0]
   d48a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d48a4:	9301      	str	r3, [sp, #4]
   d48a6:	bd08      	pop	{r3, pc}
   d48a8:	00030260 	.word	0x00030260

000d48ac <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d48ac:	b508      	push	{r3, lr}
   d48ae:	4b02      	ldr	r3, [pc, #8]	; (d48b8 <set_system_mode+0xc>)
   d48b0:	681b      	ldr	r3, [r3, #0]
   d48b2:	685b      	ldr	r3, [r3, #4]
   d48b4:	9301      	str	r3, [sp, #4]
   d48b6:	bd08      	pop	{r3, pc}
   d48b8:	00030220 	.word	0x00030220

000d48bc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d48bc:	b508      	push	{r3, lr}
   d48be:	4b02      	ldr	r3, [pc, #8]	; (d48c8 <system_delay_ms+0xc>)
   d48c0:	681b      	ldr	r3, [r3, #0]
   d48c2:	695b      	ldr	r3, [r3, #20]
   d48c4:	9301      	str	r3, [sp, #4]
   d48c6:	bd08      	pop	{r3, pc}
   d48c8:	00030220 	.word	0x00030220

000d48cc <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d48cc:	b508      	push	{r3, lr}
   d48ce:	4b02      	ldr	r3, [pc, #8]	; (d48d8 <application_thread_current+0xc>)
   d48d0:	681b      	ldr	r3, [r3, #0]
   d48d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d48d4:	9301      	str	r3, [sp, #4]
   d48d6:	bd08      	pop	{r3, pc}
   d48d8:	00030220 	.word	0x00030220

000d48dc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d48dc:	b508      	push	{r3, lr}
   d48de:	4b02      	ldr	r3, [pc, #8]	; (d48e8 <application_thread_invoke+0xc>)
   d48e0:	681b      	ldr	r3, [r3, #0]
   d48e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d48e4:	9301      	str	r3, [sp, #4]
   d48e6:	bd08      	pop	{r3, pc}
   d48e8:	00030220 	.word	0x00030220

000d48ec <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d48ec:	b508      	push	{r3, lr}
   d48ee:	4b03      	ldr	r3, [pc, #12]	; (d48fc <system_ctrl_set_app_request_handler+0x10>)
   d48f0:	681b      	ldr	r3, [r3, #0]
   d48f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d48f6:	9301      	str	r3, [sp, #4]
   d48f8:	bd08      	pop	{r3, pc}
   d48fa:	0000      	.short	0x0000
   d48fc:	00030220 	.word	0x00030220

000d4900 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4900:	b508      	push	{r3, lr}
   d4902:	4b03      	ldr	r3, [pc, #12]	; (d4910 <system_ctrl_set_result+0x10>)
   d4904:	681b      	ldr	r3, [r3, #0]
   d4906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d490a:	9301      	str	r3, [sp, #4]
   d490c:	bd08      	pop	{r3, pc}
   d490e:	0000      	.short	0x0000
   d4910:	00030220 	.word	0x00030220

000d4914 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4914:	b508      	push	{r3, lr}
   d4916:	4b02      	ldr	r3, [pc, #8]	; (d4920 <network_connect+0xc>)
   d4918:	681b      	ldr	r3, [r3, #0]
   d491a:	685b      	ldr	r3, [r3, #4]
   d491c:	9301      	str	r3, [sp, #4]
   d491e:	bd08      	pop	{r3, pc}
   d4920:	00030240 	.word	0x00030240

000d4924 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4924:	b508      	push	{r3, lr}
   d4926:	4b02      	ldr	r3, [pc, #8]	; (d4930 <network_connecting+0xc>)
   d4928:	681b      	ldr	r3, [r3, #0]
   d492a:	689b      	ldr	r3, [r3, #8]
   d492c:	9301      	str	r3, [sp, #4]
   d492e:	bd08      	pop	{r3, pc}
   d4930:	00030240 	.word	0x00030240

000d4934 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4934:	b508      	push	{r3, lr}
   d4936:	4b02      	ldr	r3, [pc, #8]	; (d4940 <network_disconnect+0xc>)
   d4938:	681b      	ldr	r3, [r3, #0]
   d493a:	68db      	ldr	r3, [r3, #12]
   d493c:	9301      	str	r3, [sp, #4]
   d493e:	bd08      	pop	{r3, pc}
   d4940:	00030240 	.word	0x00030240

000d4944 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4944:	b508      	push	{r3, lr}
   d4946:	4b02      	ldr	r3, [pc, #8]	; (d4950 <network_ready+0xc>)
   d4948:	681b      	ldr	r3, [r3, #0]
   d494a:	691b      	ldr	r3, [r3, #16]
   d494c:	9301      	str	r3, [sp, #4]
   d494e:	bd08      	pop	{r3, pc}
   d4950:	00030240 	.word	0x00030240

000d4954 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4954:	b508      	push	{r3, lr}
   d4956:	4b02      	ldr	r3, [pc, #8]	; (d4960 <network_on+0xc>)
   d4958:	681b      	ldr	r3, [r3, #0]
   d495a:	695b      	ldr	r3, [r3, #20]
   d495c:	9301      	str	r3, [sp, #4]
   d495e:	bd08      	pop	{r3, pc}
   d4960:	00030240 	.word	0x00030240

000d4964 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4964:	b508      	push	{r3, lr}
   d4966:	4b02      	ldr	r3, [pc, #8]	; (d4970 <network_off+0xc>)
   d4968:	681b      	ldr	r3, [r3, #0]
   d496a:	699b      	ldr	r3, [r3, #24]
   d496c:	9301      	str	r3, [sp, #4]
   d496e:	bd08      	pop	{r3, pc}
   d4970:	00030240 	.word	0x00030240

000d4974 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4974:	b508      	push	{r3, lr}
   d4976:	4b02      	ldr	r3, [pc, #8]	; (d4980 <network_listen+0xc>)
   d4978:	681b      	ldr	r3, [r3, #0]
   d497a:	69db      	ldr	r3, [r3, #28]
   d497c:	9301      	str	r3, [sp, #4]
   d497e:	bd08      	pop	{r3, pc}
   d4980:	00030240 	.word	0x00030240

000d4984 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4984:	b508      	push	{r3, lr}
   d4986:	4b02      	ldr	r3, [pc, #8]	; (d4990 <network_listening+0xc>)
   d4988:	681b      	ldr	r3, [r3, #0]
   d498a:	6a1b      	ldr	r3, [r3, #32]
   d498c:	9301      	str	r3, [sp, #4]
   d498e:	bd08      	pop	{r3, pc}
   d4990:	00030240 	.word	0x00030240

000d4994 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4994:	b508      	push	{r3, lr}
   d4996:	4b02      	ldr	r3, [pc, #8]	; (d49a0 <network_set_listen_timeout+0xc>)
   d4998:	681b      	ldr	r3, [r3, #0]
   d499a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d499c:	9301      	str	r3, [sp, #4]
   d499e:	bd08      	pop	{r3, pc}
   d49a0:	00030240 	.word	0x00030240

000d49a4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d49a4:	b508      	push	{r3, lr}
   d49a6:	4b02      	ldr	r3, [pc, #8]	; (d49b0 <network_get_listen_timeout+0xc>)
   d49a8:	681b      	ldr	r3, [r3, #0]
   d49aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d49ac:	9301      	str	r3, [sp, #4]
   d49ae:	bd08      	pop	{r3, pc}
   d49b0:	00030240 	.word	0x00030240

000d49b4 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d49b4:	b508      	push	{r3, lr}
   d49b6:	4b02      	ldr	r3, [pc, #8]	; (d49c0 <spark_variable+0xc>)
   d49b8:	681b      	ldr	r3, [r3, #0]
   d49ba:	681b      	ldr	r3, [r3, #0]
   d49bc:	9301      	str	r3, [sp, #4]
   d49be:	bd08      	pop	{r3, pc}
   d49c0:	00030244 	.word	0x00030244

000d49c4 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d49c4:	b508      	push	{r3, lr}
   d49c6:	4b02      	ldr	r3, [pc, #8]	; (d49d0 <spark_function+0xc>)
   d49c8:	681b      	ldr	r3, [r3, #0]
   d49ca:	685b      	ldr	r3, [r3, #4]
   d49cc:	9301      	str	r3, [sp, #4]
   d49ce:	bd08      	pop	{r3, pc}
   d49d0:	00030244 	.word	0x00030244

000d49d4 <spark_cloud_flag_connected>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d49d4:	b508      	push	{r3, lr}
   d49d6:	4b02      	ldr	r3, [pc, #8]	; (d49e0 <spark_cloud_flag_connected+0xc>)
   d49d8:	681b      	ldr	r3, [r3, #0]
   d49da:	695b      	ldr	r3, [r3, #20]
   d49dc:	9301      	str	r3, [sp, #4]
   d49de:	bd08      	pop	{r3, pc}
   d49e0:	00030244 	.word	0x00030244

000d49e4 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d49e4:	b508      	push	{r3, lr}
   d49e6:	4b02      	ldr	r3, [pc, #8]	; (d49f0 <spark_send_event+0xc>)
   d49e8:	681b      	ldr	r3, [r3, #0]
   d49ea:	6a1b      	ldr	r3, [r3, #32]
   d49ec:	9301      	str	r3, [sp, #4]
   d49ee:	bd08      	pop	{r3, pc}
   d49f0:	00030244 	.word	0x00030244

000d49f4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d49f4:	b508      	push	{r3, lr}
   d49f6:	4b02      	ldr	r3, [pc, #8]	; (d4a00 <spark_set_random_seed_from_cloud_handler+0xc>)
   d49f8:	681b      	ldr	r3, [r3, #0]
   d49fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d49fc:	9301      	str	r3, [sp, #4]
   d49fe:	bd08      	pop	{r3, pc}
   d4a00:	00030244 	.word	0x00030244

000d4a04 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4a04:	b508      	push	{r3, lr}
   d4a06:	4b02      	ldr	r3, [pc, #8]	; (d4a10 <malloc+0xc>)
   d4a08:	681b      	ldr	r3, [r3, #0]
   d4a0a:	681b      	ldr	r3, [r3, #0]
   d4a0c:	9301      	str	r3, [sp, #4]
   d4a0e:	bd08      	pop	{r3, pc}
   d4a10:	0003021c 	.word	0x0003021c

000d4a14 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4a14:	b508      	push	{r3, lr}
   d4a16:	4b02      	ldr	r3, [pc, #8]	; (d4a20 <free+0xc>)
   d4a18:	681b      	ldr	r3, [r3, #0]
   d4a1a:	685b      	ldr	r3, [r3, #4]
   d4a1c:	9301      	str	r3, [sp, #4]
   d4a1e:	bd08      	pop	{r3, pc}
   d4a20:	0003021c 	.word	0x0003021c

000d4a24 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4a24:	b508      	push	{r3, lr}
   d4a26:	4b02      	ldr	r3, [pc, #8]	; (d4a30 <realloc+0xc>)
   d4a28:	681b      	ldr	r3, [r3, #0]
   d4a2a:	689b      	ldr	r3, [r3, #8]
   d4a2c:	9301      	str	r3, [sp, #4]
   d4a2e:	bd08      	pop	{r3, pc}
   d4a30:	0003021c 	.word	0x0003021c

000d4a34 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4a34:	b508      	push	{r3, lr}
   d4a36:	4b02      	ldr	r3, [pc, #8]	; (d4a40 <abort+0xc>)
   d4a38:	681b      	ldr	r3, [r3, #0]
   d4a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4a3c:	9301      	str	r3, [sp, #4]
   d4a3e:	bd08      	pop	{r3, pc}
   d4a40:	0003021c 	.word	0x0003021c

000d4a44 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4a44:	b508      	push	{r3, lr}
   d4a46:	4b02      	ldr	r3, [pc, #8]	; (d4a50 <_malloc_r+0xc>)
   d4a48:	681b      	ldr	r3, [r3, #0]
   d4a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a4c:	9301      	str	r3, [sp, #4]
   d4a4e:	bd08      	pop	{r3, pc}
   d4a50:	0003021c 	.word	0x0003021c

000d4a54 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4a54:	b508      	push	{r3, lr}
   d4a56:	4b02      	ldr	r3, [pc, #8]	; (d4a60 <newlib_impure_ptr_callback+0xc>)
   d4a58:	681b      	ldr	r3, [r3, #0]
   d4a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4a5c:	9301      	str	r3, [sp, #4]
   d4a5e:	bd08      	pop	{r3, pc}
   d4a60:	0003021c 	.word	0x0003021c

000d4a64 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4a64:	2200      	movs	r2, #0
   d4a66:	6840      	ldr	r0, [r0, #4]
   d4a68:	4611      	mov	r1, r2
   d4a6a:	f7ff bf8b 	b.w	d4984 <network_listening>

000d4a6e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4a6e:	2200      	movs	r2, #0
   d4a70:	6840      	ldr	r0, [r0, #4]
   d4a72:	4611      	mov	r1, r2
   d4a74:	f7ff bf96 	b.w	d49a4 <network_get_listen_timeout>

000d4a78 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4a78:	6840      	ldr	r0, [r0, #4]
   d4a7a:	2200      	movs	r2, #0
   d4a7c:	f7ff bf8a 	b.w	d4994 <network_set_listen_timeout>

000d4a80 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4a80:	6840      	ldr	r0, [r0, #4]
   d4a82:	2200      	movs	r2, #0
   d4a84:	f081 0101 	eor.w	r1, r1, #1
   d4a88:	f7ff bf74 	b.w	d4974 <network_listen>

000d4a8c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4a8c:	2300      	movs	r3, #0
   d4a8e:	6840      	ldr	r0, [r0, #4]
   d4a90:	461a      	mov	r2, r3
   d4a92:	4619      	mov	r1, r3
   d4a94:	f7ff bf66 	b.w	d4964 <network_off>

000d4a98 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4a98:	2300      	movs	r3, #0
   d4a9a:	6840      	ldr	r0, [r0, #4]
   d4a9c:	461a      	mov	r2, r3
   d4a9e:	4619      	mov	r1, r3
   d4aa0:	f7ff bf58 	b.w	d4954 <network_on>

000d4aa4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4aa4:	2200      	movs	r2, #0
   d4aa6:	6840      	ldr	r0, [r0, #4]
   d4aa8:	4611      	mov	r1, r2
   d4aaa:	f7ff bf4b 	b.w	d4944 <network_ready>

000d4aae <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4aae:	2200      	movs	r2, #0
   d4ab0:	6840      	ldr	r0, [r0, #4]
   d4ab2:	4611      	mov	r1, r2
   d4ab4:	f7ff bf36 	b.w	d4924 <network_connecting>

000d4ab8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4ab8:	6840      	ldr	r0, [r0, #4]
   d4aba:	2200      	movs	r2, #0
   d4abc:	2102      	movs	r1, #2
   d4abe:	f7ff bf39 	b.w	d4934 <network_disconnect>

000d4ac2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4ac2:	2300      	movs	r3, #0
   d4ac4:	6840      	ldr	r0, [r0, #4]
   d4ac6:	461a      	mov	r2, r3
   d4ac8:	f7ff bf24 	b.w	d4914 <network_connect>

000d4acc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4acc:	4b02      	ldr	r3, [pc, #8]	; (d4ad8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4ace:	2203      	movs	r2, #3
   d4ad0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4ad2:	4a02      	ldr	r2, [pc, #8]	; (d4adc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4ad4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4ad6:	4770      	bx	lr
   d4ad8:	2003e644 	.word	0x2003e644
   d4adc:	000d61e4 	.word	0x000d61e4

000d4ae0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d4ae0:	b510      	push	{r4, lr}
   d4ae2:	4604      	mov	r4, r0
   d4ae4:	4608      	mov	r0, r1
{
    _spi = spi;
   d4ae6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d4ae8:	f7ff fe90 	bl	d480c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4aec:	2300      	movs	r3, #0
   d4aee:	6063      	str	r3, [r4, #4]
}
   d4af0:	4620      	mov	r0, r4
   d4af2:	bd10      	pop	{r4, pc}

000d4af4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4af4:	b510      	push	{r4, lr}
   d4af6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4af8:	6800      	ldr	r0, [r0, #0]
   d4afa:	b118      	cbz	r0, d4b04 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d4afc:	f7ff ff8a 	bl	d4a14 <free>
            wakeupSource_ = nullptr;
   d4b00:	2300      	movs	r3, #0
   d4b02:	6023      	str	r3, [r4, #0]
        }
    }
   d4b04:	bd10      	pop	{r4, pc}

000d4b06 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4b06:	b510      	push	{r4, lr}
   d4b08:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d4b0a:	f7ff fff3 	bl	d4af4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d4b0e:	4620      	mov	r0, r4
   d4b10:	bd10      	pop	{r4, pc}
	...

000d4b14 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4b14:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4b16:	4b09      	ldr	r3, [pc, #36]	; (d4b3c <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d4b18:	4c09      	ldr	r4, [pc, #36]	; (d4b40 <_GLOBAL__sub_I_System+0x2c>)
   d4b1a:	2202      	movs	r2, #2
   d4b1c:	2000      	movs	r0, #0
   d4b1e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d4b20:	4b08      	ldr	r3, [pc, #32]	; (d4b44 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d4b22:	6020      	str	r0, [r4, #0]
   d4b24:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d4b26:	71a0      	strb	r0, [r4, #6]
   d4b28:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4b2a:	f7ff febf 	bl	d48ac <set_system_mode>
SystemClass System;
   d4b2e:	4620      	mov	r0, r4
   d4b30:	4a05      	ldr	r2, [pc, #20]	; (d4b48 <_GLOBAL__sub_I_System+0x34>)
   d4b32:	4906      	ldr	r1, [pc, #24]	; (d4b4c <_GLOBAL__sub_I_System+0x38>)
   d4b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d4b38:	f001 ba14 	b.w	d5f64 <__aeabi_atexit>
   d4b3c:	2003e658 	.word	0x2003e658
   d4b40:	2003e64c 	.word	0x2003e64c
   d4b44:	ffff0000 	.word	0xffff0000
   d4b48:	2003e634 	.word	0x2003e634
   d4b4c:	000d4b07 	.word	0x000d4b07

000d4b50 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4b50:	b510      	push	{r4, lr}
   d4b52:	4604      	mov	r4, r0
{
	free(buffer);
   d4b54:	6800      	ldr	r0, [r0, #0]
   d4b56:	f7ff ff5d 	bl	d4a14 <free>
}
   d4b5a:	4620      	mov	r0, r4
   d4b5c:	bd10      	pop	{r4, pc}

000d4b5e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4b5e:	b510      	push	{r4, lr}
   d4b60:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4b62:	6800      	ldr	r0, [r0, #0]
   d4b64:	b108      	cbz	r0, d4b6a <_ZN6String10invalidateEv+0xc>
   d4b66:	f7ff ff55 	bl	d4a14 <free>
	buffer = NULL;
   d4b6a:	2300      	movs	r3, #0
	capacity = len = 0;
   d4b6c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d4b70:	6023      	str	r3, [r4, #0]
}
   d4b72:	bd10      	pop	{r4, pc}

000d4b74 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4b74:	b538      	push	{r3, r4, r5, lr}
   d4b76:	4604      	mov	r4, r0
   d4b78:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4b7a:	6800      	ldr	r0, [r0, #0]
   d4b7c:	3101      	adds	r1, #1
   d4b7e:	f7ff ff51 	bl	d4a24 <realloc>
	if (newbuffer) {
   d4b82:	b110      	cbz	r0, d4b8a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4b84:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d4b88:	2001      	movs	r0, #1
	}
	return 0;
}
   d4b8a:	bd38      	pop	{r3, r4, r5, pc}

000d4b8c <_ZN6String7reserveEj>:
{
   d4b8c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4b8e:	6803      	ldr	r3, [r0, #0]
{
   d4b90:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4b92:	b123      	cbz	r3, d4b9e <_ZN6String7reserveEj+0x12>
   d4b94:	6843      	ldr	r3, [r0, #4]
   d4b96:	428b      	cmp	r3, r1
   d4b98:	d301      	bcc.n	d4b9e <_ZN6String7reserveEj+0x12>
   d4b9a:	2001      	movs	r0, #1
}
   d4b9c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d4b9e:	4620      	mov	r0, r4
   d4ba0:	f7ff ffe8 	bl	d4b74 <_ZN6String12changeBufferEj>
   d4ba4:	2800      	cmp	r0, #0
   d4ba6:	d0f9      	beq.n	d4b9c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d4ba8:	68a3      	ldr	r3, [r4, #8]
   d4baa:	2b00      	cmp	r3, #0
   d4bac:	d1f5      	bne.n	d4b9a <_ZN6String7reserveEj+0xe>
   d4bae:	6822      	ldr	r2, [r4, #0]
   d4bb0:	7013      	strb	r3, [r2, #0]
   d4bb2:	e7f2      	b.n	d4b9a <_ZN6String7reserveEj+0xe>

000d4bb4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4bb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4bb6:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d4bb8:	4611      	mov	r1, r2
   d4bba:	9201      	str	r2, [sp, #4]
{
   d4bbc:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d4bbe:	f7ff ffe5 	bl	d4b8c <_ZN6String7reserveEj>
   d4bc2:	9a01      	ldr	r2, [sp, #4]
   d4bc4:	b928      	cbnz	r0, d4bd2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d4bc6:	4620      	mov	r0, r4
   d4bc8:	f7ff ffc9 	bl	d4b5e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d4bcc:	4620      	mov	r0, r4
   d4bce:	b003      	add	sp, #12
   d4bd0:	bd30      	pop	{r4, r5, pc}
	len = length;
   d4bd2:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d4bd4:	4629      	mov	r1, r5
   d4bd6:	6820      	ldr	r0, [r4, #0]
   d4bd8:	f001 f9e0 	bl	d5f9c <memcpy>
	buffer[len] = 0;
   d4bdc:	6822      	ldr	r2, [r4, #0]
   d4bde:	68a3      	ldr	r3, [r4, #8]
   d4be0:	2100      	movs	r1, #0
   d4be2:	54d1      	strb	r1, [r2, r3]
	return *this;
   d4be4:	e7f2      	b.n	d4bcc <_ZN6String4copyEPKcj+0x18>

000d4be6 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d4be6:	2300      	movs	r3, #0
String::String(const char *cstr)
   d4be8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d4bea:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d4bee:	4604      	mov	r4, r0
	len = 0;
   d4bf0:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4bf2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d4bf4:	b141      	cbz	r1, d4c08 <_ZN6StringC1EPKc+0x22>
   d4bf6:	4608      	mov	r0, r1
   d4bf8:	9101      	str	r1, [sp, #4]
   d4bfa:	f001 fa4a 	bl	d6092 <strlen>
   d4bfe:	9901      	ldr	r1, [sp, #4]
   d4c00:	4602      	mov	r2, r0
   d4c02:	4620      	mov	r0, r4
   d4c04:	f7ff ffd6 	bl	d4bb4 <_ZN6String4copyEPKcj>
}
   d4c08:	4620      	mov	r0, r4
   d4c0a:	b002      	add	sp, #8
   d4c0c:	bd10      	pop	{r4, pc}

000d4c0e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d4c0e:	4288      	cmp	r0, r1
{
   d4c10:	b510      	push	{r4, lr}
   d4c12:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d4c14:	d005      	beq.n	d4c22 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d4c16:	680b      	ldr	r3, [r1, #0]
   d4c18:	b12b      	cbz	r3, d4c26 <_ZN6StringaSERKS_+0x18>
   d4c1a:	688a      	ldr	r2, [r1, #8]
   d4c1c:	4619      	mov	r1, r3
   d4c1e:	f7ff ffc9 	bl	d4bb4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d4c22:	4620      	mov	r0, r4
   d4c24:	bd10      	pop	{r4, pc}
	else invalidate();
   d4c26:	f7ff ff9a 	bl	d4b5e <_ZN6String10invalidateEv>
   d4c2a:	e7fa      	b.n	d4c22 <_ZN6StringaSERKS_+0x14>

000d4c2c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d4c2c:	b510      	push	{r4, lr}
	buffer = NULL;
   d4c2e:	2300      	movs	r3, #0
String::String(const String &value)
   d4c30:	4604      	mov	r4, r0
	capacity = 0;
   d4c32:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d4c36:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4c38:	7303      	strb	r3, [r0, #12]
	*this = value;
   d4c3a:	f7ff ffe8 	bl	d4c0e <_ZN6StringaSERKS_>
}
   d4c3e:	4620      	mov	r0, r4
   d4c40:	bd10      	pop	{r4, pc}

000d4c42 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d4c42:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d4c44:	6882      	ldr	r2, [r0, #8]
   d4c46:	b93a      	cbnz	r2, d4c58 <_ZNK6String6equalsEPKc+0x16>
   d4c48:	b121      	cbz	r1, d4c54 <_ZNK6String6equalsEPKc+0x12>
   d4c4a:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d4c4c:	fab0 f080 	clz	r0, r0
   d4c50:	0940      	lsrs	r0, r0, #5
   d4c52:	e000      	b.n	d4c56 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d4c54:	2001      	movs	r0, #1
}
   d4c56:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d4c58:	6800      	ldr	r0, [r0, #0]
   d4c5a:	b909      	cbnz	r1, d4c60 <_ZNK6String6equalsEPKc+0x1e>
   d4c5c:	7800      	ldrb	r0, [r0, #0]
   d4c5e:	e7f5      	b.n	d4c4c <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d4c60:	f001 f9f0 	bl	d6044 <strcmp>
   d4c64:	e7f2      	b.n	d4c4c <_ZNK6String6equalsEPKc+0xa>

000d4c66 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4c66:	b510      	push	{r4, lr}
   d4c68:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4c6a:	6800      	ldr	r0, [r0, #0]
   d4c6c:	b108      	cbz	r0, d4c72 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4c6e:	f7ff fd45 	bl	d46fc <os_mutex_recursive_destroy>
    }
   d4c72:	4620      	mov	r0, r4
   d4c74:	bd10      	pop	{r4, pc}
	...

000d4c78 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4c78:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d4c7a:	4c06      	ldr	r4, [pc, #24]	; (d4c94 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4c7c:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d4c7e:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d4c80:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d4c82:	f7ff fd33 	bl	d46ec <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d4c86:	4620      	mov	r0, r4
   d4c88:	4a03      	ldr	r2, [pc, #12]	; (d4c98 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4c8a:	4904      	ldr	r1, [pc, #16]	; (d4c9c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d4c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d4c90:	f001 b968 	b.w	d5f64 <__aeabi_atexit>
   d4c94:	2003e65c 	.word	0x2003e65c
   d4c98:	2003e634 	.word	0x2003e634
   d4c9c:	000d4c67 	.word	0x000d4c67

000d4ca0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4ca2:	4606      	mov	r6, r0
   d4ca4:	460d      	mov	r5, r1
  size_t n = 0;
   d4ca6:	188f      	adds	r7, r1, r2
   d4ca8:	2400      	movs	r4, #0
  while (size--) {
   d4caa:	42bd      	cmp	r5, r7
   d4cac:	d00c      	beq.n	d4cc8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4cae:	6833      	ldr	r3, [r6, #0]
   d4cb0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4cb4:	689b      	ldr	r3, [r3, #8]
   d4cb6:	4630      	mov	r0, r6
   d4cb8:	4798      	blx	r3
     if (chunk>=0)
   d4cba:	1e03      	subs	r3, r0, #0
   d4cbc:	db01      	blt.n	d4cc2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4cbe:	441c      	add	r4, r3
  while (size--) {
   d4cc0:	e7f3      	b.n	d4caa <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4cc2:	2c00      	cmp	r4, #0
   d4cc4:	bf08      	it	eq
   d4cc6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d4cc8:	4620      	mov	r0, r4
   d4cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4ccc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4ccc:	b513      	push	{r0, r1, r4, lr}
   d4cce:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d4cd0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d4cd2:	b159      	cbz	r1, d4cec <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d4cd4:	9101      	str	r1, [sp, #4]
   d4cd6:	f001 f9dc 	bl	d6092 <strlen>
   d4cda:	6823      	ldr	r3, [r4, #0]
   d4cdc:	9901      	ldr	r1, [sp, #4]
   d4cde:	68db      	ldr	r3, [r3, #12]
   d4ce0:	4602      	mov	r2, r0
   d4ce2:	4620      	mov	r0, r4
    }
   d4ce4:	b002      	add	sp, #8
   d4ce6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d4cea:	4718      	bx	r3
    }
   d4cec:	b002      	add	sp, #8
   d4cee:	bd10      	pop	{r4, pc}

000d4cf0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4cf0:	6803      	ldr	r3, [r0, #0]
   d4cf2:	689b      	ldr	r3, [r3, #8]
   d4cf4:	4718      	bx	r3

000d4cf6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4cf6:	b530      	push	{r4, r5, lr}
   d4cf8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4cfa:	2300      	movs	r3, #0
   d4cfc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4d00:	2a01      	cmp	r2, #1
   d4d02:	bf98      	it	ls
   d4d04:	220a      	movls	r2, #10
   d4d06:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d4d08:	460d      	mov	r5, r1
   d4d0a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d4d0e:	fb01 5312 	mls	r3, r1, r2, r5
   d4d12:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4d16:	2b09      	cmp	r3, #9
   d4d18:	bf94      	ite	ls
   d4d1a:	3330      	addls	r3, #48	; 0x30
   d4d1c:	3337      	addhi	r3, #55	; 0x37
   d4d1e:	b2db      	uxtb	r3, r3
  } while(n);
   d4d20:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4d22:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d4d26:	d9ef      	bls.n	d4d08 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4d28:	4621      	mov	r1, r4
   d4d2a:	f7ff ffcf 	bl	d4ccc <_ZN5Print5writeEPKc>
}
   d4d2e:	b00b      	add	sp, #44	; 0x2c
   d4d30:	bd30      	pop	{r4, r5, pc}
	...

000d4d34 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4d34:	4b01      	ldr	r3, [pc, #4]	; (d4d3c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4d36:	4a02      	ldr	r2, [pc, #8]	; (d4d40 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4d38:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d4d3a:	4770      	bx	lr
   d4d3c:	2003e660 	.word	0x2003e660
   d4d40:	000d6210 	.word	0x000d6210

000d4d44 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4d44:	4b02      	ldr	r3, [pc, #8]	; (d4d50 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4d46:	681a      	ldr	r2, [r3, #0]
   d4d48:	4b02      	ldr	r3, [pc, #8]	; (d4d54 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4d4a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d4d4c:	4770      	bx	lr
   d4d4e:	bf00      	nop
   d4d50:	2003e5cc 	.word	0x2003e5cc
   d4d54:	2003e664 	.word	0x2003e664

000d4d58 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4d58:	2100      	movs	r1, #0
   d4d5a:	f7ff bdaf 	b.w	d48bc <system_delay_ms>

000d4d5e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4d5e:	b510      	push	{r4, lr}
   d4d60:	4604      	mov	r4, r0
   d4d62:	f7ff f9e0 	bl	d4126 <_ZNSt14_Function_baseD1Ev>
   d4d66:	4620      	mov	r0, r4
   d4d68:	bd10      	pop	{r4, pc}

000d4d6a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d4d6a:	b513      	push	{r0, r1, r4, lr}
   d4d6c:	460b      	mov	r3, r1
   d4d6e:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4d70:	e9d0 0100 	ldrd	r0, r1, [r0]
   d4d74:	466c      	mov	r4, sp
   d4d76:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4d7a:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4d7e:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4d82:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4d86:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4d8a:	b002      	add	sp, #8
   d4d8c:	bd10      	pop	{r4, pc}
	...

000d4d90 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d4d90:	4803      	ldr	r0, [pc, #12]	; (d4da0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4d92:	4a04      	ldr	r2, [pc, #16]	; (d4da4 <_GLOBAL__sub_I_RGB+0x14>)
   d4d94:	4904      	ldr	r1, [pc, #16]	; (d4da8 <_GLOBAL__sub_I_RGB+0x18>)
   d4d96:	2300      	movs	r3, #0
   d4d98:	6083      	str	r3, [r0, #8]
   d4d9a:	f001 b8e3 	b.w	d5f64 <__aeabi_atexit>
   d4d9e:	bf00      	nop
   d4da0:	2003e668 	.word	0x2003e668
   d4da4:	2003e634 	.word	0x2003e634
   d4da8:	000d4d5f 	.word	0x000d4d5f

000d4dac <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d4dac:	4b01      	ldr	r3, [pc, #4]	; (d4db4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d4dae:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d4db0:	4770      	bx	lr
   d4db2:	bf00      	nop
   d4db4:	2003e5d0 	.word	0x2003e5d0

000d4db8 <serialEventRun>:
{
   d4db8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4dba:	4b0b      	ldr	r3, [pc, #44]	; (d4de8 <serialEventRun+0x30>)
   d4dbc:	b143      	cbz	r3, d4dd0 <serialEventRun+0x18>
   d4dbe:	f000 fc29 	bl	d5614 <_Z16_fetch_usbserialv>
   d4dc2:	6803      	ldr	r3, [r0, #0]
   d4dc4:	691b      	ldr	r3, [r3, #16]
   d4dc6:	4798      	blx	r3
   d4dc8:	2800      	cmp	r0, #0
   d4dca:	dd01      	ble.n	d4dd0 <serialEventRun+0x18>
        serialEvent();
   d4dcc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d4dd0:	4b06      	ldr	r3, [pc, #24]	; (d4dec <serialEventRun+0x34>)
   d4dd2:	b143      	cbz	r3, d4de6 <serialEventRun+0x2e>
   d4dd4:	f000 fc9c 	bl	d5710 <_Z22__fetch_global_Serial1v>
   d4dd8:	6803      	ldr	r3, [r0, #0]
   d4dda:	691b      	ldr	r3, [r3, #16]
   d4ddc:	4798      	blx	r3
   d4dde:	2800      	cmp	r0, #0
   d4de0:	dd01      	ble.n	d4de6 <serialEventRun+0x2e>
        serialEvent1();
   d4de2:	f3af 8000 	nop.w
}
   d4de6:	bd08      	pop	{r3, pc}
	...

000d4df0 <_post_loop>:
{
   d4df0:	b508      	push	{r3, lr}
	serialEventRun();
   d4df2:	f7ff ffe1 	bl	d4db8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4df6:	f7ff fc71 	bl	d46dc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4dfa:	4b01      	ldr	r3, [pc, #4]	; (d4e00 <_post_loop+0x10>)
   d4dfc:	6018      	str	r0, [r3, #0]
}
   d4dfe:	bd08      	pop	{r3, pc}
   d4e00:	2003e7d4 	.word	0x2003e7d4

000d4e04 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4e04:	4802      	ldr	r0, [pc, #8]	; (d4e10 <_Z33system_initialize_user_backup_ramv+0xc>)
   d4e06:	4a03      	ldr	r2, [pc, #12]	; (d4e14 <_Z33system_initialize_user_backup_ramv+0x10>)
   d4e08:	4903      	ldr	r1, [pc, #12]	; (d4e18 <_Z33system_initialize_user_backup_ramv+0x14>)
   d4e0a:	1a12      	subs	r2, r2, r0
   d4e0c:	f001 b8c6 	b.w	d5f9c <memcpy>
   d4e10:	2003f400 	.word	0x2003f400
   d4e14:	2003f404 	.word	0x2003f404
   d4e18:	000d63a0 	.word	0x000d63a0

000d4e1c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4e1c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4e1e:	2300      	movs	r3, #0
   d4e20:	9300      	str	r3, [sp, #0]
   d4e22:	461a      	mov	r2, r3
   d4e24:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4e28:	f7ff fd6a 	bl	d4900 <system_ctrl_set_result>
}
   d4e2c:	b003      	add	sp, #12
   d4e2e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4e34 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d4e34:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4e36:	8843      	ldrh	r3, [r0, #2]
   d4e38:	2b0a      	cmp	r3, #10
   d4e3a:	d008      	beq.n	d4e4e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4e3c:	2b50      	cmp	r3, #80	; 0x50
   d4e3e:	d10b      	bne.n	d4e58 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d4e40:	4b09      	ldr	r3, [pc, #36]	; (d4e68 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4e42:	681b      	ldr	r3, [r3, #0]
   d4e44:	b14b      	cbz	r3, d4e5a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d4e46:	b003      	add	sp, #12
   d4e48:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d4e4c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d4e4e:	f7ff ffe5 	bl	d4e1c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d4e52:	b003      	add	sp, #12
   d4e54:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4e58:	2300      	movs	r3, #0
   d4e5a:	9300      	str	r3, [sp, #0]
   d4e5c:	461a      	mov	r2, r3
   d4e5e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4e62:	f7ff fd4d 	bl	d4900 <system_ctrl_set_result>
}
   d4e66:	e7f4      	b.n	d4e52 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d4e68:	2003e67c 	.word	0x2003e67c

000d4e6c <module_user_init_hook>:
{
   d4e6c:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4e6e:	4c12      	ldr	r4, [pc, #72]	; (d4eb8 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4e70:	4812      	ldr	r0, [pc, #72]	; (d4ebc <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4e72:	4d13      	ldr	r5, [pc, #76]	; (d4ec0 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4e74:	2100      	movs	r1, #0
   d4e76:	f7ff fded 	bl	d4a54 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4e7a:	6823      	ldr	r3, [r4, #0]
   d4e7c:	42ab      	cmp	r3, r5
   d4e7e:	4b11      	ldr	r3, [pc, #68]	; (d4ec4 <module_user_init_hook+0x58>)
   d4e80:	bf0c      	ite	eq
   d4e82:	2201      	moveq	r2, #1
   d4e84:	2200      	movne	r2, #0
   d4e86:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4e88:	d002      	beq.n	d4e90 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d4e8a:	f7ff ffbb 	bl	d4e04 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4e8e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4e90:	f7ff fc1c 	bl	d46cc <HAL_RNG_GetRandomNumber>
   d4e94:	4604      	mov	r4, r0
    srand(seed);
   d4e96:	f001 f8b1 	bl	d5ffc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4e9a:	4b0b      	ldr	r3, [pc, #44]	; (d4ec8 <module_user_init_hook+0x5c>)
   d4e9c:	b113      	cbz	r3, d4ea4 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d4e9e:	4620      	mov	r0, r4
   d4ea0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4ea4:	2100      	movs	r1, #0
   d4ea6:	4808      	ldr	r0, [pc, #32]	; (d4ec8 <module_user_init_hook+0x5c>)
   d4ea8:	f7ff fda4 	bl	d49f4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d4eac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4eb0:	4806      	ldr	r0, [pc, #24]	; (d4ecc <module_user_init_hook+0x60>)
   d4eb2:	2100      	movs	r1, #0
   d4eb4:	f7ff bd1a 	b.w	d48ec <system_ctrl_set_app_request_handler>
   d4eb8:	2003f400 	.word	0x2003f400
   d4ebc:	000d4dad 	.word	0x000d4dad
   d4ec0:	9a271c1e 	.word	0x9a271c1e
   d4ec4:	2003e678 	.word	0x2003e678
   d4ec8:	00000000 	.word	0x00000000
   d4ecc:	000d4e35 	.word	0x000d4e35

000d4ed0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4ed0:	4770      	bx	lr

000d4ed2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d4ed2:	2000      	movs	r0, #0
   d4ed4:	4770      	bx	lr

000d4ed6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4ed6:	b510      	push	{r4, lr}
   d4ed8:	2110      	movs	r1, #16
   d4eda:	4604      	mov	r4, r0
   d4edc:	f001 f847 	bl	d5f6e <_ZdlPvj>
   d4ee0:	4620      	mov	r0, r4
   d4ee2:	bd10      	pop	{r4, pc}

000d4ee4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d4ee4:	b508      	push	{r3, lr}
      { delete this; }
   d4ee6:	f7ff fff6 	bl	d4ed6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4eea:	bd08      	pop	{r3, pc}

000d4eec <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4eec:	b530      	push	{r4, r5, lr}
        type_(type) {
   d4eee:	2200      	movs	r2, #0
   d4ef0:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d4ef4:	6002      	str	r2, [r0, #0]
   d4ef6:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d4ef8:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4efa:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d4efc:	680c      	ldr	r4, [r1, #0]
   d4efe:	8085      	strh	r5, [r0, #4]
   d4f00:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f02:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d4f04:	bd30      	pop	{r4, r5, pc}

000d4f06 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4f06:	b510      	push	{r4, lr}
   d4f08:	4604      	mov	r4, r0
    free((void*)msg_);
   d4f0a:	6800      	ldr	r0, [r0, #0]
   d4f0c:	f7ff fd82 	bl	d4a14 <free>
}
   d4f10:	4620      	mov	r0, r4
   d4f12:	bd10      	pop	{r4, pc}

000d4f14 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d4f14:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4f16:	68c4      	ldr	r4, [r0, #12]
   d4f18:	b1f4      	cbz	r4, d4f58 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d4f1a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4f1c:	2b02      	cmp	r3, #2
   d4f1e:	d103      	bne.n	d4f28 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d4f20:	f104 000c 	add.w	r0, r4, #12
   d4f24:	f7ff ffef 	bl	d4f06 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d4f28:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d4f2a:	b135      	cbz	r5, d4f3a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d4f2c:	4628      	mov	r0, r5
   d4f2e:	f7ff f8fa 	bl	d4126 <_ZNSt14_Function_baseD1Ev>
   d4f32:	2110      	movs	r1, #16
   d4f34:	4628      	mov	r0, r5
   d4f36:	f001 f81a 	bl	d5f6e <_ZdlPvj>
   d4f3a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4f3c:	b135      	cbz	r5, d4f4c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d4f3e:	4628      	mov	r0, r5
   d4f40:	f7ff f8f1 	bl	d4126 <_ZNSt14_Function_baseD1Ev>
   d4f44:	2110      	movs	r1, #16
   d4f46:	4628      	mov	r0, r5
   d4f48:	f001 f811 	bl	d5f6e <_ZdlPvj>
   d4f4c:	4620      	mov	r0, r4
   d4f4e:	2114      	movs	r1, #20
   d4f50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4f54:	f001 b80b 	b.w	d5f6e <_ZdlPvj>
   d4f58:	bd38      	pop	{r3, r4, r5, pc}

000d4f5a <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d4f5a:	b510      	push	{r4, lr}
   d4f5c:	b088      	sub	sp, #32
   d4f5e:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d4f60:	4668      	mov	r0, sp
   d4f62:	f7ff fe40 	bl	d4be6 <_ZN6StringC1EPKc>
    return (*fn)(p);
   d4f66:	4669      	mov	r1, sp
   d4f68:	a804      	add	r0, sp, #16
   d4f6a:	f7ff fe5f 	bl	d4c2c <_ZN6StringC1ERKS_>
   d4f6e:	a804      	add	r0, sp, #16
   d4f70:	47a0      	blx	r4
   d4f72:	4604      	mov	r4, r0
   d4f74:	a804      	add	r0, sp, #16
   d4f76:	f7ff fdeb 	bl	d4b50 <_ZN6StringD1Ev>
    String p(param);
   d4f7a:	4668      	mov	r0, sp
   d4f7c:	f7ff fde8 	bl	d4b50 <_ZN6StringD1Ev>
}
   d4f80:	4620      	mov	r0, r4
   d4f82:	b008      	add	sp, #32
   d4f84:	bd10      	pop	{r4, pc}

000d4f86 <_ZN10CloudClass22call_std_user_functionEPvPKcS0_>:

int CloudClass::call_std_user_function(void* data, const char* param, void* reserved)
{
   d4f86:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4f88:	4604      	mov	r4, r0
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
   d4f8a:	4668      	mov	r0, sp
   d4f8c:	f7ff fe2b 	bl	d4be6 <_ZN6StringC1EPKc>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4f90:	68a3      	ldr	r3, [r4, #8]
   d4f92:	b90b      	cbnz	r3, d4f98 <_ZN10CloudClass22call_std_user_functionEPvPKcS0_+0x12>
	__throw_bad_function_call();
   d4f94:	f000 fff1 	bl	d5f7a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4f98:	68e3      	ldr	r3, [r4, #12]
   d4f9a:	4669      	mov	r1, sp
   d4f9c:	4620      	mov	r0, r4
   d4f9e:	4798      	blx	r3
   d4fa0:	4604      	mov	r4, r0
   d4fa2:	4668      	mov	r0, sp
   d4fa4:	f7ff fdd4 	bl	d4b50 <_ZN6StringD1Ev>
}
   d4fa8:	4620      	mov	r0, r4
   d4faa:	b004      	add	sp, #16
   d4fac:	bd10      	pop	{r4, pc}

000d4fae <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d4fae:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d4fb0:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d4fb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d4fb6:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d4fb8:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4fba:	461a      	mov	r2, r3
   d4fbc:	4669      	mov	r1, sp
   d4fbe:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d4fc0:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d4fc4:	f8ad 4000 	strh.w	r4, [sp]
   d4fc8:	f7ff fcfc 	bl	d49c4 <spark_function>
}
   d4fcc:	b004      	add	sp, #16
   d4fce:	bd10      	pop	{r4, pc}

000d4fd0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4fd0:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4fd2:	460e      	mov	r6, r1
   d4fd4:	4604      	mov	r4, r0
   d4fd6:	f856 3b04 	ldr.w	r3, [r6], #4
   d4fda:	9300      	str	r3, [sp, #0]
   d4fdc:	460d      	mov	r5, r1
   d4fde:	a801      	add	r0, sp, #4
   d4fe0:	4631      	mov	r1, r6
   d4fe2:	f7ff f97d 	bl	d42e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4fe6:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4fe8:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d4fea:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4fec:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d4fee:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d4ff0:	2300      	movs	r3, #0
   d4ff2:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4ff4:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d4ff6:	f7ff f90f 	bl	d4218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4ffa:	4630      	mov	r0, r6
   d4ffc:	f7ff f90c 	bl	d4218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d5000:	4628      	mov	r0, r5
   d5002:	2108      	movs	r1, #8
   d5004:	f000 ffb3 	bl	d5f6e <_ZdlPvj>
        return p;
    }
   d5008:	4620      	mov	r0, r4
   d500a:	b002      	add	sp, #8
   d500c:	bd70      	pop	{r4, r5, r6, pc}

000d500e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d500e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d5010:	b510      	push	{r4, lr}
      if (_M_empty())
   d5012:	b90a      	cbnz	r2, d5018 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5014:	f000 ffb1 	bl	d5f7a <_ZSt25__throw_bad_function_callv>
    }
   d5018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d501c:	68c3      	ldr	r3, [r0, #12]
   d501e:	4718      	bx	r3

000d5020 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5020:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d5022:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d5024:	f100 0110 	add.w	r1, r0, #16
   d5028:	f7ff fff1 	bl	d500e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d502c:	bd08      	pop	{r3, pc}

000d502e <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d502e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d5030:	b510      	push	{r4, lr}
      if (_M_empty())
   d5032:	b90a      	cbnz	r2, d5038 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d5034:	f000 ffa1 	bl	d5f7a <_ZSt25__throw_bad_function_callv>
    }
   d5038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d503c:	68c3      	ldr	r3, [r0, #12]
   d503e:	4718      	bx	r3

000d5040 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5040:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d5042:	6800      	ldr	r0, [r0, #0]
   d5044:	f100 0110 	add.w	r1, r0, #16
   d5048:	f7ff fff1 	bl	d502e <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d504c:	bd08      	pop	{r3, pc}
	...

000d5050 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d5050:	b538      	push	{r3, r4, r5, lr}
   d5052:	2300      	movs	r3, #0
   d5054:	4604      	mov	r4, r0
   d5056:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5058:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d505a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d505c:	f7ff f819 	bl	d4092 <_Znwj>
   d5060:	b128      	cbz	r0, d506e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d5062:	2301      	movs	r3, #1
   d5064:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d5068:	4b02      	ldr	r3, [pc, #8]	; (d5074 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d506a:	6003      	str	r3, [r0, #0]
   d506c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d506e:	6020      	str	r0, [r4, #0]
	}
   d5070:	4620      	mov	r0, r4
   d5072:	bd38      	pop	{r3, r4, r5, pc}
   d5074:	000d6238 	.word	0x000d6238

000d5078 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d5078:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d507a:	2300      	movs	r3, #0
   d507c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d507e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d5080:	4604      	mov	r4, r0
   d5082:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5084:	b12b      	cbz	r3, d5092 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5086:	2202      	movs	r2, #2
   d5088:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d508a:	68eb      	ldr	r3, [r5, #12]
   d508c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d508e:	68ab      	ldr	r3, [r5, #8]
   d5090:	60a3      	str	r3, [r4, #8]
    }
   d5092:	4620      	mov	r0, r4
   d5094:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5098 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d5098:	b5f0      	push	{r4, r5, r6, r7, lr}
   d509a:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d509c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d509e:	4668      	mov	r0, sp
   d50a0:	f7ff ff24 	bl	d4eec <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d50a4:	f04f 0302 	mov.w	r3, #2
   d50a8:	e8d4 2f4f 	ldrexb	r2, [r4]
   d50ac:	2a00      	cmp	r2, #0
   d50ae:	d103      	bne.n	d50b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d50b0:	e8c4 3f41 	strexb	r1, r3, [r4]
   d50b4:	2900      	cmp	r1, #0
   d50b6:	d1f7      	bne.n	d50a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d50b8:	d125      	bne.n	d5106 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d50ba:	f104 050c 	add.w	r5, r4, #12
   d50be:	4669      	mov	r1, sp
   d50c0:	4628      	mov	r0, r5
   d50c2:	f7ff ff13 	bl	d4eec <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d50c6:	f3bf 8f5b 	dmb	ish
   d50ca:	2301      	movs	r3, #1
   d50cc:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d50ce:	2000      	movs	r0, #0
   d50d0:	f104 0308 	add.w	r3, r4, #8
   d50d4:	f3bf 8f5b 	dmb	ish
   d50d8:	e853 6f00 	ldrex	r6, [r3]
   d50dc:	e843 0200 	strex	r2, r0, [r3]
   d50e0:	2a00      	cmp	r2, #0
   d50e2:	d1f9      	bne.n	d50d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d50e4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d50e8:	b16e      	cbz	r6, d5106 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d50ea:	f7ff fbef 	bl	d48cc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d50ee:	b178      	cbz	r0, d5110 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d50f0:	4629      	mov	r1, r5
   d50f2:	4630      	mov	r0, r6
   d50f4:	f7ff ff8b 	bl	d500e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d50f8:	4630      	mov	r0, r6
   d50fa:	f7ff f814 	bl	d4126 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d50fe:	2110      	movs	r1, #16
   d5100:	4630      	mov	r0, r6
   d5102:	f000 ff34 	bl	d5f6e <_ZdlPvj>
        p_->setError(std::move(error));
   d5106:	4668      	mov	r0, sp
   d5108:	f7ff fefd 	bl	d4f06 <_ZN8particle5ErrorD1Ev>
    }
   d510c:	b009      	add	sp, #36	; 0x24
   d510e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5110:	4631      	mov	r1, r6
   d5112:	a802      	add	r0, sp, #8
   d5114:	f7ff ffb0 	bl	d5078 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d5118:	68e0      	ldr	r0, [r4, #12]
   d511a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d511e:	b108      	cbz	r0, d5124 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d5120:	f000 ff9a 	bl	d6058 <strdup>
        type_(type) {
   d5124:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5126:	2010      	movs	r0, #16
   d5128:	f8ad 501c 	strh.w	r5, [sp, #28]
   d512c:	f7fe ffb1 	bl	d4092 <_Znwj>
   d5130:	4605      	mov	r5, r0
   d5132:	b1e8      	cbz	r0, d5170 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d5134:	2700      	movs	r7, #0
   d5136:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5138:	2018      	movs	r0, #24
   d513a:	f7fe ffaa 	bl	d4092 <_Znwj>
   d513e:	4604      	mov	r4, r0
   d5140:	b188      	cbz	r0, d5166 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d5142:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d5144:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d5146:	a802      	add	r0, sp, #8
   d5148:	f7ff fe0f 	bl	d4d6a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d514c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d514e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5150:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5152:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5154:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5156:	a906      	add	r1, sp, #24
   d5158:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d515a:	60e3      	str	r3, [r4, #12]
   d515c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d5160:	9205      	str	r2, [sp, #20]
   d5162:	f7ff fec3 	bl	d4eec <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d5166:	4b08      	ldr	r3, [pc, #32]	; (d5188 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d5168:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d516a:	4b08      	ldr	r3, [pc, #32]	; (d518c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d516c:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d516e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d5170:	a806      	add	r0, sp, #24
   d5172:	f7ff fec8 	bl	d4f06 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d5176:	a802      	add	r0, sp, #8
   d5178:	f7fe ffd5 	bl	d4126 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d517c:	2200      	movs	r2, #0
   d517e:	4629      	mov	r1, r5
   d5180:	4803      	ldr	r0, [pc, #12]	; (d5190 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d5182:	f7ff fbab 	bl	d48dc <application_thread_invoke>
   d5186:	e7b7      	b.n	d50f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d5188:	000d5021 	.word	0x000d5021
   d518c:	000d52b9 	.word	0x000d52b9
   d5190:	000d5765 	.word	0x000d5765

000d5194 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5198:	b08a      	sub	sp, #40	; 0x28
   d519a:	4605      	mov	r5, r0
   d519c:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d51a0:	460c      	mov	r4, r1
   d51a2:	4617      	mov	r7, r2
   d51a4:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d51a6:	f7ff fc15 	bl	d49d4 <spark_cloud_flag_connected>
   d51aa:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d51ac:	4682      	mov	sl, r0
   d51ae:	bb38      	cbnz	r0, d5200 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d51b0:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d51b4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d51b6:	a905      	add	r1, sp, #20
   d51b8:	4630      	mov	r0, r6
   d51ba:	f8ad 3018 	strh.w	r3, [sp, #24]
   d51be:	f7ff fe95 	bl	d4eec <_ZN8particle5ErrorC1EOS0_>
   d51c2:	2014      	movs	r0, #20
   d51c4:	f7fe ff65 	bl	d4092 <_Znwj>
   d51c8:	4604      	mov	r4, r0
   d51ca:	b148      	cbz	r0, d51e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d51cc:	2302      	movs	r3, #2
   d51ce:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d51d0:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d51d2:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d51d6:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d51d8:	4631      	mov	r1, r6
   d51da:	300c      	adds	r0, #12
   d51dc:	f7ff fe86 	bl	d4eec <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d51e0:	4628      	mov	r0, r5
	: __shared_count(__p)
   d51e2:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d51e4:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d51e8:	f7ff ff32 	bl	d5050 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d51ec:	4630      	mov	r0, r6
   d51ee:	f7ff fe8a 	bl	d4f06 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d51f2:	a805      	add	r0, sp, #20
   d51f4:	f7ff fe87 	bl	d4f06 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d51f8:	4628      	mov	r0, r5
   d51fa:	b00a      	add	sp, #40	; 0x28
   d51fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5200:	230c      	movs	r3, #12
   d5202:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5206:	2014      	movs	r0, #20
   d5208:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d520c:	9307      	str	r3, [sp, #28]
   d520e:	f7fe ff40 	bl	d4092 <_Znwj>
   d5212:	4601      	mov	r1, r0
   d5214:	b128      	cbz	r0, d5222 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5216:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d521a:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d521e:	f880 a001 	strb.w	sl, [r0, #1]
   d5222:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5224:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d5226:	f7ff ff13 	bl	d5050 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d522a:	4b22      	ldr	r3, [pc, #136]	; (d52b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d522c:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d522e:	2008      	movs	r0, #8
   d5230:	f7fe ff2f 	bl	d4092 <_Znwj>
   d5234:	4682      	mov	sl, r0
   d5236:	b128      	cbz	r0, d5244 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5238:	9b03      	ldr	r3, [sp, #12]
   d523a:	f840 3b04 	str.w	r3, [r0], #4
   d523e:	a904      	add	r1, sp, #16
   d5240:	f7ff f84e 	bl	d42e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5244:	9600      	str	r6, [sp, #0]
   d5246:	fa5f f389 	uxtb.w	r3, r9
   d524a:	4642      	mov	r2, r8
   d524c:	4639      	mov	r1, r7
   d524e:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d5250:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5254:	f7ff fbc6 	bl	d49e4 <spark_send_event>
   d5258:	b9b8      	cbnz	r0, d528a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d525a:	9b03      	ldr	r3, [sp, #12]
   d525c:	785b      	ldrb	r3, [r3, #1]
   d525e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5262:	b993      	cbnz	r3, d528a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d5264:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d5268:	a905      	add	r1, sp, #20
   d526a:	a803      	add	r0, sp, #12
   d526c:	9205      	str	r2, [sp, #20]
   d526e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5272:	f7ff ff11 	bl	d5098 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5276:	a805      	add	r0, sp, #20
   d5278:	f7ff fe45 	bl	d4f06 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d527c:	a805      	add	r0, sp, #20
   d527e:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5280:	f7ff fea6 	bl	d4fd0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d5284:	a806      	add	r0, sp, #24
   d5286:	f7fe ffc7 	bl	d4218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d528a:	9b03      	ldr	r3, [sp, #12]
   d528c:	9305      	str	r3, [sp, #20]
   d528e:	a904      	add	r1, sp, #16
   d5290:	a806      	add	r0, sp, #24
   d5292:	f7ff f825 	bl	d42e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5296:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5298:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d529a:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d529c:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d529e:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d52a0:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d52a2:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d52a4:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d52a6:	f7fe ffb7 	bl	d4218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d52aa:	a804      	add	r0, sp, #16
   d52ac:	f7fe ffb4 	bl	d4218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d52b0:	e7a2      	b.n	d51f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d52b2:	bf00      	nop
   d52b4:	000d537d 	.word	0x000d537d

000d52b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d52b8:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d52ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d52bc:	4605      	mov	r5, r0
	  switch (__op)
   d52be:	d007      	beq.n	d52d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d52c0:	2a03      	cmp	r2, #3
   d52c2:	d018      	beq.n	d52f6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d52c4:	2a01      	cmp	r2, #1
   d52c6:	d101      	bne.n	d52cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d52c8:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d52ca:	6003      	str	r3, [r0, #0]
	}
   d52cc:	2000      	movs	r0, #0
   d52ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d52d0:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d52d2:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d52d4:	f7fe fedd 	bl	d4092 <_Znwj>
   d52d8:	4604      	mov	r4, r0
   d52da:	b150      	cbz	r0, d52f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d52dc:	4631      	mov	r1, r6
   d52de:	f7ff fecb 	bl	d5078 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d52e2:	6930      	ldr	r0, [r6, #16]
   d52e4:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d52e8:	b108      	cbz	r0, d52ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d52ea:	f000 feb5 	bl	d6058 <strdup>
        type_(type) {
   d52ee:	6120      	str	r0, [r4, #16]
   d52f0:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d52f2:	602c      	str	r4, [r5, #0]
	}
   d52f4:	e7ea      	b.n	d52cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d52f6:	6804      	ldr	r4, [r0, #0]
   d52f8:	2c00      	cmp	r4, #0
   d52fa:	d0e7      	beq.n	d52cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d52fc:	f104 0010 	add.w	r0, r4, #16
   d5300:	f7ff fe01 	bl	d4f06 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d5304:	4620      	mov	r0, r4
   d5306:	f7fe ff0e 	bl	d4126 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d530a:	2118      	movs	r1, #24
   d530c:	4620      	mov	r0, r4
   d530e:	f000 fe2e 	bl	d5f6e <_ZdlPvj>
   d5312:	e7db      	b.n	d52cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d5314 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d5314:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d5316:	2300      	movs	r3, #0
   d5318:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d531a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d531c:	4604      	mov	r4, r0
   d531e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5320:	b12b      	cbz	r3, d532e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5322:	2202      	movs	r2, #2
   d5324:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5326:	68eb      	ldr	r3, [r5, #12]
   d5328:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d532a:	68ab      	ldr	r3, [r5, #8]
   d532c:	60a3      	str	r3, [r4, #8]
    }
   d532e:	4620      	mov	r0, r4
   d5330:	bd38      	pop	{r3, r4, r5, pc}

000d5332 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d5332:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5334:	b570      	push	{r4, r5, r6, lr}
   d5336:	4604      	mov	r4, r0
	  switch (__op)
   d5338:	d007      	beq.n	d534a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d533a:	2a03      	cmp	r2, #3
   d533c:	d012      	beq.n	d5364 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d533e:	2a01      	cmp	r2, #1
   d5340:	d101      	bne.n	d5346 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d5342:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5344:	6003      	str	r3, [r0, #0]
	}
   d5346:	2000      	movs	r0, #0
   d5348:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d534a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d534c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d534e:	f7fe fea0 	bl	d4092 <_Znwj>
   d5352:	4605      	mov	r5, r0
   d5354:	b120      	cbz	r0, d5360 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d5356:	4631      	mov	r1, r6
   d5358:	f7ff ffdc 	bl	d5314 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d535c:	7c33      	ldrb	r3, [r6, #16]
   d535e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d5360:	6025      	str	r5, [r4, #0]
	}
   d5362:	e7f0      	b.n	d5346 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d5364:	6804      	ldr	r4, [r0, #0]
   d5366:	2c00      	cmp	r4, #0
   d5368:	d0ed      	beq.n	d5346 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d536a:	4620      	mov	r0, r4
   d536c:	f7fe fedb 	bl	d4126 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d5370:	2114      	movs	r1, #20
   d5372:	4620      	mov	r0, r4
   d5374:	f000 fdfb 	bl	d5f6e <_ZdlPvj>
   d5378:	e7e5      	b.n	d5346 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d537c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d537c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d537e:	b089      	sub	sp, #36	; 0x24
   d5380:	4604      	mov	r4, r0
   d5382:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5384:	a801      	add	r0, sp, #4
   d5386:	4611      	mov	r1, r2
   d5388:	f7ff fe22 	bl	d4fd0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d538c:	b1a4      	cbz	r4, d53b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d538e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5390:	b11d      	cbz	r5, d539a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d5392:	4628      	mov	r0, r5
   d5394:	f000 fe60 	bl	d6058 <strdup>
   d5398:	4605      	mov	r5, r0
   d539a:	a801      	add	r0, sp, #4
   d539c:	a903      	add	r1, sp, #12
        type_(type) {
   d539e:	9503      	str	r5, [sp, #12]
   d53a0:	f8ad 4010 	strh.w	r4, [sp, #16]
   d53a4:	f7ff fe78 	bl	d5098 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d53a8:	a803      	add	r0, sp, #12
   d53aa:	f7ff fdac 	bl	d4f06 <_ZN8particle5ErrorD1Ev>
   d53ae:	a802      	add	r0, sp, #8
   d53b0:	f7fe ff32 	bl	d4218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d53b4:	b009      	add	sp, #36	; 0x24
   d53b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d53b8:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d53ba:	2301      	movs	r3, #1
   d53bc:	e8d5 2f4f 	ldrexb	r2, [r5]
   d53c0:	2a00      	cmp	r2, #0
   d53c2:	d103      	bne.n	d53cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d53c4:	e8c5 3f41 	strexb	r1, r3, [r5]
   d53c8:	2900      	cmp	r1, #0
   d53ca:	d1f7      	bne.n	d53bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d53cc:	d1ef      	bne.n	d53ae <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d53ce:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d53d0:	f3bf 8f5b 	dmb	ish
   d53d4:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d53d6:	1d2b      	adds	r3, r5, #4
   d53d8:	f3bf 8f5b 	dmb	ish
   d53dc:	e853 6f00 	ldrex	r6, [r3]
   d53e0:	e843 4200 	strex	r2, r4, [r3]
   d53e4:	2a00      	cmp	r2, #0
   d53e6:	d1f9      	bne.n	d53dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d53e8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d53ec:	2e00      	cmp	r6, #0
   d53ee:	d0de      	beq.n	d53ae <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d53f0:	4620      	mov	r0, r4
   d53f2:	f7ff fa6b 	bl	d48cc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d53f6:	4607      	mov	r7, r0
   d53f8:	b160      	cbz	r0, d5414 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d53fa:	f105 010c 	add.w	r1, r5, #12
   d53fe:	4630      	mov	r0, r6
   d5400:	f7ff fe15 	bl	d502e <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d5404:	4630      	mov	r0, r6
   d5406:	f7fe fe8e 	bl	d4126 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d540a:	2110      	movs	r1, #16
   d540c:	4630      	mov	r0, r6
   d540e:	f000 fdae 	bl	d5f6e <_ZdlPvj>
   d5412:	e7cc      	b.n	d53ae <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5414:	4631      	mov	r1, r6
   d5416:	a803      	add	r0, sp, #12
   d5418:	f7ff ff7c 	bl	d5314 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d541c:	7b2b      	ldrb	r3, [r5, #12]
   d541e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5422:	2010      	movs	r0, #16
   d5424:	f7fe fe35 	bl	d4092 <_Znwj>
   d5428:	4605      	mov	r5, r0
   d542a:	b1d0      	cbz	r0, d5462 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d542c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d542e:	2014      	movs	r0, #20
   d5430:	f7fe fe2f 	bl	d4092 <_Znwj>
   d5434:	4604      	mov	r4, r0
   d5436:	b178      	cbz	r0, d5458 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d5438:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d543a:	4601      	mov	r1, r0
   d543c:	a803      	add	r0, sp, #12
   d543e:	f7ff fc94 	bl	d4d6a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5442:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5444:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5446:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5448:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d544a:	9205      	str	r2, [sp, #20]
   d544c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d544e:	60e3      	str	r3, [r4, #12]
   d5450:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d5454:	9206      	str	r2, [sp, #24]
   d5456:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d5458:	4b06      	ldr	r3, [pc, #24]	; (d5474 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d545a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d545c:	4b06      	ldr	r3, [pc, #24]	; (d5478 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d545e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d5460:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d5462:	a803      	add	r0, sp, #12
   d5464:	f7fe fe5f 	bl	d4126 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5468:	2200      	movs	r2, #0
   d546a:	4629      	mov	r1, r5
   d546c:	4803      	ldr	r0, [pc, #12]	; (d547c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d546e:	f7ff fa35 	bl	d48dc <application_thread_invoke>
   d5472:	e7c7      	b.n	d5404 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d5474:	000d5041 	.word	0x000d5041
   d5478:	000d5333 	.word	0x000d5333
   d547c:	000d5765 	.word	0x000d5765

000d5480 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5480:	4770      	bx	lr

000d5482 <_ZN9IPAddressD0Ev>:
   d5482:	b510      	push	{r4, lr}
   d5484:	2118      	movs	r1, #24
   d5486:	4604      	mov	r4, r0
   d5488:	f000 fd71 	bl	d5f6e <_ZdlPvj>
   d548c:	4620      	mov	r0, r4
   d548e:	bd10      	pop	{r4, pc}

000d5490 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5490:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5492:	7d03      	ldrb	r3, [r0, #20]
   d5494:	2b06      	cmp	r3, #6
{
   d5496:	b08d      	sub	sp, #52	; 0x34
   d5498:	460e      	mov	r6, r1
   d549a:	f100 0704 	add.w	r7, r0, #4
   d549e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d54a2:	d012      	beq.n	d54ca <_ZNK9IPAddress7printToER5Print+0x3a>
   d54a4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d54a8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d54ac:	220a      	movs	r2, #10
   d54ae:	4630      	mov	r0, r6
   d54b0:	f7ff fc21 	bl	d4cf6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d54b4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d54b6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d54b8:	d019      	beq.n	d54ee <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d54ba:	2c00      	cmp	r4, #0
   d54bc:	d0f4      	beq.n	d54a8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d54be:	212e      	movs	r1, #46	; 0x2e
   d54c0:	4630      	mov	r0, r6
   d54c2:	f7ff fc15 	bl	d4cf0 <_ZN5Print5printEc>
   d54c6:	4404      	add	r4, r0
   d54c8:	e7ee      	b.n	d54a8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d54ca:	232f      	movs	r3, #47	; 0x2f
   d54cc:	466a      	mov	r2, sp
   d54ce:	4639      	mov	r1, r7
   d54d0:	200a      	movs	r0, #10
		buf[0] = 0;
   d54d2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d54d6:	f7ff f919 	bl	d470c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d54da:	4668      	mov	r0, sp
   d54dc:	f000 fdd9 	bl	d6092 <strlen>
   d54e0:	6833      	ldr	r3, [r6, #0]
   d54e2:	4602      	mov	r2, r0
   d54e4:	68db      	ldr	r3, [r3, #12]
   d54e6:	4669      	mov	r1, sp
   d54e8:	4630      	mov	r0, r6
   d54ea:	4798      	blx	r3
   d54ec:	4604      	mov	r4, r0
    }
    return n;
}
   d54ee:	4620      	mov	r0, r4
   d54f0:	b00d      	add	sp, #52	; 0x34
   d54f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d54f4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d54f4:	b510      	push	{r4, lr}
   d54f6:	4b05      	ldr	r3, [pc, #20]	; (d550c <_ZN9IPAddressC1Ev+0x18>)
   d54f8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d54fa:	2211      	movs	r2, #17
   d54fc:	f840 3b04 	str.w	r3, [r0], #4
   d5500:	2100      	movs	r1, #0
   d5502:	f000 fd73 	bl	d5fec <memset>
}
   d5506:	4620      	mov	r0, r4
   d5508:	bd10      	pop	{r4, pc}
   d550a:	bf00      	nop
   d550c:	000d6254 	.word	0x000d6254

000d5510 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5510:	4603      	mov	r3, r0
   d5512:	4a07      	ldr	r2, [pc, #28]	; (d5530 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5514:	b510      	push	{r4, lr}
   d5516:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d551a:	f101 0210 	add.w	r2, r1, #16
   d551e:	f851 4b04 	ldr.w	r4, [r1], #4
   d5522:	f843 4b04 	str.w	r4, [r3], #4
   d5526:	4291      	cmp	r1, r2
   d5528:	d1f9      	bne.n	d551e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d552a:	780a      	ldrb	r2, [r1, #0]
   d552c:	701a      	strb	r2, [r3, #0]
}
   d552e:	bd10      	pop	{r4, pc}
   d5530:	000d6254 	.word	0x000d6254

000d5534 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5534:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5536:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d553a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d553e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5542:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d5546:	2304      	movs	r3, #4
   d5548:	6041      	str	r1, [r0, #4]
   d554a:	7503      	strb	r3, [r0, #20]
}
   d554c:	bd10      	pop	{r4, pc}

000d554e <_ZN9IPAddressaSEPKh>:
{
   d554e:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5550:	78cb      	ldrb	r3, [r1, #3]
   d5552:	9300      	str	r3, [sp, #0]
   d5554:	788b      	ldrb	r3, [r1, #2]
   d5556:	784a      	ldrb	r2, [r1, #1]
   d5558:	7809      	ldrb	r1, [r1, #0]
   d555a:	f7ff ffeb 	bl	d5534 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d555e:	b002      	add	sp, #8
   d5560:	bd10      	pop	{r4, pc}

000d5562 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5562:	7441      	strb	r1, [r0, #17]
}
   d5564:	4770      	bx	lr

000d5566 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5566:	4770      	bx	lr

000d5568 <_ZN9USBSerial4readEv>:
{
   d5568:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d556a:	2100      	movs	r1, #0
   d556c:	7c00      	ldrb	r0, [r0, #16]
   d556e:	f7ff f975 	bl	d485c <HAL_USB_USART_Receive_Data>
}
   d5572:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5576:	bd08      	pop	{r3, pc}

000d5578 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d5578:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d557a:	2101      	movs	r1, #1
   d557c:	7c00      	ldrb	r0, [r0, #16]
   d557e:	f7ff f96d 	bl	d485c <HAL_USB_USART_Receive_Data>
}
   d5582:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5586:	bd08      	pop	{r3, pc}

000d5588 <_ZN9USBSerial17availableForWriteEv>:
{
   d5588:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d558a:	7c00      	ldrb	r0, [r0, #16]
   d558c:	f7ff f95e 	bl	d484c <HAL_USB_USART_Available_Data_For_Write>
}
   d5590:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5594:	bd08      	pop	{r3, pc}

000d5596 <_ZN9USBSerial9availableEv>:
{
   d5596:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5598:	7c00      	ldrb	r0, [r0, #16]
   d559a:	f7ff f94f 	bl	d483c <HAL_USB_USART_Available_Data>
}
   d559e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d55a2:	bd08      	pop	{r3, pc}

000d55a4 <_ZN9USBSerial5writeEh>:
{
   d55a4:	b513      	push	{r0, r1, r4, lr}
   d55a6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d55a8:	7c00      	ldrb	r0, [r0, #16]
{
   d55aa:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d55ac:	f7ff f94e 	bl	d484c <HAL_USB_USART_Available_Data_For_Write>
   d55b0:	2800      	cmp	r0, #0
   d55b2:	9901      	ldr	r1, [sp, #4]
   d55b4:	dc01      	bgt.n	d55ba <_ZN9USBSerial5writeEh+0x16>
   d55b6:	7c60      	ldrb	r0, [r4, #17]
   d55b8:	b120      	cbz	r0, d55c4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d55ba:	7c20      	ldrb	r0, [r4, #16]
   d55bc:	f7ff f956 	bl	d486c <HAL_USB_USART_Send_Data>
   d55c0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d55c4:	b002      	add	sp, #8
   d55c6:	bd10      	pop	{r4, pc}

000d55c8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d55c8:	7c00      	ldrb	r0, [r0, #16]
   d55ca:	f7ff b957 	b.w	d487c <HAL_USB_USART_Flush_Data>

000d55ce <_ZN9USBSerialD0Ev>:
   d55ce:	b510      	push	{r4, lr}
   d55d0:	2114      	movs	r1, #20
   d55d2:	4604      	mov	r4, r0
   d55d4:	f000 fccb 	bl	d5f6e <_ZdlPvj>
   d55d8:	4620      	mov	r0, r4
   d55da:	bd10      	pop	{r4, pc}

000d55dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d55dc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d55de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d55e2:	4604      	mov	r4, r0
   d55e4:	4608      	mov	r0, r1
   d55e6:	2100      	movs	r1, #0
   d55e8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d55ec:	4b04      	ldr	r3, [pc, #16]	; (d5600 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d55ee:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d55f0:	2301      	movs	r3, #1
  _serial = serial;
   d55f2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d55f4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d55f6:	4611      	mov	r1, r2
   d55f8:	f7ff f918 	bl	d482c <HAL_USB_USART_Init>
}
   d55fc:	4620      	mov	r0, r4
   d55fe:	bd10      	pop	{r4, pc}
   d5600:	000d6268 	.word	0x000d6268

000d5604 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5604:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5606:	2214      	movs	r2, #20
{
   d5608:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d560a:	2100      	movs	r1, #0
   d560c:	f000 fcee 	bl	d5fec <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5610:	4620      	mov	r0, r4
   d5612:	bd10      	pop	{r4, pc}

000d5614 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5614:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5616:	4c10      	ldr	r4, [pc, #64]	; (d5658 <_Z16_fetch_usbserialv+0x44>)
{
   d5618:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d561a:	a803      	add	r0, sp, #12
   d561c:	f7ff fff2 	bl	d5604 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5620:	7821      	ldrb	r1, [r4, #0]
   d5622:	f3bf 8f5b 	dmb	ish
   d5626:	f011 0101 	ands.w	r1, r1, #1
   d562a:	d111      	bne.n	d5650 <_Z16_fetch_usbserialv+0x3c>
   d562c:	4620      	mov	r0, r4
   d562e:	9101      	str	r1, [sp, #4]
   d5630:	f7fe fd37 	bl	d40a2 <__cxa_guard_acquire>
   d5634:	9901      	ldr	r1, [sp, #4]
   d5636:	b158      	cbz	r0, d5650 <_Z16_fetch_usbserialv+0x3c>
   d5638:	aa03      	add	r2, sp, #12
   d563a:	4808      	ldr	r0, [pc, #32]	; (d565c <_Z16_fetch_usbserialv+0x48>)
   d563c:	f7ff ffce 	bl	d55dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5640:	4620      	mov	r0, r4
   d5642:	f7fe fd33 	bl	d40ac <__cxa_guard_release>
   d5646:	4a06      	ldr	r2, [pc, #24]	; (d5660 <_Z16_fetch_usbserialv+0x4c>)
   d5648:	4906      	ldr	r1, [pc, #24]	; (d5664 <_Z16_fetch_usbserialv+0x50>)
   d564a:	4804      	ldr	r0, [pc, #16]	; (d565c <_Z16_fetch_usbserialv+0x48>)
   d564c:	f000 fc8a 	bl	d5f64 <__aeabi_atexit>
	return _usbserial;
}
   d5650:	4802      	ldr	r0, [pc, #8]	; (d565c <_Z16_fetch_usbserialv+0x48>)
   d5652:	b008      	add	sp, #32
   d5654:	bd10      	pop	{r4, pc}
   d5656:	bf00      	nop
   d5658:	2003e680 	.word	0x2003e680
   d565c:	2003e684 	.word	0x2003e684
   d5660:	2003e634 	.word	0x2003e634
   d5664:	000d5567 	.word	0x000d5567

000d5668 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5668:	4770      	bx	lr

000d566a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d566a:	7441      	strb	r1, [r0, #17]
}
   d566c:	4770      	bx	lr

000d566e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d566e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d5670:	7c00      	ldrb	r0, [r0, #16]
   d5672:	f7ff f88b 	bl	d478c <hal_usart_available_data_for_write>
}
   d5676:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d567a:	bd08      	pop	{r3, pc}

000d567c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d567c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d567e:	7c00      	ldrb	r0, [r0, #16]
   d5680:	f7ff f85c 	bl	d473c <hal_usart_available>
}
   d5684:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5688:	bd08      	pop	{r3, pc}

000d568a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d568a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d568c:	7c00      	ldrb	r0, [r0, #16]
   d568e:	f7ff f865 	bl	d475c <hal_usart_peek>
}
   d5692:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5696:	bd08      	pop	{r3, pc}

000d5698 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5698:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d569a:	7c00      	ldrb	r0, [r0, #16]
   d569c:	f7ff f856 	bl	d474c <hal_usart_read>
}
   d56a0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d56a4:	bd08      	pop	{r3, pc}

000d56a6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d56a6:	7c00      	ldrb	r0, [r0, #16]
   d56a8:	f7ff b860 	b.w	d476c <hal_usart_flush>

000d56ac <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d56ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d56ae:	7c45      	ldrb	r5, [r0, #17]
{
   d56b0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d56b2:	b12d      	cbz	r5, d56c0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d56b4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d56b6:	b003      	add	sp, #12
   d56b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d56bc:	f7ff b836 	b.w	d472c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d56c0:	7c00      	ldrb	r0, [r0, #16]
   d56c2:	9101      	str	r1, [sp, #4]
   d56c4:	f7ff f862 	bl	d478c <hal_usart_available_data_for_write>
   d56c8:	2800      	cmp	r0, #0
   d56ca:	9901      	ldr	r1, [sp, #4]
   d56cc:	dcf2      	bgt.n	d56b4 <_ZN11USARTSerial5writeEh+0x8>
}
   d56ce:	4628      	mov	r0, r5
   d56d0:	b003      	add	sp, #12
   d56d2:	bd30      	pop	{r4, r5, pc}

000d56d4 <_ZN11USARTSerialD0Ev>:
   d56d4:	b510      	push	{r4, lr}
   d56d6:	2114      	movs	r1, #20
   d56d8:	4604      	mov	r4, r0
   d56da:	f000 fc48 	bl	d5f6e <_ZdlPvj>
   d56de:	4620      	mov	r0, r4
   d56e0:	bd10      	pop	{r4, pc}
	...

000d56e4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d56e4:	b510      	push	{r4, lr}
   d56e6:	f04f 0c00 	mov.w	ip, #0
   d56ea:	4604      	mov	r4, r0
   d56ec:	4608      	mov	r0, r1
   d56ee:	4611      	mov	r1, r2
   d56f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d56f4:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d56f8:	4a04      	ldr	r2, [pc, #16]	; (d570c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d56fa:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d56fc:	2201      	movs	r2, #1
  _serial = serial;
   d56fe:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5700:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d5702:	461a      	mov	r2, r3
   d5704:	f7ff f80a 	bl	d471c <hal_usart_init>
}
   d5708:	4620      	mov	r0, r4
   d570a:	bd10      	pop	{r4, pc}
   d570c:	000d6298 	.word	0x000d6298

000d5710 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5710:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5712:	4c0e      	ldr	r4, [pc, #56]	; (d574c <_Z22__fetch_global_Serial1v+0x3c>)
   d5714:	7821      	ldrb	r1, [r4, #0]
   d5716:	f3bf 8f5b 	dmb	ish
   d571a:	f011 0101 	ands.w	r1, r1, #1
   d571e:	d112      	bne.n	d5746 <_Z22__fetch_global_Serial1v+0x36>
   d5720:	4620      	mov	r0, r4
   d5722:	9101      	str	r1, [sp, #4]
   d5724:	f7fe fcbd 	bl	d40a2 <__cxa_guard_acquire>
   d5728:	9901      	ldr	r1, [sp, #4]
   d572a:	b160      	cbz	r0, d5746 <_Z22__fetch_global_Serial1v+0x36>
   d572c:	4a08      	ldr	r2, [pc, #32]	; (d5750 <_Z22__fetch_global_Serial1v+0x40>)
   d572e:	4b09      	ldr	r3, [pc, #36]	; (d5754 <_Z22__fetch_global_Serial1v+0x44>)
   d5730:	4809      	ldr	r0, [pc, #36]	; (d5758 <_Z22__fetch_global_Serial1v+0x48>)
   d5732:	f7ff ffd7 	bl	d56e4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d5736:	4620      	mov	r0, r4
   d5738:	f7fe fcb8 	bl	d40ac <__cxa_guard_release>
   d573c:	4a07      	ldr	r2, [pc, #28]	; (d575c <_Z22__fetch_global_Serial1v+0x4c>)
   d573e:	4908      	ldr	r1, [pc, #32]	; (d5760 <_Z22__fetch_global_Serial1v+0x50>)
   d5740:	4805      	ldr	r0, [pc, #20]	; (d5758 <_Z22__fetch_global_Serial1v+0x48>)
   d5742:	f000 fc0f 	bl	d5f64 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5746:	4804      	ldr	r0, [pc, #16]	; (d5758 <_Z22__fetch_global_Serial1v+0x48>)
   d5748:	b002      	add	sp, #8
   d574a:	bd10      	pop	{r4, pc}
   d574c:	2003e698 	.word	0x2003e698
   d5750:	2003e69c 	.word	0x2003e69c
   d5754:	2003e720 	.word	0x2003e720
   d5758:	2003e7a4 	.word	0x2003e7a4
   d575c:	2003e634 	.word	0x2003e634
   d5760:	000d5669 	.word	0x000d5669

000d5764 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5764:	b510      	push	{r4, lr}
      if (_M_empty())
   d5766:	6883      	ldr	r3, [r0, #8]
   d5768:	4604      	mov	r4, r0
   d576a:	b90b      	cbnz	r3, d5770 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d576c:	f000 fc05 	bl	d5f7a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5770:	68c3      	ldr	r3, [r0, #12]
   d5772:	4798      	blx	r3
      if (_M_manager)
   d5774:	68a3      	ldr	r3, [r4, #8]
   d5776:	b11b      	cbz	r3, d5780 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5778:	2203      	movs	r2, #3
   d577a:	4621      	mov	r1, r4
   d577c:	4620      	mov	r0, r4
   d577e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5780:	4620      	mov	r0, r4
   d5782:	2110      	movs	r1, #16
}
   d5784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d5788:	f000 bbf1 	b.w	d5f6e <_ZdlPvj>

000d578c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d578c:	4770      	bx	lr

000d578e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d578e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5790:	4606      	mov	r6, r0
   d5792:	4615      	mov	r5, r2
   d5794:	460c      	mov	r4, r1
   d5796:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5798:	42bc      	cmp	r4, r7
   d579a:	d006      	beq.n	d57aa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d579c:	6833      	ldr	r3, [r6, #0]
   d579e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d57a2:	689b      	ldr	r3, [r3, #8]
   d57a4:	4630      	mov	r0, r6
   d57a6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d57a8:	e7f6      	b.n	d5798 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d57aa:	4628      	mov	r0, r5
   d57ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d57ae <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d57ae:	7c00      	ldrb	r0, [r0, #16]
   d57b0:	2200      	movs	r2, #0
   d57b2:	f7fe bff3 	b.w	d479c <hal_i2c_write>

000d57b6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d57b6:	7c00      	ldrb	r0, [r0, #16]
   d57b8:	2100      	movs	r1, #0
   d57ba:	f7fe bff7 	b.w	d47ac <hal_i2c_available>

000d57be <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d57be:	7c00      	ldrb	r0, [r0, #16]
   d57c0:	2100      	movs	r1, #0
   d57c2:	f7fe bffb 	b.w	d47bc <hal_i2c_read>

000d57c6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d57c6:	7c00      	ldrb	r0, [r0, #16]
   d57c8:	2100      	movs	r1, #0
   d57ca:	f7fe bfff 	b.w	d47cc <hal_i2c_peek>

000d57ce <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d57ce:	7c00      	ldrb	r0, [r0, #16]
   d57d0:	2100      	movs	r1, #0
   d57d2:	f7ff b803 	b.w	d47dc <hal_i2c_flush>

000d57d6 <_ZN7TwoWireD0Ev>:
   d57d6:	b510      	push	{r4, lr}
   d57d8:	2114      	movs	r1, #20
   d57da:	4604      	mov	r4, r0
   d57dc:	f000 fbc7 	bl	d5f6e <_ZdlPvj>
   d57e0:	4620      	mov	r0, r4
   d57e2:	bd10      	pop	{r4, pc}

000d57e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d57e4:	b510      	push	{r4, lr}
   d57e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d57ea:	4604      	mov	r4, r0
   d57ec:	4608      	mov	r0, r1
   d57ee:	2100      	movs	r1, #0
   d57f0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d57f4:	4b03      	ldr	r3, [pc, #12]	; (d5804 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d57f6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d57f8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d57fa:	4611      	mov	r1, r2
   d57fc:	f7fe fffe 	bl	d47fc <hal_i2c_init>
}
   d5800:	4620      	mov	r0, r4
   d5802:	bd10      	pop	{r4, pc}
   d5804:	000d62c8 	.word	0x000d62c8

000d5808 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5808:	2200      	movs	r2, #0
   d580a:	6840      	ldr	r0, [r0, #4]
   d580c:	4611      	mov	r1, r2
   d580e:	f7ff b899 	b.w	d4944 <network_ready>

000d5812 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5812:	2200      	movs	r2, #0
   d5814:	6840      	ldr	r0, [r0, #4]
   d5816:	4611      	mov	r1, r2
   d5818:	f7ff b8b4 	b.w	d4984 <network_listening>

000d581c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d581c:	2200      	movs	r2, #0
   d581e:	6840      	ldr	r0, [r0, #4]
   d5820:	4611      	mov	r1, r2
   d5822:	f7ff b8bf 	b.w	d49a4 <network_get_listen_timeout>

000d5826 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5826:	6840      	ldr	r0, [r0, #4]
   d5828:	2200      	movs	r2, #0
   d582a:	f7ff b8b3 	b.w	d4994 <network_set_listen_timeout>

000d582e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d582e:	6840      	ldr	r0, [r0, #4]
   d5830:	2200      	movs	r2, #0
   d5832:	f081 0101 	eor.w	r1, r1, #1
   d5836:	f7ff b89d 	b.w	d4974 <network_listen>

000d583a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d583a:	2300      	movs	r3, #0
   d583c:	6840      	ldr	r0, [r0, #4]
   d583e:	461a      	mov	r2, r3
   d5840:	4619      	mov	r1, r3
   d5842:	f7ff b88f 	b.w	d4964 <network_off>

000d5846 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5846:	2300      	movs	r3, #0
   d5848:	6840      	ldr	r0, [r0, #4]
   d584a:	461a      	mov	r2, r3
   d584c:	4619      	mov	r1, r3
   d584e:	f7ff b881 	b.w	d4954 <network_on>

000d5852 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5852:	2200      	movs	r2, #0
   d5854:	6840      	ldr	r0, [r0, #4]
   d5856:	4611      	mov	r1, r2
   d5858:	f7ff b864 	b.w	d4924 <network_connecting>

000d585c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d585c:	6840      	ldr	r0, [r0, #4]
   d585e:	2200      	movs	r2, #0
   d5860:	2102      	movs	r1, #2
   d5862:	f7ff b867 	b.w	d4934 <network_disconnect>

000d5866 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5866:	2300      	movs	r3, #0
   d5868:	6840      	ldr	r0, [r0, #4]
   d586a:	461a      	mov	r2, r3
   d586c:	f7ff b852 	b.w	d4914 <network_connect>

000d5870 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5870:	4b02      	ldr	r3, [pc, #8]	; (d587c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5872:	2204      	movs	r2, #4
   d5874:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5876:	4a02      	ldr	r2, [pc, #8]	; (d5880 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5878:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d587a:	4770      	bx	lr
   d587c:	2003e7b8 	.word	0x2003e7b8
   d5880:	000d62f0 	.word	0x000d62f0

000d5884 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5884:	2300      	movs	r3, #0
   d5886:	6840      	ldr	r0, [r0, #4]
   d5888:	461a      	mov	r2, r3
   d588a:	f7ff b843 	b.w	d4914 <network_connect>

000d588e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d588e:	6840      	ldr	r0, [r0, #4]
   d5890:	2200      	movs	r2, #0
   d5892:	2102      	movs	r1, #2
   d5894:	f7ff b84e 	b.w	d4934 <network_disconnect>

000d5898 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5898:	2200      	movs	r2, #0
   d589a:	6840      	ldr	r0, [r0, #4]
   d589c:	4611      	mov	r1, r2
   d589e:	f7ff b841 	b.w	d4924 <network_connecting>

000d58a2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d58a2:	2200      	movs	r2, #0
   d58a4:	6840      	ldr	r0, [r0, #4]
   d58a6:	4611      	mov	r1, r2
   d58a8:	f7ff b84c 	b.w	d4944 <network_ready>

000d58ac <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d58ac:	2300      	movs	r3, #0
   d58ae:	6840      	ldr	r0, [r0, #4]
   d58b0:	461a      	mov	r2, r3
   d58b2:	4619      	mov	r1, r3
   d58b4:	f7ff b84e 	b.w	d4954 <network_on>

000d58b8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d58b8:	2300      	movs	r3, #0
   d58ba:	6840      	ldr	r0, [r0, #4]
   d58bc:	461a      	mov	r2, r3
   d58be:	4619      	mov	r1, r3
   d58c0:	f7ff b850 	b.w	d4964 <network_off>

000d58c4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d58c4:	6840      	ldr	r0, [r0, #4]
   d58c6:	2200      	movs	r2, #0
   d58c8:	f081 0101 	eor.w	r1, r1, #1
   d58cc:	f7ff b852 	b.w	d4974 <network_listen>

000d58d0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d58d0:	6840      	ldr	r0, [r0, #4]
   d58d2:	2200      	movs	r2, #0
   d58d4:	f7ff b85e 	b.w	d4994 <network_set_listen_timeout>

000d58d8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d58d8:	2200      	movs	r2, #0
   d58da:	6840      	ldr	r0, [r0, #4]
   d58dc:	4611      	mov	r1, r2
   d58de:	f7ff b861 	b.w	d49a4 <network_get_listen_timeout>

000d58e2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d58e2:	2200      	movs	r2, #0
   d58e4:	6840      	ldr	r0, [r0, #4]
   d58e6:	4611      	mov	r1, r2
   d58e8:	f7ff b84c 	b.w	d4984 <network_listening>

000d58ec <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d58ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d58f0:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d58f2:	b095      	sub	sp, #84	; 0x54
   d58f4:	4616      	mov	r6, r2
   d58f6:	460d      	mov	r5, r1
   d58f8:	4607      	mov	r7, r0
    IPAddress addr;
   d58fa:	f7ff fdfb 	bl	d54f4 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d58fe:	4621      	mov	r1, r4
   d5900:	2218      	movs	r2, #24
   d5902:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d5904:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5906:	f000 fb71 	bl	d5fec <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d590a:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d590c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5910:	4621      	mov	r1, r4
   d5912:	466b      	mov	r3, sp
   d5914:	aa0c      	add	r2, sp, #48	; 0x30
   d5916:	4630      	mov	r0, r6
   d5918:	f7fe fea8 	bl	d466c <netdb_getaddrinfo>
    if (!r) {
   d591c:	4604      	mov	r4, r0
   d591e:	2800      	cmp	r0, #0
   d5920:	d146      	bne.n	d59b0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5922:	4602      	mov	r2, r0
   d5924:	2101      	movs	r1, #1
   d5926:	6868      	ldr	r0, [r5, #4]
   d5928:	f7ff f80c 	bl	d4944 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d592c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d592e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5930:	4622      	mov	r2, r4
   d5932:	6868      	ldr	r0, [r5, #4]
   d5934:	f7ff f806 	bl	d4944 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5938:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d593a:	4681      	mov	r9, r0
        bool ok = false;
   d593c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d593e:	2e00      	cmp	r6, #0
   d5940:	d036      	beq.n	d59b0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d5942:	2900      	cmp	r1, #0
   d5944:	d134      	bne.n	d59b0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5946:	6873      	ldr	r3, [r6, #4]
   d5948:	2b02      	cmp	r3, #2
   d594a:	d003      	beq.n	d5954 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d594c:	2b0a      	cmp	r3, #10
   d594e:	d00b      	beq.n	d5968 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5950:	69f6      	ldr	r6, [r6, #28]
   d5952:	e7f4      	b.n	d593e <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d5954:	f1b8 0f00 	cmp.w	r8, #0
   d5958:	d004      	beq.n	d5964 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d595a:	6971      	ldr	r1, [r6, #20]
   d595c:	4638      	mov	r0, r7
   d595e:	3104      	adds	r1, #4
   d5960:	f7ff fdf5 	bl	d554e <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d5964:	4641      	mov	r1, r8
   d5966:	e7f3      	b.n	d5950 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5968:	f1b9 0f00 	cmp.w	r9, #0
   d596c:	d101      	bne.n	d5972 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d596e:	4649      	mov	r1, r9
   d5970:	e7ee      	b.n	d5950 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5972:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5974:	2210      	movs	r2, #16
   d5976:	a801      	add	r0, sp, #4
   d5978:	f000 fb38 	bl	d5fec <memset>
                    a.v = 6;
   d597c:	2306      	movs	r3, #6
   d597e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5982:	ad01      	add	r5, sp, #4
   d5984:	f104 0308 	add.w	r3, r4, #8
   d5988:	3418      	adds	r4, #24
   d598a:	6818      	ldr	r0, [r3, #0]
   d598c:	6859      	ldr	r1, [r3, #4]
   d598e:	462a      	mov	r2, r5
   d5990:	c203      	stmia	r2!, {r0, r1}
   d5992:	3308      	adds	r3, #8
   d5994:	42a3      	cmp	r3, r4
   d5996:	4615      	mov	r5, r2
   d5998:	d1f7      	bne.n	d598a <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d599a:	a901      	add	r1, sp, #4
   d599c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d599e:	ad07      	add	r5, sp, #28
   d59a0:	f7ff fdb6 	bl	d5510 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d59a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d59a6:	1d3c      	adds	r4, r7, #4
   d59a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d59aa:	682b      	ldr	r3, [r5, #0]
   d59ac:	7023      	strb	r3, [r4, #0]
   d59ae:	e7de      	b.n	d596e <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d59b0:	9800      	ldr	r0, [sp, #0]
   d59b2:	f7fe fe53 	bl	d465c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d59b6:	4638      	mov	r0, r7
   d59b8:	b015      	add	sp, #84	; 0x54
   d59ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d59c0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d59c0:	4b02      	ldr	r3, [pc, #8]	; (d59cc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d59c2:	4a03      	ldr	r2, [pc, #12]	; (d59d0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d59c4:	601a      	str	r2, [r3, #0]
   d59c6:	2200      	movs	r2, #0
   d59c8:	605a      	str	r2, [r3, #4]

} // spark
   d59ca:	4770      	bx	lr
   d59cc:	2003e7c0 	.word	0x2003e7c0
   d59d0:	000d6324 	.word	0x000d6324

000d59d4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d59d4:	f100 0310 	add.w	r3, r0, #16
   d59d8:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d59da:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d59de:	2901      	cmp	r1, #1
   d59e0:	4618      	mov	r0, r3
   d59e2:	d108      	bne.n	d59f6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d59e4:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d59e8:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d59ec:	3a01      	subs	r2, #1
   d59ee:	f103 0310 	add.w	r3, r3, #16
   d59f2:	d1f2      	bne.n	d59da <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d59f4:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d59f6:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d59f8:	bf04      	itt	eq
   d59fa:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d59fe:	1852      	addeq	r2, r2, r1
   d5a00:	e7f4      	b.n	d59ec <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d5a02 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5a02:	4770      	bx	lr

000d5a04 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d5a04:	2000      	movs	r0, #0
   d5a06:	4770      	bx	lr

000d5a08 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5a08:	b510      	push	{r4, lr}
   d5a0a:	2110      	movs	r1, #16
   d5a0c:	4604      	mov	r4, r0
   d5a0e:	f000 faae 	bl	d5f6e <_ZdlPvj>
   d5a12:	4620      	mov	r0, r4
   d5a14:	bd10      	pop	{r4, pc}

000d5a16 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d5a16:	b508      	push	{r3, lr}
      { delete this; }
   d5a18:	f7ff fff6 	bl	d5a08 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5a1c:	bd08      	pop	{r3, pc}

000d5a1e <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d5a1e:	b510      	push	{r4, lr}
      { delete _M_ptr; }
   d5a20:	68c4      	ldr	r4, [r0, #12]
   d5a22:	b17c      	cbz	r4, d5a44 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
            json(nullptr),
            freeJson(false) {
    }

    ~JSONData() {
        delete[] tokens;
   d5a24:	6820      	ldr	r0, [r4, #0]
   d5a26:	b108      	cbz	r0, d5a2c <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0xe>
   d5a28:	f7fe fb39 	bl	d409e <_ZdaPv>
        if (freeJson) {
   d5a2c:	7a23      	ldrb	r3, [r4, #8]
   d5a2e:	b11b      	cbz	r3, d5a38 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
            delete[] json;
   d5a30:	6860      	ldr	r0, [r4, #4]
   d5a32:	b108      	cbz	r0, d5a38 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
   d5a34:	f7fe fb33 	bl	d409e <_ZdaPv>
   d5a38:	4620      	mov	r0, r4
   d5a3a:	210c      	movs	r1, #12
   d5a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5a40:	f000 ba95 	b.w	d5f6e <_ZdlPvj>
   d5a44:	bd10      	pop	{r4, pc}

000d5a46 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5a46:	b510      	push	{r4, lr}
          _M_dispose();
   d5a48:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5a4a:	4604      	mov	r4, r0
          _M_dispose();
   d5a4c:	689b      	ldr	r3, [r3, #8]
   d5a4e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5a50:	68a3      	ldr	r3, [r4, #8]
   d5a52:	3b01      	subs	r3, #1
   d5a54:	60a3      	str	r3, [r4, #8]
   d5a56:	b92b      	cbnz	r3, d5a64 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d5a58:	6823      	ldr	r3, [r4, #0]
   d5a5a:	4620      	mov	r0, r4
   d5a5c:	68db      	ldr	r3, [r3, #12]
    }
   d5a5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d5a62:	4718      	bx	r3
    }
   d5a64:	bd10      	pop	{r4, pc}

000d5a66 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d5a66:	b538      	push	{r3, r4, r5, lr}
   d5a68:	680b      	ldr	r3, [r1, #0]
   d5a6a:	6003      	str	r3, [r0, #0]
   d5a6c:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d5a6e:	6843      	ldr	r3, [r0, #4]
   d5a70:	429d      	cmp	r5, r3
    class __shared_ptr
   d5a72:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d5a74:	d00c      	beq.n	d5a90 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d5a76:	b115      	cbz	r5, d5a7e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d5a78:	686b      	ldr	r3, [r5, #4]
   d5a7a:	3301      	adds	r3, #1
   d5a7c:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d5a7e:	6860      	ldr	r0, [r4, #4]
   d5a80:	b128      	cbz	r0, d5a8e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d5a82:	6843      	ldr	r3, [r0, #4]
   d5a84:	3b01      	subs	r3, #1
   d5a86:	6043      	str	r3, [r0, #4]
   d5a88:	b90b      	cbnz	r3, d5a8e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d5a8a:	f7ff ffdc 	bl	d5a46 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d5a8e:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d5a90:	4620      	mov	r0, r4
   d5a92:	bd38      	pop	{r3, r4, r5, pc}

000d5a94 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d5a94:	460b      	mov	r3, r1
   d5a96:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d5a98:	2200      	movs	r2, #0
   d5a9a:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d5a9c:	e9c0 2200 	strd	r2, r2, [r0]
   d5aa0:	4604      	mov	r4, r0
        JSONValue() {
    if (t) {
        t_ = t;
   d5aa2:	6083      	str	r3, [r0, #8]
    if (t) {
   d5aa4:	b90b      	cbnz	r3, d5aaa <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
        d_ = d;
    }
}
   d5aa6:	4620      	mov	r0, r4
   d5aa8:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d5aaa:	f7ff ffdc 	bl	d5a66 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d5aae:	e7fa      	b.n	d5aa6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d5ab0 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>:
        return JSONValue();
    }
    return JSONValue(d->tokens, d);
}

bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d5ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5ab4:	b086      	sub	sp, #24
   d5ab6:	4607      	mov	r7, r0
   d5ab8:	4688      	mov	r8, r1
    jsmn_parser parser;
    parser.size = sizeof(jsmn_parser);
    jsmn_init(&parser, nullptr);
   d5aba:	a802      	add	r0, sp, #8
   d5abc:	2100      	movs	r1, #0
    const int n = jsmn_parse(&parser, json, size, nullptr, 0, nullptr); // Get number of tokens
   d5abe:	2400      	movs	r4, #0
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d5ac0:	4699      	mov	r9, r3
    parser.size = sizeof(jsmn_parser);
   d5ac2:	2310      	movs	r3, #16
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d5ac4:	4692      	mov	sl, r2
    parser.size = sizeof(jsmn_parser);
   d5ac6:	9302      	str	r3, [sp, #8]
    jsmn_init(&parser, nullptr);
   d5ac8:	f7fe fee0 	bl	d488c <jsmn_init>
    const int n = jsmn_parse(&parser, json, size, nullptr, 0, nullptr); // Get number of tokens
   d5acc:	e9cd 4400 	strd	r4, r4, [sp]
   d5ad0:	4623      	mov	r3, r4
   d5ad2:	4642      	mov	r2, r8
   d5ad4:	4639      	mov	r1, r7
   d5ad6:	a802      	add	r0, sp, #8
   d5ad8:	f7fe fee0 	bl	d489c <jsmn_parse>
    if (n <= 0) {
   d5adc:	1e06      	subs	r6, r0, #0
   d5ade:	dd1e      	ble.n	d5b1e <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x6e>
        return false; // Parsing error
    }
    std::unique_ptr<jsmntok_t[]> t(new(std::nothrow) jsmntok_t[n]);
   d5ae0:	4910      	ldr	r1, [pc, #64]	; (d5b24 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x74>)
   d5ae2:	0130      	lsls	r0, r6, #4
   d5ae4:	f000 fa47 	bl	d5f76 <_ZnajRKSt9nothrow_t>
    if (!t) {
   d5ae8:	4605      	mov	r5, r0
   d5aea:	b190      	cbz	r0, d5b12 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x62>
        return false;
    }
    jsmn_init(&parser, nullptr); // Reset parser
   d5aec:	4621      	mov	r1, r4
   d5aee:	a802      	add	r0, sp, #8
   d5af0:	f7fe fecc 	bl	d488c <jsmn_init>
    if (jsmn_parse(&parser, json, size, t.get(), n, nullptr) <= 0) {
   d5af4:	e9cd 6400 	strd	r6, r4, [sp]
   d5af8:	462b      	mov	r3, r5
   d5afa:	4642      	mov	r2, r8
   d5afc:	4639      	mov	r1, r7
   d5afe:	a802      	add	r0, sp, #8
   d5b00:	f7fe fecc 	bl	d489c <jsmn_parse>
   d5b04:	42a0      	cmp	r0, r4
   d5b06:	dd07      	ble.n	d5b18 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x68>
        return false;
    }
    *tokens = t.release();
   d5b08:	f8ca 5000 	str.w	r5, [sl]
    *count = n;
    return true;
   d5b0c:	2001      	movs	r0, #1
    *count = n;
   d5b0e:	f8c9 6000 	str.w	r6, [r9]
}
   d5b12:	b006      	add	sp, #24
   d5b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      typename enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type
	operator()(_Up* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5b18:	4628      	mov	r0, r5
   d5b1a:	f7fe fac0 	bl	d409e <_ZdaPv>
      }
   d5b1e:	4620      	mov	r0, r4
   d5b20:	e7f7      	b.n	d5b12 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x62>
   d5b22:	bf00      	nop
   d5b24:	000d636c 	.word	0x000d636c

000d5b28 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>:
        ++t;
    }
    return true;
}

bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d5b28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *str = json + t->start; // Destination string
   d5b2c:	6843      	ldr	r3, [r0, #4]
    const char* const end = json + t->end; // End of the source string
   d5b2e:	6886      	ldr	r6, [r0, #8]
    char *str = json + t->start; // Destination string
   d5b30:	440b      	add	r3, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d5b32:	4688      	mov	r8, r1
    const char* const end = json + t->end; // End of the source string
   d5b34:	440e      	add	r6, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d5b36:	4607      	mov	r7, r0
    const char *s1 = str; // Beginning of an unescaped sequence
    const char *s = s1;
   d5b38:	461c      	mov	r4, r3
    const char *s1 = str; // Beginning of an unescaped sequence
   d5b3a:	4619      	mov	r1, r3
                    break;
                case 'f': // Form feed
                    *str = 0x0c;
                    break;
                case 'r': // Carriage return
                    *str = 0x0d;
   d5b3c:	f04f 090d 	mov.w	r9, #13
                    *str = 0x09;
   d5b40:	f04f 0a09 	mov.w	sl, #9
    while (s != end) {
   d5b44:	42b4      	cmp	r4, r6
   d5b46:	d063      	beq.n	d5c10 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe8>
        if (*s == '\\') {
   d5b48:	4625      	mov	r5, r4
   d5b4a:	f815 2b01 	ldrb.w	r2, [r5], #1
   d5b4e:	2a5c      	cmp	r2, #92	; 0x5c
   d5b50:	d12b      	bne.n	d5baa <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x82>
            if (s != s1) {
   d5b52:	42a1      	cmp	r1, r4
   d5b54:	d007      	beq.n	d5b66 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x3e>
                const size_t n = s - s1;
   d5b56:	eba4 0b01 	sub.w	fp, r4, r1
                memmove(str, s1, n); // Shift preceeding characters
   d5b5a:	4618      	mov	r0, r3
   d5b5c:	465a      	mov	r2, fp
   d5b5e:	f000 fa2b 	bl	d5fb8 <memmove>
   d5b62:	4603      	mov	r3, r0
                str += n;
   d5b64:	445b      	add	r3, fp
            if (s == end) {
   d5b66:	42b5      	cmp	r5, r6
   d5b68:	d039      	beq.n	d5bde <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            if (*s == 'u') { // Arbitrary character, e.g. "\u001f"
   d5b6a:	7862      	ldrb	r2, [r4, #1]
   d5b6c:	2a75      	cmp	r2, #117	; 0x75
   d5b6e:	d12a      	bne.n	d5bc6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x9e>
                ++s;
   d5b70:	1ca2      	adds	r2, r4, #2
                if (end - s < 4) {
   d5b72:	1ab2      	subs	r2, r6, r2
   d5b74:	2a03      	cmp	r2, #3
   d5b76:	dd32      	ble.n	d5bde <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
    const char* const end = s + size;
   d5b78:	1da0      	adds	r0, r4, #6
   d5b7a:	f104 0e05 	add.w	lr, r4, #5
    uint32_t v = 0;
   d5b7e:	f04f 0c00 	mov.w	ip, #0
    while (s != end) {
   d5b82:	45ae      	cmp	lr, r5
   d5b84:	d053      	beq.n	d5c2e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x106>
        const char c = *s;
   d5b86:	f815 1f01 	ldrb.w	r1, [r5, #1]!
        if (c >= '0' && c <= '9') {
   d5b8a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   d5b8e:	fa5f fb82 	uxtb.w	fp, r2
   d5b92:	f1bb 0f09 	cmp.w	fp, #9
   d5b96:	d905      	bls.n	d5ba4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
        } else if (c >= 'a' && c <= 'f') {
   d5b98:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   d5b9c:	2a05      	cmp	r2, #5
   d5b9e:	d807      	bhi.n	d5bb0 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x88>
            n = c - 'a' + 10;
   d5ba0:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
        v = (v << 4) | n;
   d5ba4:	ea42 1c0c 	orr.w	ip, r2, ip, lsl #4
    while (s != end) {
   d5ba8:	e7eb      	b.n	d5b82 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x5a>
   d5baa:	4628      	mov	r0, r5
   d5bac:	4604      	mov	r4, r0
   d5bae:	e7c9      	b.n	d5b44 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x1c>
        } else if (c >= 'A' && c <= 'F') {
   d5bb0:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   d5bb4:	2a05      	cmp	r2, #5
   d5bb6:	d812      	bhi.n	d5bde <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            n = c - 'A' + 10;
   d5bb8:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   d5bbc:	e7f2      	b.n	d5ba4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
                    *str = u;
   d5bbe:	f803 cb01 	strb.w	ip, [r3], #1
                    s1 += 6; // Skip escaped sequence
   d5bc2:	4601      	mov	r1, r0
   d5bc4:	e7f2      	b.n	d5bac <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                switch (*s) {
   d5bc6:	2a6e      	cmp	r2, #110	; 0x6e
   d5bc8:	d01c      	beq.n	d5c04 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xdc>
   d5bca:	d80e      	bhi.n	d5bea <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xc2>
   d5bcc:	2a62      	cmp	r2, #98	; 0x62
   d5bce:	d013      	beq.n	d5bf8 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd0>
   d5bd0:	d807      	bhi.n	d5be2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xba>
   d5bd2:	2a2f      	cmp	r2, #47	; 0x2f
   d5bd4:	d011      	beq.n	d5bfa <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   d5bd6:	2a5c      	cmp	r2, #92	; 0x5c
   d5bd8:	d00f      	beq.n	d5bfa <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   d5bda:	2a22      	cmp	r2, #34	; 0x22
   d5bdc:	d00d      	beq.n	d5bfa <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                return false; // Unexpected end of string
   d5bde:	2000      	movs	r0, #0
   d5be0:	e023      	b.n	d5c2a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x102>
                switch (*s) {
   d5be2:	2a66      	cmp	r2, #102	; 0x66
   d5be4:	d1fb      	bne.n	d5bde <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x0c;
   d5be6:	220c      	movs	r2, #12
   d5be8:	e007      	b.n	d5bfa <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                switch (*s) {
   d5bea:	2a72      	cmp	r2, #114	; 0x72
   d5bec:	d00d      	beq.n	d5c0a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe2>
   d5bee:	2a74      	cmp	r2, #116	; 0x74
   d5bf0:	d1f5      	bne.n	d5bde <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x09;
   d5bf2:	f883 a000 	strb.w	sl, [r3]
                    break;
   d5bf6:	e001      	b.n	d5bfc <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
                    *str = 0x08;
   d5bf8:	2208      	movs	r2, #8
   d5bfa:	701a      	strb	r2, [r3, #0]
                    break;
                default:
                    return false; // Invalid escaped sequence
                }
                ++str;
                ++s;
   d5bfc:	1ca1      	adds	r1, r4, #2
                ++str;
   d5bfe:	3301      	adds	r3, #1
                ++s;
   d5c00:	4608      	mov	r0, r1
   d5c02:	e7d3      	b.n	d5bac <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                    *str = 0x0a;
   d5c04:	f04f 020a 	mov.w	r2, #10
   d5c08:	e7f7      	b.n	d5bfa <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                    *str = 0x0d;
   d5c0a:	f883 9000 	strb.w	r9, [r3]
                    break;
   d5c0e:	e7f5      	b.n	d5bfc <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
            }
        } else {
            ++s;
        }
    }
    if (s != s1) {
   d5c10:	42a1      	cmp	r1, r4
   d5c12:	d006      	beq.n	d5c22 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xfa>
        const size_t n = s - s1;
   d5c14:	1a64      	subs	r4, r4, r1
        memmove(str, s1, n); // Shift remaining characters
   d5c16:	4618      	mov	r0, r3
   d5c18:	4622      	mov	r2, r4
   d5c1a:	f000 f9cd 	bl	d5fb8 <memmove>
   d5c1e:	4603      	mov	r3, r0
        str += n;
   d5c20:	4423      	add	r3, r4
    }
    t->end = str - json; // Update string length
   d5c22:	eba3 0308 	sub.w	r3, r3, r8
   d5c26:	60bb      	str	r3, [r7, #8]
    return true;
   d5c28:	2001      	movs	r0, #1
}
   d5c2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (u <= 0x7f) { // Processing only code points within the basic latin block
   d5c2e:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   d5c32:	d9c4      	bls.n	d5bbe <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x96>
   d5c34:	4621      	mov	r1, r4
   d5c36:	e7b9      	b.n	d5bac <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>

000d5c38 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>:
bool spark::JSONValue::stringize(jsmntok_t *t, size_t count, char *json) {
   d5c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5c3a:	4604      	mov	r4, r0
   d5c3c:	4615      	mov	r5, r2
    const jsmntok_t* const end = t + count;
   d5c3e:	eb00 1601 	add.w	r6, r0, r1, lsl #4
            json[t->end] = '\0';
   d5c42:	2700      	movs	r7, #0
    while (t != end) {
   d5c44:	42b4      	cmp	r4, r6
   d5c46:	d010      	beq.n	d5c6a <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x32>
        if (t->type == JSMN_STRING) {
   d5c48:	7823      	ldrb	r3, [r4, #0]
   d5c4a:	2b03      	cmp	r3, #3
   d5c4c:	d108      	bne.n	d5c60 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x28>
            if (!unescape(t, json)) {
   d5c4e:	4629      	mov	r1, r5
   d5c50:	4620      	mov	r0, r4
   d5c52:	f7ff ff69 	bl	d5b28 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>
   d5c56:	b148      	cbz	r0, d5c6c <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x34>
            json[t->end] = '\0';
   d5c58:	68a3      	ldr	r3, [r4, #8]
   d5c5a:	54ef      	strb	r7, [r5, r3]
        ++t;
   d5c5c:	3410      	adds	r4, #16
    while (t != end) {
   d5c5e:	e7f1      	b.n	d5c44 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0xc>
        } else if (t->type == JSMN_PRIMITIVE) {
   d5c60:	2b00      	cmp	r3, #0
   d5c62:	d1fb      	bne.n	d5c5c <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
            json[t->end] = '\0';
   d5c64:	68a2      	ldr	r2, [r4, #8]
   d5c66:	54ab      	strb	r3, [r5, r2]
   d5c68:	e7f8      	b.n	d5c5c <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
    return true;
   d5c6a:	2001      	movs	r0, #1
}
   d5c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d5c70 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d5c70:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d5c72:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d5c74:	e9c0 3300 	strd	r3, r3, [r0]
   d5c78:	4604      	mov	r4, r0
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d5c7a:	480e      	ldr	r0, [pc, #56]	; (d5cb4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d5c7c:	e9c4 0302 	strd	r0, r3, [r4, #8]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d5c80:	b1a9      	cbz	r1, d5cae <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d5c82:	780b      	ldrb	r3, [r1, #0]
   d5c84:	2b03      	cmp	r3, #3
   d5c86:	d006      	beq.n	d5c96 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d5c88:	b98b      	cbnz	r3, d5cae <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d5c8a:	6813      	ldr	r3, [r2, #0]
   d5c8c:	6858      	ldr	r0, [r3, #4]
   d5c8e:	684b      	ldr	r3, [r1, #4]
   d5c90:	5cc3      	ldrb	r3, [r0, r3]
   d5c92:	2b6e      	cmp	r3, #110	; 0x6e
   d5c94:	d007      	beq.n	d5ca6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d5c96:	6813      	ldr	r3, [r2, #0]
   d5c98:	684d      	ldr	r5, [r1, #4]
   d5c9a:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d5c9c:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d5c9e:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d5ca0:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d5ca2:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d5ca4:	60e3      	str	r3, [r4, #12]
   d5ca6:	4611      	mov	r1, r2
   d5ca8:	4620      	mov	r0, r4
   d5caa:	f7ff fedc 	bl	d5a66 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
        }
        d_ = d;
    }
}
   d5cae:	4620      	mov	r0, r4
   d5cb0:	bd38      	pop	{r3, r4, r5, pc}
   d5cb2:	bf00      	nop
   d5cb4:	000d6189 	.word	0x000d6189

000d5cb8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d5cb8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d5cba:	2500      	movs	r5, #0
   d5cbc:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d5cbe:	e9c0 5500 	strd	r5, r5, [r0]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d5cc2:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d5cc6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d5cca:	4604      	mov	r4, r0
   d5ccc:	4611      	mov	r1, r2
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d5cce:	b14b      	cbz	r3, d5ce4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d5cd0:	781a      	ldrb	r2, [r3, #0]
   d5cd2:	2a01      	cmp	r2, #1
   d5cd4:	d106      	bne.n	d5ce4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d5cd6:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d5cda:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d5cdc:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d5cde:	6143      	str	r3, [r0, #20]
   d5ce0:	f7ff fec1 	bl	d5a66 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
        d_ = d;
    }
}
   d5ce4:	4620      	mov	r0, r4
   d5ce6:	bd38      	pop	{r3, r4, r5, pc}

000d5ce8 <_ZN5spark18JSONObjectIterator4nextEv>:

bool spark::JSONObjectIterator::next() {
   d5ce8:	b510      	push	{r4, lr}
    if (!n_) {
   d5cea:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d5cec:	4604      	mov	r4, r0
    if (!n_) {
   d5cee:	b163      	cbz	r3, d5d0a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
        return false;
    }
    k_ = t_; // Name
   d5cf0:	6880      	ldr	r0, [r0, #8]
   d5cf2:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d5cf4:	3b01      	subs	r3, #1
    ++t_;
   d5cf6:	3010      	adds	r0, #16
   d5cf8:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d5cfa:	6120      	str	r0, [r4, #16]
    --n_;
   d5cfc:	6163      	str	r3, [r4, #20]
    if (n_) {
   d5cfe:	b113      	cbz	r3, d5d06 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d5d00:	f7ff fe68 	bl	d59d4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d5d04:	60a0      	str	r0, [r4, #8]
    }
    return true;
   d5d06:	2001      	movs	r0, #1
   d5d08:	e000      	b.n	d5d0c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d5d0a:	4618      	mov	r0, r3
}
   d5d0c:	bd10      	pop	{r4, pc}
	...

000d5d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d5d10:	b538      	push	{r3, r4, r5, lr}
   d5d12:	2300      	movs	r3, #0
   d5d14:	4604      	mov	r4, r0
   d5d16:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5d18:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d5d1a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5d1c:	f7fe f9b9 	bl	d4092 <_Znwj>
   d5d20:	b128      	cbz	r0, d5d2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d5d22:	2301      	movs	r3, #1
   d5d24:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d5d28:	4b02      	ldr	r3, [pc, #8]	; (d5d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x24>)
   d5d2a:	6003      	str	r3, [r0, #0]
   d5d2c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5d2e:	6020      	str	r0, [r4, #0]
	}
   d5d30:	4620      	mov	r0, r4
   d5d32:	bd38      	pop	{r3, r4, r5, pc}
   d5d34:	000d6358 	.word	0x000d6358

000d5d38 <_ZN5spark9JSONValue9parseCopyEPKcj>:
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   d5d38:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5d3a:	4604      	mov	r4, r0
   d5d3c:	b087      	sub	sp, #28
   d5d3e:	460e      	mov	r6, r1
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   d5d40:	200c      	movs	r0, #12
   d5d42:	4927      	ldr	r1, [pc, #156]	; (d5de0 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   d5d44:	4615      	mov	r5, r2
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   d5d46:	f000 f914 	bl	d5f72 <_ZnwjRKSt9nothrow_t>
   d5d4a:	4601      	mov	r1, r0
   d5d4c:	b118      	cbz	r0, d5d56 <_ZN5spark9JSONValue9parseCopyEPKcj+0x1e>
            freeJson(false) {
   d5d4e:	2300      	movs	r3, #0
   d5d50:	e9c0 3300 	strd	r3, r3, [r0]
   d5d54:	7203      	strb	r3, [r0, #8]
	: __shared_count(__p)
   d5d56:	a803      	add	r0, sp, #12
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5d58:	9102      	str	r1, [sp, #8]
	: __shared_count(__p)
   d5d5a:	f7ff ffd9 	bl	d5d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>
    if (!d) {
   d5d5e:	9a02      	ldr	r2, [sp, #8]
   d5d60:	b942      	cbnz	r2, d5d74 <_ZN5spark9JSONValue9parseCopyEPKcj+0x3c>
      constexpr __shared_count() noexcept : _M_pi(0)
   d5d62:	e9c4 2200 	strd	r2, r2, [r4]
        t_(nullptr) {
   d5d66:	60a2      	str	r2, [r4, #8]
      ~__shared_ptr() = default;
   d5d68:	a803      	add	r0, sp, #12
   d5d6a:	f7fe fa55 	bl	d4218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5d6e:	4620      	mov	r0, r4
   d5d70:	b007      	add	sp, #28
   d5d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    size_t tokenCount = 0;
   d5d74:	2300      	movs	r3, #0
   d5d76:	9301      	str	r3, [sp, #4]
    if (!tokenize(json, size, &d->tokens, &tokenCount)) {
   d5d78:	4629      	mov	r1, r5
   d5d7a:	ab01      	add	r3, sp, #4
   d5d7c:	4630      	mov	r0, r6
   d5d7e:	f7ff fe97 	bl	d5ab0 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>
   d5d82:	b918      	cbnz	r0, d5d8c <_ZN5spark9JSONValue9parseCopyEPKcj+0x54>
      constexpr __shared_count() noexcept : _M_pi(0)
   d5d84:	e9c4 0000 	strd	r0, r0, [r4]
   d5d88:	60a0      	str	r0, [r4, #8]
}
   d5d8a:	e7ed      	b.n	d5d68 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
    d->json = new(std::nothrow) char[size + 1];
   d5d8c:	4914      	ldr	r1, [pc, #80]	; (d5de0 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5d8e:	9f02      	ldr	r7, [sp, #8]
   d5d90:	1c68      	adds	r0, r5, #1
   d5d92:	f000 f8f0 	bl	d5f76 <_ZnajRKSt9nothrow_t>
    if (!d->json) {
   d5d96:	9b02      	ldr	r3, [sp, #8]
    d->json = new(std::nothrow) char[size + 1];
   d5d98:	6078      	str	r0, [r7, #4]
    if (!d->json) {
   d5d9a:	6858      	ldr	r0, [r3, #4]
   d5d9c:	2800      	cmp	r0, #0
   d5d9e:	d0f1      	beq.n	d5d84 <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
    memcpy(d->json, json, size); // TODO: Copy only token data
   d5da0:	462a      	mov	r2, r5
   d5da2:	4631      	mov	r1, r6
   d5da4:	f000 f8fa 	bl	d5f9c <memcpy>
   d5da8:	9b02      	ldr	r3, [sp, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   d5daa:	9901      	ldr	r1, [sp, #4]
   d5dac:	6818      	ldr	r0, [r3, #0]
    d->freeJson = true;
   d5dae:	2201      	movs	r2, #1
   d5db0:	721a      	strb	r2, [r3, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   d5db2:	685a      	ldr	r2, [r3, #4]
   d5db4:	f7ff ff40 	bl	d5c38 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>
   d5db8:	2800      	cmp	r0, #0
   d5dba:	d0e3      	beq.n	d5d84 <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
   d5dbc:	9b02      	ldr	r3, [sp, #8]
    return JSONValue(d->tokens, d);
   d5dbe:	6819      	ldr	r1, [r3, #0]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5dc0:	9304      	str	r3, [sp, #16]
      : _M_pi(__r._M_pi)
   d5dc2:	9b03      	ldr	r3, [sp, #12]
   d5dc4:	9305      	str	r3, [sp, #20]
	if (_M_pi != 0)
   d5dc6:	b113      	cbz	r3, d5dce <_ZN5spark9JSONValue9parseCopyEPKcj+0x96>
    { ++_M_use_count; }
   d5dc8:	685a      	ldr	r2, [r3, #4]
   d5dca:	3201      	adds	r2, #1
   d5dcc:	605a      	str	r2, [r3, #4]
   d5dce:	aa04      	add	r2, sp, #16
   d5dd0:	4620      	mov	r0, r4
   d5dd2:	f7ff fe5f 	bl	d5a94 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d5dd6:	a805      	add	r0, sp, #20
   d5dd8:	f7fe fa1e 	bl	d4218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5ddc:	e7c4      	b.n	d5d68 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
   d5dde:	bf00      	nop
   d5de0:	000d636c 	.word	0x000d636c

000d5de4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d5de4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d5de6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d5de8:	d902      	bls.n	d5df0 <pinAvailable+0xc>
    return false;
   d5dea:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d5dec:	b002      	add	sp, #8
   d5dee:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d5df0:	f1a0 030b 	sub.w	r3, r0, #11
   d5df4:	2b02      	cmp	r3, #2
   d5df6:	d81a      	bhi.n	d5e2e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5df8:	4c17      	ldr	r4, [pc, #92]	; (d5e58 <pinAvailable+0x74>)
   d5dfa:	7821      	ldrb	r1, [r4, #0]
   d5dfc:	f3bf 8f5b 	dmb	ish
   d5e00:	f011 0101 	ands.w	r1, r1, #1
   d5e04:	d10b      	bne.n	d5e1e <pinAvailable+0x3a>
   d5e06:	4620      	mov	r0, r4
   d5e08:	9101      	str	r1, [sp, #4]
   d5e0a:	f7fe f94a 	bl	d40a2 <__cxa_guard_acquire>
   d5e0e:	9901      	ldr	r1, [sp, #4]
   d5e10:	b128      	cbz	r0, d5e1e <pinAvailable+0x3a>
   d5e12:	4812      	ldr	r0, [pc, #72]	; (d5e5c <pinAvailable+0x78>)
   d5e14:	f7fe fe64 	bl	d4ae0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5e18:	4620      	mov	r0, r4
   d5e1a:	f7fe f947 	bl	d40ac <__cxa_guard_release>
   d5e1e:	4b0f      	ldr	r3, [pc, #60]	; (d5e5c <pinAvailable+0x78>)
   d5e20:	7818      	ldrb	r0, [r3, #0]
   d5e22:	f7fe fcfb 	bl	d481c <hal_spi_is_enabled>
   d5e26:	2800      	cmp	r0, #0
   d5e28:	d1df      	bne.n	d5dea <pinAvailable+0x6>
  return true; // 'pin' is available
   d5e2a:	2001      	movs	r0, #1
   d5e2c:	e7de      	b.n	d5dec <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d5e2e:	2801      	cmp	r0, #1
   d5e30:	d809      	bhi.n	d5e46 <pinAvailable+0x62>
   d5e32:	f000 f86f 	bl	d5f14 <_Z19__fetch_global_Wirev>
   d5e36:	2100      	movs	r1, #0
   d5e38:	7c00      	ldrb	r0, [r0, #16]
   d5e3a:	f7fe fcd7 	bl	d47ec <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d5e3e:	f080 0001 	eor.w	r0, r0, #1
   d5e42:	b2c0      	uxtb	r0, r0
   d5e44:	e7d2      	b.n	d5dec <pinAvailable+0x8>
   d5e46:	3809      	subs	r0, #9
   d5e48:	2801      	cmp	r0, #1
   d5e4a:	d8ee      	bhi.n	d5e2a <pinAvailable+0x46>
   d5e4c:	f7ff fc60 	bl	d5710 <_Z22__fetch_global_Serial1v>
   d5e50:	7c00      	ldrb	r0, [r0, #16]
   d5e52:	f7fe fc93 	bl	d477c <hal_usart_is_enabled>
   d5e56:	e7f2      	b.n	d5e3e <pinAvailable+0x5a>
   d5e58:	2003e7c8 	.word	0x2003e7c8
   d5e5c:	2003e7cc 	.word	0x2003e7cc

000d5e60 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5e60:	2823      	cmp	r0, #35	; 0x23
{
   d5e62:	b538      	push	{r3, r4, r5, lr}
   d5e64:	4604      	mov	r4, r0
   d5e66:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5e68:	d80a      	bhi.n	d5e80 <pinMode+0x20>
   d5e6a:	29ff      	cmp	r1, #255	; 0xff
   d5e6c:	d008      	beq.n	d5e80 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d5e6e:	f7ff ffb9 	bl	d5de4 <pinAvailable>
   d5e72:	b128      	cbz	r0, d5e80 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d5e74:	4629      	mov	r1, r5
   d5e76:	4620      	mov	r0, r4
}
   d5e78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d5e7c:	f7fe bc06 	b.w	d468c <HAL_Pin_Mode>
}
   d5e80:	bd38      	pop	{r3, r4, r5, pc}

000d5e82 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5e82:	b538      	push	{r3, r4, r5, lr}
   d5e84:	4604      	mov	r4, r0
   d5e86:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5e88:	f7fe fc08 	bl	d469c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5e8c:	28ff      	cmp	r0, #255	; 0xff
   d5e8e:	d010      	beq.n	d5eb2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d5e90:	2806      	cmp	r0, #6
   d5e92:	d804      	bhi.n	d5e9e <digitalWrite+0x1c>
   d5e94:	234d      	movs	r3, #77	; 0x4d
   d5e96:	fa23 f000 	lsr.w	r0, r3, r0
   d5e9a:	07c3      	lsls	r3, r0, #31
   d5e9c:	d409      	bmi.n	d5eb2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5e9e:	4620      	mov	r0, r4
   d5ea0:	f7ff ffa0 	bl	d5de4 <pinAvailable>
   d5ea4:	b128      	cbz	r0, d5eb2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5ea6:	4629      	mov	r1, r5
   d5ea8:	4620      	mov	r0, r4
}
   d5eaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d5eae:	f7fe bbfd 	b.w	d46ac <HAL_GPIO_Write>
}
   d5eb2:	bd38      	pop	{r3, r4, r5, pc}

000d5eb4 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d5eb4:	280d      	cmp	r0, #13
{
   d5eb6:	b510      	push	{r4, lr}
   d5eb8:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d5eba:	bf9c      	itt	ls
   d5ebc:	340e      	addls	r4, #14
   d5ebe:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5ec0:	4620      	mov	r0, r4
   d5ec2:	f7ff ff8f 	bl	d5de4 <pinAvailable>
   d5ec6:	b150      	cbz	r0, d5ede <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d5ec8:	2103      	movs	r1, #3
   d5eca:	4620      	mov	r0, r4
   d5ecc:	f7fe fbd6 	bl	d467c <HAL_Validate_Pin_Function>
   d5ed0:	2803      	cmp	r0, #3
   d5ed2:	d104      	bne.n	d5ede <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d5ed4:	4620      	mov	r0, r4
}
   d5ed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d5eda:	f7fe bbef 	b.w	d46bc <hal_adc_read>
}
   d5ede:	2000      	movs	r0, #0
   d5ee0:	bd10      	pop	{r4, pc}
	...

000d5ee4 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d5ee4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d5ee6:	2300      	movs	r3, #0
   d5ee8:	2520      	movs	r5, #32
   d5eea:	8043      	strh	r3, [r0, #2]
   d5eec:	2314      	movs	r3, #20
{
   d5eee:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d5ef0:	8003      	strh	r3, [r0, #0]
   d5ef2:	6085      	str	r5, [r0, #8]
   d5ef4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5ef6:	4906      	ldr	r1, [pc, #24]	; (d5f10 <_Z17acquireWireBufferv+0x2c>)
   d5ef8:	4628      	mov	r0, r5
   d5efa:	f000 f83c 	bl	d5f76 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5efe:	4904      	ldr	r1, [pc, #16]	; (d5f10 <_Z17acquireWireBufferv+0x2c>)
	};
   d5f00:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5f02:	4628      	mov	r0, r5
   d5f04:	f000 f837 	bl	d5f76 <_ZnajRKSt9nothrow_t>
	};
   d5f08:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d5f0a:	4620      	mov	r0, r4
   d5f0c:	bd38      	pop	{r3, r4, r5, pc}
   d5f0e:	bf00      	nop
   d5f10:	000d636c 	.word	0x000d636c

000d5f14 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5f14:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5f16:	4d0f      	ldr	r5, [pc, #60]	; (d5f54 <_Z19__fetch_global_Wirev+0x40>)
   d5f18:	7829      	ldrb	r1, [r5, #0]
   d5f1a:	f3bf 8f5b 	dmb	ish
   d5f1e:	f011 0401 	ands.w	r4, r1, #1
{
   d5f22:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5f24:	d113      	bne.n	d5f4e <_Z19__fetch_global_Wirev+0x3a>
   d5f26:	4628      	mov	r0, r5
   d5f28:	f7fe f8bb 	bl	d40a2 <__cxa_guard_acquire>
   d5f2c:	b178      	cbz	r0, d5f4e <_Z19__fetch_global_Wirev+0x3a>
   d5f2e:	a801      	add	r0, sp, #4
   d5f30:	f7ff ffd8 	bl	d5ee4 <_Z17acquireWireBufferv>
   d5f34:	aa01      	add	r2, sp, #4
   d5f36:	4621      	mov	r1, r4
   d5f38:	4807      	ldr	r0, [pc, #28]	; (d5f58 <_Z19__fetch_global_Wirev+0x44>)
   d5f3a:	f7ff fc53 	bl	d57e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d5f3e:	4628      	mov	r0, r5
   d5f40:	f7fe f8b4 	bl	d40ac <__cxa_guard_release>
   d5f44:	4a05      	ldr	r2, [pc, #20]	; (d5f5c <_Z19__fetch_global_Wirev+0x48>)
   d5f46:	4906      	ldr	r1, [pc, #24]	; (d5f60 <_Z19__fetch_global_Wirev+0x4c>)
   d5f48:	4803      	ldr	r0, [pc, #12]	; (d5f58 <_Z19__fetch_global_Wirev+0x44>)
   d5f4a:	f000 f80b 	bl	d5f64 <__aeabi_atexit>
	return wire;
}
   d5f4e:	4802      	ldr	r0, [pc, #8]	; (d5f58 <_Z19__fetch_global_Wirev+0x44>)
   d5f50:	b007      	add	sp, #28
   d5f52:	bd30      	pop	{r4, r5, pc}
   d5f54:	2003e7d8 	.word	0x2003e7d8
   d5f58:	2003e7dc 	.word	0x2003e7dc
   d5f5c:	2003e634 	.word	0x2003e634
   d5f60:	000d578d 	.word	0x000d578d

000d5f64 <__aeabi_atexit>:
   d5f64:	460b      	mov	r3, r1
   d5f66:	4601      	mov	r1, r0
   d5f68:	4618      	mov	r0, r3
   d5f6a:	f000 b809 	b.w	d5f80 <__cxa_atexit>

000d5f6e <_ZdlPvj>:
   d5f6e:	f7fe b894 	b.w	d409a <_ZdlPv>

000d5f72 <_ZnwjRKSt9nothrow_t>:
   d5f72:	f7fe b88e 	b.w	d4092 <_Znwj>

000d5f76 <_ZnajRKSt9nothrow_t>:
   d5f76:	f7fe b88e 	b.w	d4096 <_Znaj>

000d5f7a <_ZSt25__throw_bad_function_callv>:
   d5f7a:	b508      	push	{r3, lr}
   d5f7c:	f7fe fd5a 	bl	d4a34 <abort>

000d5f80 <__cxa_atexit>:
   d5f80:	b510      	push	{r4, lr}
   d5f82:	4c05      	ldr	r4, [pc, #20]	; (d5f98 <__cxa_atexit+0x18>)
   d5f84:	4613      	mov	r3, r2
   d5f86:	b12c      	cbz	r4, d5f94 <__cxa_atexit+0x14>
   d5f88:	460a      	mov	r2, r1
   d5f8a:	4601      	mov	r1, r0
   d5f8c:	2002      	movs	r0, #2
   d5f8e:	f3af 8000 	nop.w
   d5f92:	bd10      	pop	{r4, pc}
   d5f94:	4620      	mov	r0, r4
   d5f96:	e7fc      	b.n	d5f92 <__cxa_atexit+0x12>
   d5f98:	00000000 	.word	0x00000000

000d5f9c <memcpy>:
   d5f9c:	440a      	add	r2, r1
   d5f9e:	4291      	cmp	r1, r2
   d5fa0:	f100 33ff 	add.w	r3, r0, #4294967295
   d5fa4:	d100      	bne.n	d5fa8 <memcpy+0xc>
   d5fa6:	4770      	bx	lr
   d5fa8:	b510      	push	{r4, lr}
   d5faa:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5fae:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5fb2:	4291      	cmp	r1, r2
   d5fb4:	d1f9      	bne.n	d5faa <memcpy+0xe>
   d5fb6:	bd10      	pop	{r4, pc}

000d5fb8 <memmove>:
   d5fb8:	4288      	cmp	r0, r1
   d5fba:	b510      	push	{r4, lr}
   d5fbc:	eb01 0402 	add.w	r4, r1, r2
   d5fc0:	d902      	bls.n	d5fc8 <memmove+0x10>
   d5fc2:	4284      	cmp	r4, r0
   d5fc4:	4623      	mov	r3, r4
   d5fc6:	d807      	bhi.n	d5fd8 <memmove+0x20>
   d5fc8:	1e43      	subs	r3, r0, #1
   d5fca:	42a1      	cmp	r1, r4
   d5fcc:	d008      	beq.n	d5fe0 <memmove+0x28>
   d5fce:	f811 2b01 	ldrb.w	r2, [r1], #1
   d5fd2:	f803 2f01 	strb.w	r2, [r3, #1]!
   d5fd6:	e7f8      	b.n	d5fca <memmove+0x12>
   d5fd8:	4402      	add	r2, r0
   d5fda:	4601      	mov	r1, r0
   d5fdc:	428a      	cmp	r2, r1
   d5fde:	d100      	bne.n	d5fe2 <memmove+0x2a>
   d5fe0:	bd10      	pop	{r4, pc}
   d5fe2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d5fe6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d5fea:	e7f7      	b.n	d5fdc <memmove+0x24>

000d5fec <memset>:
   d5fec:	4402      	add	r2, r0
   d5fee:	4603      	mov	r3, r0
   d5ff0:	4293      	cmp	r3, r2
   d5ff2:	d100      	bne.n	d5ff6 <memset+0xa>
   d5ff4:	4770      	bx	lr
   d5ff6:	f803 1b01 	strb.w	r1, [r3], #1
   d5ffa:	e7f9      	b.n	d5ff0 <memset+0x4>

000d5ffc <srand>:
   d5ffc:	b538      	push	{r3, r4, r5, lr}
   d5ffe:	4b0d      	ldr	r3, [pc, #52]	; (d6034 <srand+0x38>)
   d6000:	681d      	ldr	r5, [r3, #0]
   d6002:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6004:	4604      	mov	r4, r0
   d6006:	b97b      	cbnz	r3, d6028 <srand+0x2c>
   d6008:	2018      	movs	r0, #24
   d600a:	f7fe fcfb 	bl	d4a04 <malloc>
   d600e:	4a0a      	ldr	r2, [pc, #40]	; (d6038 <srand+0x3c>)
   d6010:	4b0a      	ldr	r3, [pc, #40]	; (d603c <srand+0x40>)
   d6012:	63a8      	str	r0, [r5, #56]	; 0x38
   d6014:	e9c0 2300 	strd	r2, r3, [r0]
   d6018:	4b09      	ldr	r3, [pc, #36]	; (d6040 <srand+0x44>)
   d601a:	6083      	str	r3, [r0, #8]
   d601c:	230b      	movs	r3, #11
   d601e:	8183      	strh	r3, [r0, #12]
   d6020:	2201      	movs	r2, #1
   d6022:	2300      	movs	r3, #0
   d6024:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6028:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d602a:	2200      	movs	r2, #0
   d602c:	611c      	str	r4, [r3, #16]
   d602e:	615a      	str	r2, [r3, #20]
   d6030:	bd38      	pop	{r3, r4, r5, pc}
   d6032:	bf00      	nop
   d6034:	2003e5d0 	.word	0x2003e5d0
   d6038:	abcd330e 	.word	0xabcd330e
   d603c:	e66d1234 	.word	0xe66d1234
   d6040:	0005deec 	.word	0x0005deec

000d6044 <strcmp>:
   d6044:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6048:	f811 3b01 	ldrb.w	r3, [r1], #1
   d604c:	2a01      	cmp	r2, #1
   d604e:	bf28      	it	cs
   d6050:	429a      	cmpcs	r2, r3
   d6052:	d0f7      	beq.n	d6044 <strcmp>
   d6054:	1ad0      	subs	r0, r2, r3
   d6056:	4770      	bx	lr

000d6058 <strdup>:
   d6058:	4b02      	ldr	r3, [pc, #8]	; (d6064 <strdup+0xc>)
   d605a:	4601      	mov	r1, r0
   d605c:	6818      	ldr	r0, [r3, #0]
   d605e:	f000 b803 	b.w	d6068 <_strdup_r>
   d6062:	bf00      	nop
   d6064:	2003e5d0 	.word	0x2003e5d0

000d6068 <_strdup_r>:
   d6068:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d606a:	4604      	mov	r4, r0
   d606c:	4608      	mov	r0, r1
   d606e:	460d      	mov	r5, r1
   d6070:	f000 f80f 	bl	d6092 <strlen>
   d6074:	1c42      	adds	r2, r0, #1
   d6076:	4611      	mov	r1, r2
   d6078:	4620      	mov	r0, r4
   d607a:	9201      	str	r2, [sp, #4]
   d607c:	f7fe fce2 	bl	d4a44 <_malloc_r>
   d6080:	4604      	mov	r4, r0
   d6082:	b118      	cbz	r0, d608c <_strdup_r+0x24>
   d6084:	9a01      	ldr	r2, [sp, #4]
   d6086:	4629      	mov	r1, r5
   d6088:	f7ff ff88 	bl	d5f9c <memcpy>
   d608c:	4620      	mov	r0, r4
   d608e:	b003      	add	sp, #12
   d6090:	bd30      	pop	{r4, r5, pc}

000d6092 <strlen>:
   d6092:	4603      	mov	r3, r0
   d6094:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6098:	2a00      	cmp	r2, #0
   d609a:	d1fb      	bne.n	d6094 <strlen+0x2>
   d609c:	1a18      	subs	r0, r3, r0
   d609e:	3801      	subs	r0, #1
   d60a0:	4770      	bx	lr

000d60a2 <link_code_end>:
	...

000d60a4 <dynalib_user>:
   d60a4:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d60b4:	0000 0000 6341 7574 7461 726f 7620 6c61     ....Actuator val
   d60c4:	6575 5300 6e65 6f73 2072 6176 756c 0065     ue.Sensor value.
   d60d4:	6341 7574 7461 726f 7420 7365 0074 6341     Actuator test.Ac
   d60e4:	7574 7461 726f 5200 7165 6575 7473 6f00     tuator.Request.o
   d60f4:	006e 6341 7574 7461 726f 6120 7463 7669     n.Actuator activ
   d6104:	7461 6465 6f00 6666 4100 7463 6175 6f74     ated.off.Actuato
   d6114:	2072 6564 6361 6974 6176 6574 0064 6146     r deactivated.Fa
   d6124:	6c69 7275 2065 6e69 6320 6d6f 616d 646e     ilure in command
   d6134:	6d00 7361 6574 2072 6c61 6f6c 0077 6f4c     .master allow.Lo
   d6144:	6b63 685f 6f6f 006b 6f64 726f 6920 2073     ck_hook.door is 
   d6154:	706f 6e65 6400 6f6f 2072 7369 6320 6f6c     open.door is clo
   d6164:	6573 0064 616d 7473 7265 6420 6e65 0079     sed.master deny.
   d6174:	616d 7473 7265 6320 6d6f 616d 646e 6520     master command e
   d6184:	7272 726f 003a 616d 7473 7265 6320 6d6f     rror:.master com
   d6194:	616d 646e 6520 7272 726f 7200 7165 6575     mand error.reque
   d61a4:	7473 6700 6575 7473 7220 7165 6575 7473     st.guest request
   d61b4:	6120 6363 7365 0073 6f6c 6b63 685f 6f6f      access.lock_hoo
   d61c4:	006b 7567 7365 2074 6572 7571 7365 2074     k.guest request 
   d61d4:	7265 6f72 0072 0000                         error...

000d61dc <_ZTVN5spark13EthernetClassE>:
	...
   d61e4:	4ac3 000d 4ab9 000d 4aaf 000d 4aa5 000d     .J...J...J...J..
   d61f4:	4a99 000d 4a8d 000d 4a81 000d 4a79 000d     .J...J...J..yJ..
   d6204:	4a6f 000d 4a65 000d 58ed 000d 7061 0070     oJ..eJ...X..app.
   d6214:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
   d6224:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

000d6230 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d6238:	4ed1 000d 4ed7 000d 4f15 000d 4ee5 000d     .N...N...O...N..
   d6248:	4ed3 000d                                   .N..

000d624c <_ZTV9IPAddress>:
	...
   d6254:	5491 000d 5481 000d 5483 000d               .T...T...T..

000d6260 <_ZTV9USBSerial>:
	...
   d6268:	5567 000d 55cf 000d 55a5 000d 4ca1 000d     gU...U...U...L..
   d6278:	5597 000d 5569 000d 5579 000d 55c9 000d     .U..iU..yU...U..
   d6288:	5589 000d 5563 000d                         .U..cU..

000d6290 <_ZTV11USARTSerial>:
	...
   d6298:	5669 000d 56d5 000d 56ad 000d 4ca1 000d     iV...V...V...L..
   d62a8:	567d 000d 5699 000d 568b 000d 56a7 000d     }V...V...V...V..
   d62b8:	566b 000d 566f 000d                         kV..oV..

000d62c0 <_ZTV7TwoWire>:
	...
   d62c8:	578d 000d 57d7 000d 57af 000d 578f 000d     .W...W...W...W..
   d62d8:	57b7 000d 57bf 000d 57c7 000d 57cf 000d     .W...W...W...W..

000d62e8 <_ZTVN5spark9WiFiClassE>:
	...
   d62f0:	5867 000d 585d 000d 5853 000d 5809 000d     gX..]X..SX...X..
   d6300:	5847 000d 583b 000d 582f 000d 5827 000d     GX..;X../X..'X..
   d6310:	581d 000d 5813 000d 58ed 000d               .X...X...X..

000d631c <_ZTVN5spark12NetworkClassE>:
	...
   d6324:	5885 000d 588f 000d 5899 000d 58a3 000d     .X...X...X...X..
   d6334:	58ad 000d 58b9 000d 58c5 000d 58d1 000d     .X...X...X...X..
   d6344:	58d9 000d 58e3 000d 58ed 000d               .X...X...X..

000d6350 <_ZTVSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d6358:	5a03 000d 5a09 000d 5a1f 000d 5a17 000d     .Z...Z...Z...Z..
   d6368:	5a05 000d                                   .Z..

000d636c <_ZSt7nothrow>:
	...

000d636d <link_const_variable_data_end>:
   d636d:	00          	.byte	0x00
	...

000d6370 <link_constructors_location>:
   d6370:	000d4651 	.word	0x000d4651
   d6374:	000d4acd 	.word	0x000d4acd
   d6378:	000d4b15 	.word	0x000d4b15
   d637c:	000d4c79 	.word	0x000d4c79
   d6380:	000d4d35 	.word	0x000d4d35
   d6384:	000d4d45 	.word	0x000d4d45
   d6388:	000d4d91 	.word	0x000d4d91
   d638c:	000d5871 	.word	0x000d5871
   d6390:	000d59c1 	.word	0x000d59c1

000d6394 <link_constructors_end>:
	...
