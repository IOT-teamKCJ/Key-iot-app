
d:/Git-repos/Key-iot-app/target/2.0.0-rc.4/argon/Key-iot-app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002674  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6690  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  2003e6b0  000d6694  0001e6b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000000cc  2003e724  2003e724  0002e724  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6708  000d6708  00026708  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6730  000d6730  00026730  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0014b154  00000000  00000000  00026734  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00016840  00000000  00000000  00171888  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002ccec  00000000  00000000  001880c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000028d0  00000000  00000000  001b4db4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00007908  00000000  00000000  001b7684  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00037fa2  00000000  00000000  001bef8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00037a23  00000000  00000000  001f6f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010af8a  00000000  00000000  0022e951  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006e88  00000000  00000000  003398dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 f845 	bl	d60bc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 f867 	bl	d610c <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e6b0 	.word	0x2003e6b0
   d4048:	000d6694 	.word	0x000d6694
   d404c:	2003e724 	.word	0x2003e724
   d4050:	2003e724 	.word	0x2003e724
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f000 ff77 	bl	d4f50 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d666c 	.word	0x000d666c
   d407c:	000d6690 	.word	0x000d6690

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b860 	b.w	d4144 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f8df 	bl	d4248 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f000 bf21 	b.w	d4ed4 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 bc93 	b.w	d49bc <malloc>

000d4096 <_Znaj>:
   d4096:	f000 bc91 	b.w	d49bc <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 bc97 	b.w	d49cc <free>

000d409e <_ZdaPv>:
   d409e:	f000 bc95 	b.w	d49cc <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZNSt17_Function_handlerIFi6StringEPFiPKcEE9_M_invokeERKSt9_Any_dataOS0_>:

    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	return (*_Base::_M_get_pointer(__functor))(
   d40b2:	6803      	ldr	r3, [r0, #0]
   d40b4:	6808      	ldr	r0, [r1, #0]
   d40b6:	4718      	bx	r3

000d40b8 <_ZNSt14_Function_base13_Base_managerIPFiPKcEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	  switch (__op)
   d40b8:	2a01      	cmp	r2, #1
   d40ba:	d003      	beq.n	d40c4 <_ZNSt14_Function_base13_Base_managerIPFiPKcEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
   d40bc:	2a02      	cmp	r2, #2
   d40be:	d003      	beq.n	d40c8 <_ZNSt14_Function_base13_Base_managerIPFiPKcEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x10>
	}
   d40c0:	2000      	movs	r0, #0
   d40c2:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40c4:	6001      	str	r1, [r0, #0]
	      break;
   d40c6:	e7fb      	b.n	d40c0 <_ZNSt14_Function_base13_Base_managerIPFiPKcEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40c8:	680b      	ldr	r3, [r1, #0]
   d40ca:	6003      	str	r3, [r0, #0]
	}
   d40cc:	e7f8      	b.n	d40c0 <_ZNSt14_Function_base13_Base_managerIPFiPKcEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>
	...

000d40d0 <_Z10servoAngle6String>:
commands:
"toggle" = ?
"lock" = locks the door
"unlock" = unlocks the door
*/
int servoAngle(String command) {
   d40d0:	b538      	push	{r3, r4, r5, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40d2:	4912      	ldr	r1, [pc, #72]	; (d411c <_Z10servoAngle6String+0x4c>)
   d40d4:	4604      	mov	r4, r0
   d40d6:	f000 fe0e 	bl	d4cf6 <_ZNK6String6equalsEPKc>

    if(command == "toggle") {
   d40da:	b168      	cbz	r0, d40f8 <_Z10servoAngle6String+0x28>
        myservo.write(180);
   d40dc:	4810      	ldr	r0, [pc, #64]	; (d4120 <_Z10servoAngle6String+0x50>)
   d40de:	21b4      	movs	r1, #180	; 0xb4
   d40e0:	f000 fcf5 	bl	d4ace <_ZN5Servo5writeEi>
        delay(3000);
   d40e4:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d40e8:	f000 fea0 	bl	d4e2c <delay>
        myservo.write(0);
   d40ec:	2100      	movs	r1, #0
    }
    else if(command == "unlock") {
        myservo.write(180);
    } 
    else {
       myservo.write(command.toInt()); 
   d40ee:	480c      	ldr	r0, [pc, #48]	; (d4120 <_Z10servoAngle6String+0x50>)
   d40f0:	f000 fced 	bl	d4ace <_ZN5Servo5writeEi>
    }


    return 0;

}
   d40f4:	2000      	movs	r0, #0
   d40f6:	bd38      	pop	{r3, r4, r5, pc}
   d40f8:	490a      	ldr	r1, [pc, #40]	; (d4124 <_Z10servoAngle6String+0x54>)
   d40fa:	4620      	mov	r0, r4
   d40fc:	f000 fdfb 	bl	d4cf6 <_ZNK6String6equalsEPKc>
    else if(command == "lock") {
   d4100:	2800      	cmp	r0, #0
   d4102:	d1f3      	bne.n	d40ec <_Z10servoAngle6String+0x1c>
   d4104:	4908      	ldr	r1, [pc, #32]	; (d4128 <_Z10servoAngle6String+0x58>)
   d4106:	4620      	mov	r0, r4
   d4108:	f000 fdf5 	bl	d4cf6 <_ZNK6String6equalsEPKc>
    else if(command == "unlock") {
   d410c:	b108      	cbz	r0, d4112 <_Z10servoAngle6String+0x42>
        myservo.write(180);
   d410e:	21b4      	movs	r1, #180	; 0xb4
   d4110:	e7ed      	b.n	d40ee <_Z10servoAngle6String+0x1e>
       myservo.write(command.toInt()); 
   d4112:	4620      	mov	r0, r4
   d4114:	f000 fe01 	bl	d4d1a <_ZNK6String5toIntEv>
   d4118:	4601      	mov	r1, r0
   d411a:	e7e8      	b.n	d40ee <_Z10servoAngle6String+0x1e>
   d411c:	000d62e0 	.word	0x000d62e0
   d4120:	2003e730 	.word	0x2003e730
   d4124:	000d62e9 	.word	0x000d62e9
   d4128:	000d62e7 	.word	0x000d62e7

000d412c <_ZN10CloudClass7publishEPKcN8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>:
    static bool _function(const char *funcKey, int (T::*func)(String), T *instance) {
      using namespace std::placeholders;
      return _function(funcKey, std::bind(func, instance, _1));
    }

    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d412c:	b513      	push	{r0, r1, r4, lr}
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   d412e:	431a      	orrs	r2, r3
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4130:	f88d 2000 	strb.w	r2, [sp]
   d4134:	233c      	movs	r3, #60	; 0x3c
   d4136:	2200      	movs	r2, #0
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d4138:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d413a:	f001 f89d 	bl	d5278 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }
   d413e:	4620      	mov	r0, r4
   d4140:	b002      	add	sp, #8
   d4142:	bd10      	pop	{r4, pc}

000d4144 <setup>:
void setup() {
   d4144:	b510      	push	{r4, lr}
  pinMode(green_diode, OUTPUT);
   d4146:	4c2e      	ldr	r4, [pc, #184]	; (d4200 <setup+0xbc>)
void setup() {
   d4148:	b086      	sub	sp, #24
  pinMode(green_diode, OUTPUT);
   d414a:	8820      	ldrh	r0, [r4, #0]
   d414c:	2101      	movs	r1, #1
   d414e:	f001 ff13 	bl	d5f78 <pinMode>
  digitalWrite(green_diode, LOW);
   d4152:	8820      	ldrh	r0, [r4, #0]
  pinMode(red_diode, OUTPUT);
   d4154:	4c2b      	ldr	r4, [pc, #172]	; (d4204 <setup+0xc0>)
  digitalWrite(green_diode, LOW);
   d4156:	2100      	movs	r1, #0
   d4158:	f001 ff1f 	bl	d5f9a <digitalWrite>
  pinMode(red_diode, OUTPUT);
   d415c:	8820      	ldrh	r0, [r4, #0]
   d415e:	2101      	movs	r1, #1
   d4160:	f001 ff0a 	bl	d5f78 <pinMode>
  digitalWrite(red_diode, LOW);
   d4164:	8820      	ldrh	r0, [r4, #0]
   d4166:	2100      	movs	r1, #0
   d4168:	f001 ff17 	bl	d5f9a <digitalWrite>
  pinMode(sensor, INPUT_PULLUP);
   d416c:	4b26      	ldr	r3, [pc, #152]	; (d4208 <setup+0xc4>)
   d416e:	2102      	movs	r1, #2
   d4170:	8818      	ldrh	r0, [r3, #0]
   d4172:	f001 ff01 	bl	d5f78 <pinMode>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4176:	4925      	ldr	r1, [pc, #148]	; (d420c <setup+0xc8>)
   d4178:	4825      	ldr	r0, [pc, #148]	; (d4210 <setup+0xcc>)
   d417a:	2300      	movs	r3, #0
   d417c:	2202      	movs	r2, #2
   d417e:	f000 fbf5 	bl	d496c <spark_variable>
   d4182:	2300      	movs	r3, #0
   d4184:	4923      	ldr	r1, [pc, #140]	; (d4214 <setup+0xd0>)
   d4186:	4824      	ldr	r0, [pc, #144]	; (d4218 <setup+0xd4>)
   d4188:	2202      	movs	r2, #2
   d418a:	f000 fbef 	bl	d496c <spark_variable>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d418e:	4a23      	ldr	r2, [pc, #140]	; (d421c <setup+0xd8>)
   d4190:	4923      	ldr	r1, [pc, #140]	; (d4220 <setup+0xdc>)
   d4192:	4824      	ldr	r0, [pc, #144]	; (d4224 <setup+0xe0>)
   d4194:	f000 ff7d 	bl	d5092 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d4198:	4b23      	ldr	r3, [pc, #140]	; (d4228 <setup+0xe4>)
   d419a:	9302      	str	r3, [sp, #8]
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d419c:	4b23      	ldr	r3, [pc, #140]	; (d422c <setup+0xe8>)
   d419e:	9305      	str	r3, [sp, #20]
            auto wrapper = new user_std_function_int_str_t(func);
   d41a0:	2010      	movs	r0, #16
	    _M_manager = &_My_handler::_M_manager;
   d41a2:	4b23      	ldr	r3, [pc, #140]	; (d4230 <setup+0xec>)
   d41a4:	9304      	str	r3, [sp, #16]
   d41a6:	f7ff ff74 	bl	d4092 <_Znwj>
   d41aa:	4604      	mov	r4, r0
   d41ac:	b178      	cbz	r0, d41ce <setup+0x8a>
    _Function_base() : _M_manager(nullptr) { }
   d41ae:	2300      	movs	r3, #0
   d41b0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d41b2:	9b04      	ldr	r3, [sp, #16]
      if (static_cast<bool>(__x))
   d41b4:	b133      	cbz	r3, d41c4 <setup+0x80>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d41b6:	2202      	movs	r2, #2
   d41b8:	a902      	add	r1, sp, #8
   d41ba:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d41bc:	9b05      	ldr	r3, [sp, #20]
   d41be:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d41c0:	9b04      	ldr	r3, [sp, #16]
   d41c2:	60a3      	str	r3, [r4, #8]
                success = register_function(call_std_user_function, wrapper, funcKey);
   d41c4:	4a1b      	ldr	r2, [pc, #108]	; (d4234 <setup+0xf0>)
   d41c6:	481c      	ldr	r0, [pc, #112]	; (d4238 <setup+0xf4>)
   d41c8:	4621      	mov	r1, r4
   d41ca:	f000 ff62 	bl	d5092 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
      if (_M_manager)
   d41ce:	9b04      	ldr	r3, [sp, #16]
   d41d0:	b11b      	cbz	r3, d41da <setup+0x96>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d41d2:	a902      	add	r1, sp, #8
   d41d4:	2203      	movs	r2, #3
   d41d6:	4608      	mov	r0, r1
   d41d8:	4798      	blx	r3
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d41da:	4a18      	ldr	r2, [pc, #96]	; (d423c <setup+0xf8>)
   d41dc:	4918      	ldr	r1, [pc, #96]	; (d4240 <setup+0xfc>)
   d41de:	4811      	ldr	r0, [pc, #68]	; (d4224 <setup+0xe0>)
   d41e0:	f000 ff57 	bl	d5092 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  myservo.attach(D2);  // attaches the servo on the D0 pin to the servo object
   d41e4:	2300      	movs	r3, #0
   d41e6:	22b4      	movs	r2, #180	; 0xb4
   d41e8:	e9cd 3200 	strd	r3, r2, [sp]
   d41ec:	2102      	movs	r1, #2
   d41ee:	f44f 6316 	mov.w	r3, #2400	; 0x960
   d41f2:	f44f 7208 	mov.w	r2, #544	; 0x220
   d41f6:	4813      	ldr	r0, [pc, #76]	; (d4244 <setup+0x100>)
   d41f8:	f000 fcac 	bl	d4b54 <_ZN5Servo6attachEtttss>
}
   d41fc:	b006      	add	sp, #24
   d41fe:	bd10      	pop	{r4, pc}
   d4200:	2003e6b0 	.word	0x2003e6b0
   d4204:	2003e6b4 	.word	0x2003e6b4
   d4208:	2003e6b8 	.word	0x2003e6b8
   d420c:	2003e72c 	.word	0x2003e72c
   d4210:	000d62ee 	.word	0x000d62ee
   d4214:	2003e740 	.word	0x2003e740
   d4218:	000d62fd 	.word	0x000d62fd
   d421c:	000d630a 	.word	0x000d630a
   d4220:	000d42a1 	.word	0x000d42a1
   d4224:	000d503f 	.word	0x000d503f
   d4228:	000d4345 	.word	0x000d4345
   d422c:	000d40b3 	.word	0x000d40b3
   d4230:	000d40b9 	.word	0x000d40b9
   d4234:	000d631e 	.word	0x000d631e
   d4238:	000d506b 	.word	0x000d506b
   d423c:	000d6318 	.word	0x000d6318
   d4240:	000d40d1 	.word	0x000d40d1
   d4244:	2003e730 	.word	0x2003e730

000d4248 <loop>:
void loop() {
   d4248:	b508      	push	{r3, lr}
  green_diode_val = analogRead(green_diode);
   d424a:	4b06      	ldr	r3, [pc, #24]	; (d4264 <loop+0x1c>)
   d424c:	8818      	ldrh	r0, [r3, #0]
   d424e:	f001 febd 	bl	d5fcc <analogRead>
   d4252:	4b05      	ldr	r3, [pc, #20]	; (d4268 <loop+0x20>)
   d4254:	6018      	str	r0, [r3, #0]
  sensor_val = analogRead(sensor);
   d4256:	4b05      	ldr	r3, [pc, #20]	; (d426c <loop+0x24>)
   d4258:	8818      	ldrh	r0, [r3, #0]
   d425a:	f001 feb7 	bl	d5fcc <analogRead>
   d425e:	4b04      	ldr	r3, [pc, #16]	; (d4270 <loop+0x28>)
   d4260:	6018      	str	r0, [r3, #0]
}
   d4262:	bd08      	pop	{r3, pc}
   d4264:	2003e6b0 	.word	0x2003e6b0
   d4268:	2003e72c 	.word	0x2003e72c
   d426c:	2003e6b8 	.word	0x2003e6b8
   d4270:	2003e740 	.word	0x2003e740

000d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4274:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4276:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4278:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d427a:	b17c      	cbz	r4, d429c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d427c:	6863      	ldr	r3, [r4, #4]
   d427e:	3b01      	subs	r3, #1
   d4280:	6063      	str	r3, [r4, #4]
   d4282:	b95b      	cbnz	r3, d429c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4284:	6823      	ldr	r3, [r4, #0]
   d4286:	4620      	mov	r0, r4
   d4288:	689b      	ldr	r3, [r3, #8]
   d428a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d428c:	68a3      	ldr	r3, [r4, #8]
   d428e:	3b01      	subs	r3, #1
   d4290:	60a3      	str	r3, [r4, #8]
   d4292:	b91b      	cbnz	r3, d429c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4294:	6823      	ldr	r3, [r4, #0]
   d4296:	4620      	mov	r0, r4
   d4298:	68db      	ldr	r3, [r3, #12]
   d429a:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d429c:	4628      	mov	r0, r5
   d429e:	bd38      	pop	{r3, r4, r5, pc}

000d42a0 <_Z13actuator_test6String>:
{
   d42a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d42a2:	491d      	ldr	r1, [pc, #116]	; (d4318 <_Z13actuator_test6String+0x78>)
   d42a4:	4d1d      	ldr	r5, [pc, #116]	; (d431c <_Z13actuator_test6String+0x7c>)
   d42a6:	4606      	mov	r6, r0
   d42a8:	f000 fd25 	bl	d4cf6 <_ZNK6String6equalsEPKc>
  if (command == "on")
   d42ac:	4604      	mov	r4, r0
   d42ae:	b188      	cbz	r0, d42d4 <_Z13actuator_test6String+0x34>
    digitalWrite(green_diode, HIGH);
   d42b0:	4b1b      	ldr	r3, [pc, #108]	; (d4320 <_Z13actuator_test6String+0x80>)
   d42b2:	2101      	movs	r1, #1
   d42b4:	8818      	ldrh	r0, [r3, #0]
   d42b6:	f001 fe70 	bl	d5f9a <digitalWrite>
    Particle.publish("Actuator activated", PRIVATE);
   d42ba:	782a      	ldrb	r2, [r5, #0]
   d42bc:	4919      	ldr	r1, [pc, #100]	; (d4324 <_Z13actuator_test6String+0x84>)
   d42be:	f04f 0300 	mov.w	r3, #0
   d42c2:	4668      	mov	r0, sp
   d42c4:	f7ff ff32 	bl	d412c <_ZN10CloudClass7publishEPKcN8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d42c8:	a801      	add	r0, sp, #4
   d42ca:	f7ff ffd3 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 1;
   d42ce:	2001      	movs	r0, #1
}
   d42d0:	b002      	add	sp, #8
   d42d2:	bd70      	pop	{r4, r5, r6, pc}
   d42d4:	4914      	ldr	r1, [pc, #80]	; (d4328 <_Z13actuator_test6String+0x88>)
   d42d6:	4630      	mov	r0, r6
   d42d8:	f000 fd0d 	bl	d4cf6 <_ZNK6String6equalsEPKc>
  else if (command == "off")
   d42dc:	b178      	cbz	r0, d42fe <_Z13actuator_test6String+0x5e>
    digitalWrite(green_diode, LOW);
   d42de:	4b10      	ldr	r3, [pc, #64]	; (d4320 <_Z13actuator_test6String+0x80>)
   d42e0:	4621      	mov	r1, r4
   d42e2:	8818      	ldrh	r0, [r3, #0]
   d42e4:	f001 fe59 	bl	d5f9a <digitalWrite>
    Particle.publish("Actuator deactivated", PRIVATE);
   d42e8:	782a      	ldrb	r2, [r5, #0]
   d42ea:	4910      	ldr	r1, [pc, #64]	; (d432c <_Z13actuator_test6String+0x8c>)
   d42ec:	4623      	mov	r3, r4
   d42ee:	4668      	mov	r0, sp
   d42f0:	f7ff ff1c 	bl	d412c <_ZN10CloudClass7publishEPKcN8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d42f4:	a801      	add	r0, sp, #4
   d42f6:	f7ff ffbd 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 0;
   d42fa:	4620      	mov	r0, r4
   d42fc:	e7e8      	b.n	d42d0 <_Z13actuator_test6String+0x30>
    Particle.publish("Failure in command", PRIVATE);
   d42fe:	4603      	mov	r3, r0
   d4300:	782a      	ldrb	r2, [r5, #0]
   d4302:	490b      	ldr	r1, [pc, #44]	; (d4330 <_Z13actuator_test6String+0x90>)
   d4304:	4668      	mov	r0, sp
   d4306:	f7ff ff11 	bl	d412c <_ZN10CloudClass7publishEPKcN8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d430a:	a801      	add	r0, sp, #4
   d430c:	f7ff ffb2 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return -1;
   d4310:	f04f 30ff 	mov.w	r0, #4294967295
   d4314:	e7dc      	b.n	d42d0 <_Z13actuator_test6String+0x30>
   d4316:	bf00      	nop
   d4318:	000d6325 	.word	0x000d6325
   d431c:	2003e728 	.word	0x2003e728
   d4320:	2003e6b0 	.word	0x2003e6b0
   d4324:	000d6328 	.word	0x000d6328
   d4328:	000d633b 	.word	0x000d633b
   d432c:	000d633f 	.word	0x000d633f
   d4330:	000d6354 	.word	0x000d6354

000d4334 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d4334:	680b      	ldr	r3, [r1, #0]
   d4336:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d4338:	b113      	cbz	r3, d4340 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d433a:	685a      	ldr	r2, [r3, #4]
   d433c:	3201      	adds	r2, #1
   d433e:	605a      	str	r2, [r3, #4]
      }
   d4340:	4770      	bx	lr
	...

000d4344 <_Z14master_commandPKc>:
//
//    replace string in <>
//    in windows prompt, it might be neccessary to write curl.exe instead of
//    curl
int master_command(const char *data)
{
   d4344:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4348:	b099      	sub	sp, #100	; 0x64
inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
    return strcmp(s_, str) == 0;
   d434a:	4d89      	ldr	r5, [pc, #548]	; (d4570 <_Z14master_commandPKc+0x22c>)
   d434c:	9003      	str	r0, [sp, #12]
    return parseCopy(json, strlen(json));
   d434e:	f001 ff30 	bl	d61b2 <strlen>
   d4352:	9903      	ldr	r1, [sp, #12]
   d4354:	4602      	mov	r2, r0
   d4356:	a804      	add	r0, sp, #16
   d4358:	f001 fd7a 	bl	d5e50 <_ZN5spark9JSONValue9parseCopyEPKcj>
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
   d435c:	9c06      	ldr	r4, [sp, #24]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d435e:	9b04      	ldr	r3, [sp, #16]
   d4360:	930e      	str	r3, [sp, #56]	; 0x38
   d4362:	a905      	add	r1, sp, #20
   d4364:	a80f      	add	r0, sp, #60	; 0x3c
   d4366:	f7ff ffe5 	bl	d4334 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d436a:	aa0e      	add	r2, sp, #56	; 0x38
   d436c:	4621      	mov	r1, r4
   d436e:	a812      	add	r0, sp, #72	; 0x48
   d4370:	f001 fd2e 	bl	d5dd0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4374:	a80f      	add	r0, sp, #60	; 0x3c
   d4376:	f7ff ff7d 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  //insert JSON string into JSON object, and itterate through object
  JSONValue master_msg = JSONValue::parseCopy(data);
  JSONObjectIterator iter(master_msg);

  while(iter.next())
   d437a:	a812      	add	r0, sp, #72	; 0x48
   d437c:	f001 fd40 	bl	d5e00 <_ZN5spark18JSONObjectIterator4nextEv>
   d4380:	2800      	cmp	r0, #0
   d4382:	f000 80f2 	beq.w	d456a <_Z14master_commandPKc+0x226>
inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
    return JSONValue(v_, d_);
   d4386:	9c16      	ldr	r4, [sp, #88]	; 0x58
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4388:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d438a:	930e      	str	r3, [sp, #56]	; 0x38
   d438c:	a913      	add	r1, sp, #76	; 0x4c
   d438e:	a80f      	add	r0, sp, #60	; 0x3c
   d4390:	f7ff ffd0 	bl	d4334 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4394:	aa0e      	add	r2, sp, #56	; 0x38
   d4396:	4621      	mov	r1, r4
   d4398:	a807      	add	r0, sp, #28
   d439a:	f001 fc07 	bl	d5bac <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d439e:	a80f      	add	r0, sp, #60	; 0x3c
   d43a0:	f7ff ff68 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return JSONString(t_, d_);
   d43a4:	9c09      	ldr	r4, [sp, #36]	; 0x24
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d43a6:	9b07      	ldr	r3, [sp, #28]
   d43a8:	930a      	str	r3, [sp, #40]	; 0x28
   d43aa:	a908      	add	r1, sp, #32
   d43ac:	a80b      	add	r0, sp, #44	; 0x2c
   d43ae:	f7ff ffc1 	bl	d4334 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d43b2:	aa0a      	add	r2, sp, #40	; 0x28
   d43b4:	4621      	mov	r1, r4
   d43b6:	a80e      	add	r0, sp, #56	; 0x38
   d43b8:	f001 fce6 	bl	d5d88 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d43bc:	a80b      	add	r0, sp, #44	; 0x2c
   d43be:	f7ff ff59 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  {
    // make it possible to read JSON string
    String val = iter.value().toString().data();
   d43c2:	9910      	ldr	r1, [sp, #64]	; 0x40
   d43c4:	a80a      	add	r0, sp, #40	; 0x28
   d43c6:	f000 fc68 	bl	d4c9a <_ZN6StringC1EPKc>
   d43ca:	a80f      	add	r0, sp, #60	; 0x3c
   d43cc:	f7ff ff52 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d43d0:	a808      	add	r0, sp, #32
   d43d2:	f7ff ff4f 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return JSONString(k_, d_);
   d43d6:	9c15      	ldr	r4, [sp, #84]	; 0x54
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d43d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d43da:	9307      	str	r3, [sp, #28]
   d43dc:	a913      	add	r1, sp, #76	; 0x4c
   d43de:	a808      	add	r0, sp, #32
   d43e0:	f7ff ffa8 	bl	d4334 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d43e4:	4621      	mov	r1, r4
   d43e6:	aa07      	add	r2, sp, #28
   d43e8:	a80e      	add	r0, sp, #56	; 0x38
   d43ea:	f001 fccd 	bl	d5d88 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d43ee:	a808      	add	r0, sp, #32
   d43f0:	f7ff ff40 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d43f4:	9810      	ldr	r0, [sp, #64]	; 0x40
   d43f6:	4629      	mov	r1, r5
   d43f8:	f001 feb4 	bl	d6164 <strcmp>
   d43fc:	4604      	mov	r4, r0
   d43fe:	a80f      	add	r0, sp, #60	; 0x3c
   d4400:	f7ff ff38 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    // go through JSON string
    if (iter.name() == "access")
   d4404:	2c00      	cmp	r4, #0
   d4406:	f040 80ac 	bne.w	d4562 <_Z14master_commandPKc+0x21e>
   d440a:	495a      	ldr	r1, [pc, #360]	; (d4574 <_Z14master_commandPKc+0x230>)
   d440c:	4d5a      	ldr	r5, [pc, #360]	; (d4578 <_Z14master_commandPKc+0x234>)
   d440e:	a80a      	add	r0, sp, #40	; 0x28
   d4410:	f000 fc71 	bl	d4cf6 <_ZNK6String6equalsEPKc>
    {
      if (val == "allow")
   d4414:	2800      	cmp	r0, #0
   d4416:	d064      	beq.n	d44e2 <_Z14master_commandPKc+0x19e>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4418:	782b      	ldrb	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d441a:	4a58      	ldr	r2, [pc, #352]	; (d457c <_Z14master_commandPKc+0x238>)
   d441c:	4958      	ldr	r1, [pc, #352]	; (d4580 <_Z14master_commandPKc+0x23c>)
   d441e:	f88d 3000 	strb.w	r3, [sp]
   d4422:	a80e      	add	r0, sp, #56	; 0x38
   d4424:	233c      	movs	r3, #60	; 0x3c
   d4426:	f000 ff27 	bl	d5278 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d442a:	a80f      	add	r0, sp, #60	; 0x3c
   d442c:	f7ff ff22 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      {
        // publish to thingspeak, so guest can recieve ack msg.
        Particle.publish("Lock_hook", "master allow", PRIVATE);
        // open door
        Particle.publish("door is open", PRIVATE);
        digitalWrite(green_diode, HIGH);
   d4430:	f8df 817c 	ldr.w	r8, [pc, #380]	; d45b0 <_Z14master_commandPKc+0x26c>
        Particle.publish("door is open", PRIVATE);
   d4434:	782a      	ldrb	r2, [r5, #0]
   d4436:	4953      	ldr	r1, [pc, #332]	; (d4584 <_Z14master_commandPKc+0x240>)
        servoAngle("unlock");

        // door gets closed sensing
        delay(10000); //given time to open the door
        sensor_val = analogRead(sensor);
   d4438:	4f53      	ldr	r7, [pc, #332]	; (d4588 <_Z14master_commandPKc+0x244>)
        Particle.publish("door is open", PRIVATE);
   d443a:	4623      	mov	r3, r4
   d443c:	a80e      	add	r0, sp, #56	; 0x38
   d443e:	f7ff fe75 	bl	d412c <_ZN10CloudClass7publishEPKcN8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4442:	a80f      	add	r0, sp, #60	; 0x3c
   d4444:	f7ff ff16 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        digitalWrite(green_diode, HIGH);
   d4448:	f8b8 0000 	ldrh.w	r0, [r8]
   d444c:	2101      	movs	r1, #1
   d444e:	f001 fda4 	bl	d5f9a <digitalWrite>
        servoAngle("unlock");
   d4452:	494e      	ldr	r1, [pc, #312]	; (d458c <_Z14master_commandPKc+0x248>)
   d4454:	a80e      	add	r0, sp, #56	; 0x38
   d4456:	f000 fc20 	bl	d4c9a <_ZN6StringC1EPKc>
   d445a:	a80e      	add	r0, sp, #56	; 0x38
   d445c:	f7ff fe38 	bl	d40d0 <_Z10servoAngle6String>
   d4460:	a80e      	add	r0, sp, #56	; 0x38
   d4462:	f000 fbcf 	bl	d4c04 <_ZN6StringD1Ev>
        delay(10000); //given time to open the door
   d4466:	f242 7010 	movw	r0, #10000	; 0x2710
   d446a:	f000 fcdf 	bl	d4e2c <delay>
        sensor_val = analogRead(sensor);
   d446e:	8838      	ldrh	r0, [r7, #0]
   d4470:	f001 fdac 	bl	d5fcc <analogRead>
   d4474:	4b46      	ldr	r3, [pc, #280]	; (d4590 <_Z14master_commandPKc+0x24c>)
        if (sensor_val >= 50) // door is closed
   d4476:	2831      	cmp	r0, #49	; 0x31
        sensor_val = analogRead(sensor);
   d4478:	6018      	str	r0, [r3, #0]
        if (sensor_val >= 50) // door is closed
   d447a:	46c1      	mov	r9, r8
   d447c:	461e      	mov	r6, r3
   d447e:	dd26      	ble.n	d44ce <_Z14master_commandPKc+0x18a>
        {
          digitalWrite(green_diode, LOW);
   d4480:	f8b8 0000 	ldrh.w	r0, [r8]
   d4484:	4621      	mov	r1, r4
        {
          while(sensor_val <= 50) // door is open
          {
            sensor_val = analogRead(sensor);
          }
          digitalWrite(green_diode, LOW);
   d4486:	f001 fd88 	bl	d5f9a <digitalWrite>
          servoAngle("lock");
   d448a:	4942      	ldr	r1, [pc, #264]	; (d4594 <_Z14master_commandPKc+0x250>)
   d448c:	a80e      	add	r0, sp, #56	; 0x38
   d448e:	f000 fc04 	bl	d4c9a <_ZN6StringC1EPKc>
   d4492:	a80e      	add	r0, sp, #56	; 0x38
   d4494:	f7ff fe1c 	bl	d40d0 <_Z10servoAngle6String>
   d4498:	a80e      	add	r0, sp, #56	; 0x38
   d449a:	f000 fbb3 	bl	d4c04 <_ZN6StringD1Ev>
          Particle.publish("door is closed", PRIVATE);
   d449e:	782a      	ldrb	r2, [r5, #0]
   d44a0:	493d      	ldr	r1, [pc, #244]	; (d4598 <_Z14master_commandPKc+0x254>)
   d44a2:	f04f 0300 	mov.w	r3, #0
   d44a6:	a80e      	add	r0, sp, #56	; 0x38
   d44a8:	f7ff fe40 	bl	d412c <_ZN10CloudClass7publishEPKcN8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d44ac:	a80f      	add	r0, sp, #60	; 0x3c
   d44ae:	f7ff fee1 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
          return 1;
   d44b2:	2401      	movs	r4, #1
    String val = iter.value().toString().data();
   d44b4:	a80a      	add	r0, sp, #40	; 0x28
   d44b6:	f000 fba5 	bl	d4c04 <_ZN6StringD1Ev>
   d44ba:	a813      	add	r0, sp, #76	; 0x4c
   d44bc:	f7ff feda 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d44c0:	a805      	add	r0, sp, #20
   d44c2:	f7ff fed7 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return -1;
      }
    }
  }
  return -2;
}
   d44c6:	4620      	mov	r0, r4
   d44c8:	b019      	add	sp, #100	; 0x64
   d44ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            sensor_val = analogRead(sensor);
   d44ce:	8838      	ldrh	r0, [r7, #0]
   d44d0:	f001 fd7c 	bl	d5fcc <analogRead>
          while(sensor_val <= 50) // door is open
   d44d4:	2832      	cmp	r0, #50	; 0x32
            sensor_val = analogRead(sensor);
   d44d6:	6030      	str	r0, [r6, #0]
          while(sensor_val <= 50) // door is open
   d44d8:	ddf9      	ble.n	d44ce <_Z14master_commandPKc+0x18a>
          digitalWrite(green_diode, LOW);
   d44da:	f8b9 0000 	ldrh.w	r0, [r9]
   d44de:	2100      	movs	r1, #0
   d44e0:	e7d1      	b.n	d4486 <_Z14master_commandPKc+0x142>
   d44e2:	492e      	ldr	r1, [pc, #184]	; (d459c <_Z14master_commandPKc+0x258>)
   d44e4:	a80a      	add	r0, sp, #40	; 0x28
   d44e6:	f000 fc06 	bl	d4cf6 <_ZNK6String6equalsEPKc>
   d44ea:	782b      	ldrb	r3, [r5, #0]
   d44ec:	f88d 3000 	strb.w	r3, [sp]
   d44f0:	233c      	movs	r3, #60	; 0x3c
      else if (val == "deny")
   d44f2:	b1f8      	cbz	r0, d4534 <_Z14master_commandPKc+0x1f0>
   d44f4:	4a2a      	ldr	r2, [pc, #168]	; (d45a0 <_Z14master_commandPKc+0x25c>)
   d44f6:	4922      	ldr	r1, [pc, #136]	; (d4580 <_Z14master_commandPKc+0x23c>)
        digitalWrite(red_diode, HIGH);
   d44f8:	4d2a      	ldr	r5, [pc, #168]	; (d45a4 <_Z14master_commandPKc+0x260>)
   d44fa:	a80e      	add	r0, sp, #56	; 0x38
   d44fc:	f000 febc 	bl	d5278 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4500:	a80f      	add	r0, sp, #60	; 0x3c
   d4502:	f7ff feb7 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        servoAngle("lock");
   d4506:	4923      	ldr	r1, [pc, #140]	; (d4594 <_Z14master_commandPKc+0x250>)
   d4508:	a80e      	add	r0, sp, #56	; 0x38
   d450a:	f000 fbc6 	bl	d4c9a <_ZN6StringC1EPKc>
   d450e:	a80e      	add	r0, sp, #56	; 0x38
   d4510:	f7ff fdde 	bl	d40d0 <_Z10servoAngle6String>
   d4514:	a80e      	add	r0, sp, #56	; 0x38
   d4516:	f000 fb75 	bl	d4c04 <_ZN6StringD1Ev>
        digitalWrite(red_diode, HIGH);
   d451a:	8828      	ldrh	r0, [r5, #0]
   d451c:	2101      	movs	r1, #1
   d451e:	f001 fd3c 	bl	d5f9a <digitalWrite>
        delay(3000);
   d4522:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d4526:	f000 fc81 	bl	d4e2c <delay>
        digitalWrite(red_diode, LOW);
   d452a:	8828      	ldrh	r0, [r5, #0]
   d452c:	4621      	mov	r1, r4
   d452e:	f001 fd34 	bl	d5f9a <digitalWrite>
        return 0;
   d4532:	e7bf      	b.n	d44b4 <_Z14master_commandPKc+0x170>
   d4534:	4a1c      	ldr	r2, [pc, #112]	; (d45a8 <_Z14master_commandPKc+0x264>)
   d4536:	4912      	ldr	r1, [pc, #72]	; (d4580 <_Z14master_commandPKc+0x23c>)
   d4538:	a80e      	add	r0, sp, #56	; 0x38
   d453a:	f000 fe9d 	bl	d5278 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d453e:	a80f      	add	r0, sp, #60	; 0x3c
   d4540:	f7ff fe98 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4544:	782b      	ldrb	r3, [r5, #0]
   d4546:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d4548:	4918      	ldr	r1, [pc, #96]	; (d45ac <_Z14master_commandPKc+0x268>)
   d454a:	f88d 3000 	strb.w	r3, [sp]
   d454e:	a80e      	add	r0, sp, #56	; 0x38
   d4550:	233c      	movs	r3, #60	; 0x3c
   d4552:	f000 fe91 	bl	d5278 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4556:	a80f      	add	r0, sp, #60	; 0x3c
   d4558:	f7ff fe8c 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return -1;
   d455c:	f04f 34ff 	mov.w	r4, #4294967295
   d4560:	e7a8      	b.n	d44b4 <_Z14master_commandPKc+0x170>
    String val = iter.value().toString().data();
   d4562:	a80a      	add	r0, sp, #40	; 0x28
   d4564:	f000 fb4e 	bl	d4c04 <_ZN6StringD1Ev>
   d4568:	e707      	b.n	d437a <_Z14master_commandPKc+0x36>
  return -2;
   d456a:	f06f 0401 	mvn.w	r4, #1
   d456e:	e7a4      	b.n	d44ba <_Z14master_commandPKc+0x176>
   d4570:	000d6367 	.word	0x000d6367
   d4574:	000d6375 	.word	0x000d6375
   d4578:	2003e728 	.word	0x2003e728
   d457c:	000d636e 	.word	0x000d636e
   d4580:	000d637b 	.word	0x000d637b
   d4584:	000d6385 	.word	0x000d6385
   d4588:	2003e6b8 	.word	0x2003e6b8
   d458c:	000d62e7 	.word	0x000d62e7
   d4590:	2003e740 	.word	0x2003e740
   d4594:	000d62e9 	.word	0x000d62e9
   d4598:	000d6392 	.word	0x000d6392
   d459c:	000d63a8 	.word	0x000d63a8
   d45a0:	000d63a1 	.word	0x000d63a1
   d45a4:	2003e6b4 	.word	0x2003e6b4
   d45a8:	000d63ad 	.word	0x000d63ad
   d45ac:	000d63c3 	.word	0x000d63c3
   d45b0:	2003e6b0 	.word	0x2003e6b0

000d45b4 <_GLOBAL__sub_I_green_diode>:
}
   d45b4:	b510      	push	{r4, lr}
        val_(val) {
   d45b6:	4b07      	ldr	r3, [pc, #28]	; (d45d4 <_GLOBAL__sub_I_green_diode+0x20>)
Servo myservo; 
   d45b8:	4c07      	ldr	r4, [pc, #28]	; (d45d8 <_GLOBAL__sub_I_green_diode+0x24>)
   d45ba:	2201      	movs	r2, #1
   d45bc:	701a      	strb	r2, [r3, #0]
   d45be:	4620      	mov	r0, r4
   d45c0:	f000 faae 	bl	d4b20 <_ZN5ServoC1Ev>
   d45c4:	4620      	mov	r0, r4
   d45c6:	4a05      	ldr	r2, [pc, #20]	; (d45dc <_GLOBAL__sub_I_green_diode+0x28>)
   d45c8:	4905      	ldr	r1, [pc, #20]	; (d45e0 <_GLOBAL__sub_I_green_diode+0x2c>)
}
   d45ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Servo myservo; 
   d45ce:	f001 bd55 	b.w	d607c <__aeabi_atexit>
   d45d2:	bf00      	nop
   d45d4:	2003e728 	.word	0x2003e728
   d45d8:	2003e730 	.word	0x2003e730
   d45dc:	2003e724 	.word	0x2003e724
   d45e0:	000d4b49 	.word	0x000d4b49

000d45e4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d45e4:	b508      	push	{r3, lr}
   d45e6:	4b02      	ldr	r3, [pc, #8]	; (d45f0 <netdb_freeaddrinfo+0xc>)
   d45e8:	681b      	ldr	r3, [r3, #0]
   d45ea:	689b      	ldr	r3, [r3, #8]
   d45ec:	9301      	str	r3, [sp, #4]
   d45ee:	bd08      	pop	{r3, pc}
   d45f0:	00030268 	.word	0x00030268

000d45f4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d45f4:	b508      	push	{r3, lr}
   d45f6:	4b02      	ldr	r3, [pc, #8]	; (d4600 <netdb_getaddrinfo+0xc>)
   d45f8:	681b      	ldr	r3, [r3, #0]
   d45fa:	68db      	ldr	r3, [r3, #12]
   d45fc:	9301      	str	r3, [sp, #4]
   d45fe:	bd08      	pop	{r3, pc}
   d4600:	00030268 	.word	0x00030268

000d4604 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4604:	b508      	push	{r3, lr}
   d4606:	4b02      	ldr	r3, [pc, #8]	; (d4610 <HAL_Validate_Pin_Function+0xc>)
   d4608:	681b      	ldr	r3, [r3, #0]
   d460a:	685b      	ldr	r3, [r3, #4]
   d460c:	9301      	str	r3, [sp, #4]
   d460e:	bd08      	pop	{r3, pc}
   d4610:	0003022c 	.word	0x0003022c

000d4614 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4614:	b508      	push	{r3, lr}
   d4616:	4b02      	ldr	r3, [pc, #8]	; (d4620 <HAL_Pin_Mode+0xc>)
   d4618:	681b      	ldr	r3, [r3, #0]
   d461a:	689b      	ldr	r3, [r3, #8]
   d461c:	9301      	str	r3, [sp, #4]
   d461e:	bd08      	pop	{r3, pc}
   d4620:	0003022c 	.word	0x0003022c

000d4624 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4624:	b508      	push	{r3, lr}
   d4626:	4b02      	ldr	r3, [pc, #8]	; (d4630 <HAL_Get_Pin_Mode+0xc>)
   d4628:	681b      	ldr	r3, [r3, #0]
   d462a:	68db      	ldr	r3, [r3, #12]
   d462c:	9301      	str	r3, [sp, #4]
   d462e:	bd08      	pop	{r3, pc}
   d4630:	0003022c 	.word	0x0003022c

000d4634 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4634:	b508      	push	{r3, lr}
   d4636:	4b02      	ldr	r3, [pc, #8]	; (d4640 <HAL_GPIO_Write+0xc>)
   d4638:	681b      	ldr	r3, [r3, #0]
   d463a:	691b      	ldr	r3, [r3, #16]
   d463c:	9301      	str	r3, [sp, #4]
   d463e:	bd08      	pop	{r3, pc}
   d4640:	0003022c 	.word	0x0003022c

000d4644 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d4644:	b508      	push	{r3, lr}
   d4646:	4b02      	ldr	r3, [pc, #8]	; (d4650 <hal_adc_read+0xc>)
   d4648:	681b      	ldr	r3, [r3, #0]
   d464a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d464c:	9301      	str	r3, [sp, #4]
   d464e:	bd08      	pop	{r3, pc}
   d4650:	0003022c 	.word	0x0003022c

000d4654 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4654:	b508      	push	{r3, lr}
   d4656:	4b02      	ldr	r3, [pc, #8]	; (d4660 <HAL_RNG_GetRandomNumber+0xc>)
   d4658:	681b      	ldr	r3, [r3, #0]
   d465a:	685b      	ldr	r3, [r3, #4]
   d465c:	9301      	str	r3, [sp, #4]
   d465e:	bd08      	pop	{r3, pc}
   d4660:	00030218 	.word	0x00030218

000d4664 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4664:	b508      	push	{r3, lr}
   d4666:	4b02      	ldr	r3, [pc, #8]	; (d4670 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4668:	681b      	ldr	r3, [r3, #0]
   d466a:	695b      	ldr	r3, [r3, #20]
   d466c:	9301      	str	r3, [sp, #4]
   d466e:	bd08      	pop	{r3, pc}
   d4670:	00030218 	.word	0x00030218

000d4674 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4674:	b508      	push	{r3, lr}
   d4676:	4b02      	ldr	r3, [pc, #8]	; (d4680 <os_mutex_recursive_create+0xc>)
   d4678:	681b      	ldr	r3, [r3, #0]
   d467a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d467c:	9301      	str	r3, [sp, #4]
   d467e:	bd08      	pop	{r3, pc}
   d4680:	00030248 	.word	0x00030248

000d4684 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4684:	b508      	push	{r3, lr}
   d4686:	4b02      	ldr	r3, [pc, #8]	; (d4690 <os_mutex_recursive_destroy+0xc>)
   d4688:	681b      	ldr	r3, [r3, #0]
   d468a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d468c:	9301      	str	r3, [sp, #4]
   d468e:	bd08      	pop	{r3, pc}
   d4690:	00030248 	.word	0x00030248

000d4694 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4694:	b508      	push	{r3, lr}
   d4696:	4b02      	ldr	r3, [pc, #8]	; (d46a0 <inet_inet_ntop+0xc>)
   d4698:	681b      	ldr	r3, [r3, #0]
   d469a:	695b      	ldr	r3, [r3, #20]
   d469c:	9301      	str	r3, [sp, #4]
   d469e:	bd08      	pop	{r3, pc}
   d46a0:	00030264 	.word	0x00030264

000d46a4 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d46a4:	b508      	push	{r3, lr}
   d46a6:	4b02      	ldr	r3, [pc, #8]	; (d46b0 <hal_usart_init+0xc>)
   d46a8:	681b      	ldr	r3, [r3, #0]
   d46aa:	681b      	ldr	r3, [r3, #0]
   d46ac:	9301      	str	r3, [sp, #4]
   d46ae:	bd08      	pop	{r3, pc}
   d46b0:	0003023c 	.word	0x0003023c

000d46b4 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d46b4:	b508      	push	{r3, lr}
   d46b6:	4b02      	ldr	r3, [pc, #8]	; (d46c0 <hal_usart_write+0xc>)
   d46b8:	681b      	ldr	r3, [r3, #0]
   d46ba:	68db      	ldr	r3, [r3, #12]
   d46bc:	9301      	str	r3, [sp, #4]
   d46be:	bd08      	pop	{r3, pc}
   d46c0:	0003023c 	.word	0x0003023c

000d46c4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d46c4:	b508      	push	{r3, lr}
   d46c6:	4b02      	ldr	r3, [pc, #8]	; (d46d0 <hal_usart_available+0xc>)
   d46c8:	681b      	ldr	r3, [r3, #0]
   d46ca:	691b      	ldr	r3, [r3, #16]
   d46cc:	9301      	str	r3, [sp, #4]
   d46ce:	bd08      	pop	{r3, pc}
   d46d0:	0003023c 	.word	0x0003023c

000d46d4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d46d4:	b508      	push	{r3, lr}
   d46d6:	4b02      	ldr	r3, [pc, #8]	; (d46e0 <hal_usart_read+0xc>)
   d46d8:	681b      	ldr	r3, [r3, #0]
   d46da:	695b      	ldr	r3, [r3, #20]
   d46dc:	9301      	str	r3, [sp, #4]
   d46de:	bd08      	pop	{r3, pc}
   d46e0:	0003023c 	.word	0x0003023c

000d46e4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d46e4:	b508      	push	{r3, lr}
   d46e6:	4b02      	ldr	r3, [pc, #8]	; (d46f0 <hal_usart_peek+0xc>)
   d46e8:	681b      	ldr	r3, [r3, #0]
   d46ea:	699b      	ldr	r3, [r3, #24]
   d46ec:	9301      	str	r3, [sp, #4]
   d46ee:	bd08      	pop	{r3, pc}
   d46f0:	0003023c 	.word	0x0003023c

000d46f4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d46f4:	b508      	push	{r3, lr}
   d46f6:	4b02      	ldr	r3, [pc, #8]	; (d4700 <hal_usart_flush+0xc>)
   d46f8:	681b      	ldr	r3, [r3, #0]
   d46fa:	69db      	ldr	r3, [r3, #28]
   d46fc:	9301      	str	r3, [sp, #4]
   d46fe:	bd08      	pop	{r3, pc}
   d4700:	0003023c 	.word	0x0003023c

000d4704 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4704:	b508      	push	{r3, lr}
   d4706:	4b02      	ldr	r3, [pc, #8]	; (d4710 <hal_usart_is_enabled+0xc>)
   d4708:	681b      	ldr	r3, [r3, #0]
   d470a:	6a1b      	ldr	r3, [r3, #32]
   d470c:	9301      	str	r3, [sp, #4]
   d470e:	bd08      	pop	{r3, pc}
   d4710:	0003023c 	.word	0x0003023c

000d4714 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4714:	b508      	push	{r3, lr}
   d4716:	4b02      	ldr	r3, [pc, #8]	; (d4720 <hal_usart_available_data_for_write+0xc>)
   d4718:	681b      	ldr	r3, [r3, #0]
   d471a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d471c:	9301      	str	r3, [sp, #4]
   d471e:	bd08      	pop	{r3, pc}
   d4720:	0003023c 	.word	0x0003023c

000d4724 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4724:	b508      	push	{r3, lr}
   d4726:	4b02      	ldr	r3, [pc, #8]	; (d4730 <hal_i2c_write+0xc>)
   d4728:	681b      	ldr	r3, [r3, #0]
   d472a:	6a1b      	ldr	r3, [r3, #32]
   d472c:	9301      	str	r3, [sp, #4]
   d472e:	bd08      	pop	{r3, pc}
   d4730:	00030228 	.word	0x00030228

000d4734 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4734:	b508      	push	{r3, lr}
   d4736:	4b02      	ldr	r3, [pc, #8]	; (d4740 <hal_i2c_available+0xc>)
   d4738:	681b      	ldr	r3, [r3, #0]
   d473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d473c:	9301      	str	r3, [sp, #4]
   d473e:	bd08      	pop	{r3, pc}
   d4740:	00030228 	.word	0x00030228

000d4744 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4744:	b508      	push	{r3, lr}
   d4746:	4b02      	ldr	r3, [pc, #8]	; (d4750 <hal_i2c_read+0xc>)
   d4748:	681b      	ldr	r3, [r3, #0]
   d474a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d474c:	9301      	str	r3, [sp, #4]
   d474e:	bd08      	pop	{r3, pc}
   d4750:	00030228 	.word	0x00030228

000d4754 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4754:	b508      	push	{r3, lr}
   d4756:	4b02      	ldr	r3, [pc, #8]	; (d4760 <hal_i2c_peek+0xc>)
   d4758:	681b      	ldr	r3, [r3, #0]
   d475a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d475c:	9301      	str	r3, [sp, #4]
   d475e:	bd08      	pop	{r3, pc}
   d4760:	00030228 	.word	0x00030228

000d4764 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4764:	b508      	push	{r3, lr}
   d4766:	4b02      	ldr	r3, [pc, #8]	; (d4770 <hal_i2c_flush+0xc>)
   d4768:	681b      	ldr	r3, [r3, #0]
   d476a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d476c:	9301      	str	r3, [sp, #4]
   d476e:	bd08      	pop	{r3, pc}
   d4770:	00030228 	.word	0x00030228

000d4774 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4774:	b508      	push	{r3, lr}
   d4776:	4b02      	ldr	r3, [pc, #8]	; (d4780 <hal_i2c_is_enabled+0xc>)
   d4778:	681b      	ldr	r3, [r3, #0]
   d477a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d477c:	9301      	str	r3, [sp, #4]
   d477e:	bd08      	pop	{r3, pc}
   d4780:	00030228 	.word	0x00030228

000d4784 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4784:	b508      	push	{r3, lr}
   d4786:	4b02      	ldr	r3, [pc, #8]	; (d4790 <hal_i2c_init+0xc>)
   d4788:	681b      	ldr	r3, [r3, #0]
   d478a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d478c:	9301      	str	r3, [sp, #4]
   d478e:	bd08      	pop	{r3, pc}
   d4790:	00030228 	.word	0x00030228

000d4794 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4794:	b508      	push	{r3, lr}
   d4796:	4b02      	ldr	r3, [pc, #8]	; (d47a0 <hal_spi_init+0xc>)
   d4798:	681b      	ldr	r3, [r3, #0]
   d479a:	69db      	ldr	r3, [r3, #28]
   d479c:	9301      	str	r3, [sp, #4]
   d479e:	bd08      	pop	{r3, pc}
   d47a0:	00030230 	.word	0x00030230

000d47a4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d47a4:	b508      	push	{r3, lr}
   d47a6:	4b02      	ldr	r3, [pc, #8]	; (d47b0 <hal_spi_is_enabled+0xc>)
   d47a8:	681b      	ldr	r3, [r3, #0]
   d47aa:	6a1b      	ldr	r3, [r3, #32]
   d47ac:	9301      	str	r3, [sp, #4]
   d47ae:	bd08      	pop	{r3, pc}
   d47b0:	00030230 	.word	0x00030230

000d47b4 <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
   d47b4:	b508      	push	{r3, lr}
   d47b6:	4b02      	ldr	r3, [pc, #8]	; (d47c0 <HAL_Servo_Attach+0xc>)
   d47b8:	681b      	ldr	r3, [r3, #0]
   d47ba:	691b      	ldr	r3, [r3, #16]
   d47bc:	9301      	str	r3, [sp, #4]
   d47be:	bd08      	pop	{r3, pc}
   d47c0:	00030224 	.word	0x00030224

000d47c4 <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
   d47c4:	b508      	push	{r3, lr}
   d47c6:	4b02      	ldr	r3, [pc, #8]	; (d47d0 <HAL_Servo_Detach+0xc>)
   d47c8:	681b      	ldr	r3, [r3, #0]
   d47ca:	695b      	ldr	r3, [r3, #20]
   d47cc:	9301      	str	r3, [sp, #4]
   d47ce:	bd08      	pop	{r3, pc}
   d47d0:	00030224 	.word	0x00030224

000d47d4 <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
   d47d4:	b508      	push	{r3, lr}
   d47d6:	4b02      	ldr	r3, [pc, #8]	; (d47e0 <HAL_Servo_Write_Pulse_Width+0xc>)
   d47d8:	681b      	ldr	r3, [r3, #0]
   d47da:	699b      	ldr	r3, [r3, #24]
   d47dc:	9301      	str	r3, [sp, #4]
   d47de:	bd08      	pop	{r3, pc}
   d47e0:	00030224 	.word	0x00030224

000d47e4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d47e4:	b508      	push	{r3, lr}
   d47e6:	4b02      	ldr	r3, [pc, #8]	; (d47f0 <HAL_USB_USART_Init+0xc>)
   d47e8:	681b      	ldr	r3, [r3, #0]
   d47ea:	681b      	ldr	r3, [r3, #0]
   d47ec:	9301      	str	r3, [sp, #4]
   d47ee:	bd08      	pop	{r3, pc}
   d47f0:	0003024c 	.word	0x0003024c

000d47f4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d47f4:	b508      	push	{r3, lr}
   d47f6:	4b02      	ldr	r3, [pc, #8]	; (d4800 <HAL_USB_USART_Available_Data+0xc>)
   d47f8:	681b      	ldr	r3, [r3, #0]
   d47fa:	691b      	ldr	r3, [r3, #16]
   d47fc:	9301      	str	r3, [sp, #4]
   d47fe:	bd08      	pop	{r3, pc}
   d4800:	0003024c 	.word	0x0003024c

000d4804 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4804:	b508      	push	{r3, lr}
   d4806:	4b02      	ldr	r3, [pc, #8]	; (d4810 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4808:	681b      	ldr	r3, [r3, #0]
   d480a:	695b      	ldr	r3, [r3, #20]
   d480c:	9301      	str	r3, [sp, #4]
   d480e:	bd08      	pop	{r3, pc}
   d4810:	0003024c 	.word	0x0003024c

000d4814 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4814:	b508      	push	{r3, lr}
   d4816:	4b02      	ldr	r3, [pc, #8]	; (d4820 <HAL_USB_USART_Receive_Data+0xc>)
   d4818:	681b      	ldr	r3, [r3, #0]
   d481a:	699b      	ldr	r3, [r3, #24]
   d481c:	9301      	str	r3, [sp, #4]
   d481e:	bd08      	pop	{r3, pc}
   d4820:	0003024c 	.word	0x0003024c

000d4824 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4824:	b508      	push	{r3, lr}
   d4826:	4b02      	ldr	r3, [pc, #8]	; (d4830 <HAL_USB_USART_Send_Data+0xc>)
   d4828:	681b      	ldr	r3, [r3, #0]
   d482a:	69db      	ldr	r3, [r3, #28]
   d482c:	9301      	str	r3, [sp, #4]
   d482e:	bd08      	pop	{r3, pc}
   d4830:	0003024c 	.word	0x0003024c

000d4834 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4834:	b508      	push	{r3, lr}
   d4836:	4b02      	ldr	r3, [pc, #8]	; (d4840 <HAL_USB_USART_Flush_Data+0xc>)
   d4838:	681b      	ldr	r3, [r3, #0]
   d483a:	6a1b      	ldr	r3, [r3, #32]
   d483c:	9301      	str	r3, [sp, #4]
   d483e:	bd08      	pop	{r3, pc}
   d4840:	0003024c 	.word	0x0003024c

000d4844 <jsmn_init>:
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))

DYNALIB_FN(14, services, jsmn_init, void(jsmn_parser*, void*))
   d4844:	b508      	push	{r3, lr}
   d4846:	4b02      	ldr	r3, [pc, #8]	; (d4850 <jsmn_init+0xc>)
   d4848:	681b      	ldr	r3, [r3, #0]
   d484a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d484c:	9301      	str	r3, [sp, #4]
   d484e:	bd08      	pop	{r3, pc}
   d4850:	00030260 	.word	0x00030260

000d4854 <jsmn_parse>:
DYNALIB_FN(15, services, jsmn_parse, jsmnerr_t(jsmn_parser*, const char*, size_t, jsmntok_t*, unsigned int, void*))
   d4854:	b508      	push	{r3, lr}
   d4856:	4b02      	ldr	r3, [pc, #8]	; (d4860 <jsmn_parse+0xc>)
   d4858:	681b      	ldr	r3, [r3, #0]
   d485a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d485c:	9301      	str	r3, [sp, #4]
   d485e:	bd08      	pop	{r3, pc}
   d4860:	00030260 	.word	0x00030260

000d4864 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4864:	b508      	push	{r3, lr}
   d4866:	4b02      	ldr	r3, [pc, #8]	; (d4870 <set_system_mode+0xc>)
   d4868:	681b      	ldr	r3, [r3, #0]
   d486a:	685b      	ldr	r3, [r3, #4]
   d486c:	9301      	str	r3, [sp, #4]
   d486e:	bd08      	pop	{r3, pc}
   d4870:	00030220 	.word	0x00030220

000d4874 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4874:	b508      	push	{r3, lr}
   d4876:	4b02      	ldr	r3, [pc, #8]	; (d4880 <system_delay_ms+0xc>)
   d4878:	681b      	ldr	r3, [r3, #0]
   d487a:	695b      	ldr	r3, [r3, #20]
   d487c:	9301      	str	r3, [sp, #4]
   d487e:	bd08      	pop	{r3, pc}
   d4880:	00030220 	.word	0x00030220

000d4884 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4884:	b508      	push	{r3, lr}
   d4886:	4b02      	ldr	r3, [pc, #8]	; (d4890 <application_thread_current+0xc>)
   d4888:	681b      	ldr	r3, [r3, #0]
   d488a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d488c:	9301      	str	r3, [sp, #4]
   d488e:	bd08      	pop	{r3, pc}
   d4890:	00030220 	.word	0x00030220

000d4894 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4894:	b508      	push	{r3, lr}
   d4896:	4b02      	ldr	r3, [pc, #8]	; (d48a0 <application_thread_invoke+0xc>)
   d4898:	681b      	ldr	r3, [r3, #0]
   d489a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d489c:	9301      	str	r3, [sp, #4]
   d489e:	bd08      	pop	{r3, pc}
   d48a0:	00030220 	.word	0x00030220

000d48a4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d48a4:	b508      	push	{r3, lr}
   d48a6:	4b03      	ldr	r3, [pc, #12]	; (d48b4 <system_ctrl_set_app_request_handler+0x10>)
   d48a8:	681b      	ldr	r3, [r3, #0]
   d48aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d48ae:	9301      	str	r3, [sp, #4]
   d48b0:	bd08      	pop	{r3, pc}
   d48b2:	0000      	.short	0x0000
   d48b4:	00030220 	.word	0x00030220

000d48b8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d48b8:	b508      	push	{r3, lr}
   d48ba:	4b03      	ldr	r3, [pc, #12]	; (d48c8 <system_ctrl_set_result+0x10>)
   d48bc:	681b      	ldr	r3, [r3, #0]
   d48be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d48c2:	9301      	str	r3, [sp, #4]
   d48c4:	bd08      	pop	{r3, pc}
   d48c6:	0000      	.short	0x0000
   d48c8:	00030220 	.word	0x00030220

000d48cc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d48cc:	b508      	push	{r3, lr}
   d48ce:	4b02      	ldr	r3, [pc, #8]	; (d48d8 <network_connect+0xc>)
   d48d0:	681b      	ldr	r3, [r3, #0]
   d48d2:	685b      	ldr	r3, [r3, #4]
   d48d4:	9301      	str	r3, [sp, #4]
   d48d6:	bd08      	pop	{r3, pc}
   d48d8:	00030240 	.word	0x00030240

000d48dc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d48dc:	b508      	push	{r3, lr}
   d48de:	4b02      	ldr	r3, [pc, #8]	; (d48e8 <network_connecting+0xc>)
   d48e0:	681b      	ldr	r3, [r3, #0]
   d48e2:	689b      	ldr	r3, [r3, #8]
   d48e4:	9301      	str	r3, [sp, #4]
   d48e6:	bd08      	pop	{r3, pc}
   d48e8:	00030240 	.word	0x00030240

000d48ec <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d48ec:	b508      	push	{r3, lr}
   d48ee:	4b02      	ldr	r3, [pc, #8]	; (d48f8 <network_disconnect+0xc>)
   d48f0:	681b      	ldr	r3, [r3, #0]
   d48f2:	68db      	ldr	r3, [r3, #12]
   d48f4:	9301      	str	r3, [sp, #4]
   d48f6:	bd08      	pop	{r3, pc}
   d48f8:	00030240 	.word	0x00030240

000d48fc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d48fc:	b508      	push	{r3, lr}
   d48fe:	4b02      	ldr	r3, [pc, #8]	; (d4908 <network_ready+0xc>)
   d4900:	681b      	ldr	r3, [r3, #0]
   d4902:	691b      	ldr	r3, [r3, #16]
   d4904:	9301      	str	r3, [sp, #4]
   d4906:	bd08      	pop	{r3, pc}
   d4908:	00030240 	.word	0x00030240

000d490c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d490c:	b508      	push	{r3, lr}
   d490e:	4b02      	ldr	r3, [pc, #8]	; (d4918 <network_on+0xc>)
   d4910:	681b      	ldr	r3, [r3, #0]
   d4912:	695b      	ldr	r3, [r3, #20]
   d4914:	9301      	str	r3, [sp, #4]
   d4916:	bd08      	pop	{r3, pc}
   d4918:	00030240 	.word	0x00030240

000d491c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d491c:	b508      	push	{r3, lr}
   d491e:	4b02      	ldr	r3, [pc, #8]	; (d4928 <network_off+0xc>)
   d4920:	681b      	ldr	r3, [r3, #0]
   d4922:	699b      	ldr	r3, [r3, #24]
   d4924:	9301      	str	r3, [sp, #4]
   d4926:	bd08      	pop	{r3, pc}
   d4928:	00030240 	.word	0x00030240

000d492c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d492c:	b508      	push	{r3, lr}
   d492e:	4b02      	ldr	r3, [pc, #8]	; (d4938 <network_listen+0xc>)
   d4930:	681b      	ldr	r3, [r3, #0]
   d4932:	69db      	ldr	r3, [r3, #28]
   d4934:	9301      	str	r3, [sp, #4]
   d4936:	bd08      	pop	{r3, pc}
   d4938:	00030240 	.word	0x00030240

000d493c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d493c:	b508      	push	{r3, lr}
   d493e:	4b02      	ldr	r3, [pc, #8]	; (d4948 <network_listening+0xc>)
   d4940:	681b      	ldr	r3, [r3, #0]
   d4942:	6a1b      	ldr	r3, [r3, #32]
   d4944:	9301      	str	r3, [sp, #4]
   d4946:	bd08      	pop	{r3, pc}
   d4948:	00030240 	.word	0x00030240

000d494c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d494c:	b508      	push	{r3, lr}
   d494e:	4b02      	ldr	r3, [pc, #8]	; (d4958 <network_set_listen_timeout+0xc>)
   d4950:	681b      	ldr	r3, [r3, #0]
   d4952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4954:	9301      	str	r3, [sp, #4]
   d4956:	bd08      	pop	{r3, pc}
   d4958:	00030240 	.word	0x00030240

000d495c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d495c:	b508      	push	{r3, lr}
   d495e:	4b02      	ldr	r3, [pc, #8]	; (d4968 <network_get_listen_timeout+0xc>)
   d4960:	681b      	ldr	r3, [r3, #0]
   d4962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4964:	9301      	str	r3, [sp, #4]
   d4966:	bd08      	pop	{r3, pc}
   d4968:	00030240 	.word	0x00030240

000d496c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d496c:	b508      	push	{r3, lr}
   d496e:	4b02      	ldr	r3, [pc, #8]	; (d4978 <spark_variable+0xc>)
   d4970:	681b      	ldr	r3, [r3, #0]
   d4972:	681b      	ldr	r3, [r3, #0]
   d4974:	9301      	str	r3, [sp, #4]
   d4976:	bd08      	pop	{r3, pc}
   d4978:	00030244 	.word	0x00030244

000d497c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d497c:	b508      	push	{r3, lr}
   d497e:	4b02      	ldr	r3, [pc, #8]	; (d4988 <spark_function+0xc>)
   d4980:	681b      	ldr	r3, [r3, #0]
   d4982:	685b      	ldr	r3, [r3, #4]
   d4984:	9301      	str	r3, [sp, #4]
   d4986:	bd08      	pop	{r3, pc}
   d4988:	00030244 	.word	0x00030244

000d498c <spark_cloud_flag_connected>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d498c:	b508      	push	{r3, lr}
   d498e:	4b02      	ldr	r3, [pc, #8]	; (d4998 <spark_cloud_flag_connected+0xc>)
   d4990:	681b      	ldr	r3, [r3, #0]
   d4992:	695b      	ldr	r3, [r3, #20]
   d4994:	9301      	str	r3, [sp, #4]
   d4996:	bd08      	pop	{r3, pc}
   d4998:	00030244 	.word	0x00030244

000d499c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d499c:	b508      	push	{r3, lr}
   d499e:	4b02      	ldr	r3, [pc, #8]	; (d49a8 <spark_send_event+0xc>)
   d49a0:	681b      	ldr	r3, [r3, #0]
   d49a2:	6a1b      	ldr	r3, [r3, #32]
   d49a4:	9301      	str	r3, [sp, #4]
   d49a6:	bd08      	pop	{r3, pc}
   d49a8:	00030244 	.word	0x00030244

000d49ac <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d49ac:	b508      	push	{r3, lr}
   d49ae:	4b02      	ldr	r3, [pc, #8]	; (d49b8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d49b0:	681b      	ldr	r3, [r3, #0]
   d49b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d49b4:	9301      	str	r3, [sp, #4]
   d49b6:	bd08      	pop	{r3, pc}
   d49b8:	00030244 	.word	0x00030244

000d49bc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d49bc:	b508      	push	{r3, lr}
   d49be:	4b02      	ldr	r3, [pc, #8]	; (d49c8 <malloc+0xc>)
   d49c0:	681b      	ldr	r3, [r3, #0]
   d49c2:	681b      	ldr	r3, [r3, #0]
   d49c4:	9301      	str	r3, [sp, #4]
   d49c6:	bd08      	pop	{r3, pc}
   d49c8:	0003021c 	.word	0x0003021c

000d49cc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d49cc:	b508      	push	{r3, lr}
   d49ce:	4b02      	ldr	r3, [pc, #8]	; (d49d8 <free+0xc>)
   d49d0:	681b      	ldr	r3, [r3, #0]
   d49d2:	685b      	ldr	r3, [r3, #4]
   d49d4:	9301      	str	r3, [sp, #4]
   d49d6:	bd08      	pop	{r3, pc}
   d49d8:	0003021c 	.word	0x0003021c

000d49dc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d49dc:	b508      	push	{r3, lr}
   d49de:	4b02      	ldr	r3, [pc, #8]	; (d49e8 <realloc+0xc>)
   d49e0:	681b      	ldr	r3, [r3, #0]
   d49e2:	689b      	ldr	r3, [r3, #8]
   d49e4:	9301      	str	r3, [sp, #4]
   d49e6:	bd08      	pop	{r3, pc}
   d49e8:	0003021c 	.word	0x0003021c

000d49ec <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d49ec:	b508      	push	{r3, lr}
   d49ee:	4b02      	ldr	r3, [pc, #8]	; (d49f8 <abort+0xc>)
   d49f0:	681b      	ldr	r3, [r3, #0]
   d49f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d49f4:	9301      	str	r3, [sp, #4]
   d49f6:	bd08      	pop	{r3, pc}
   d49f8:	0003021c 	.word	0x0003021c

000d49fc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d49fc:	b508      	push	{r3, lr}
   d49fe:	4b02      	ldr	r3, [pc, #8]	; (d4a08 <_malloc_r+0xc>)
   d4a00:	681b      	ldr	r3, [r3, #0]
   d4a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a04:	9301      	str	r3, [sp, #4]
   d4a06:	bd08      	pop	{r3, pc}
   d4a08:	0003021c 	.word	0x0003021c

000d4a0c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4a0c:	b508      	push	{r3, lr}
   d4a0e:	4b02      	ldr	r3, [pc, #8]	; (d4a18 <newlib_impure_ptr_callback+0xc>)
   d4a10:	681b      	ldr	r3, [r3, #0]
   d4a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4a14:	9301      	str	r3, [sp, #4]
   d4a16:	bd08      	pop	{r3, pc}
   d4a18:	0003021c 	.word	0x0003021c

000d4a1c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4a1c:	2200      	movs	r2, #0
   d4a1e:	6840      	ldr	r0, [r0, #4]
   d4a20:	4611      	mov	r1, r2
   d4a22:	f7ff bf8b 	b.w	d493c <network_listening>

000d4a26 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4a26:	2200      	movs	r2, #0
   d4a28:	6840      	ldr	r0, [r0, #4]
   d4a2a:	4611      	mov	r1, r2
   d4a2c:	f7ff bf96 	b.w	d495c <network_get_listen_timeout>

000d4a30 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4a30:	6840      	ldr	r0, [r0, #4]
   d4a32:	2200      	movs	r2, #0
   d4a34:	f7ff bf8a 	b.w	d494c <network_set_listen_timeout>

000d4a38 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4a38:	6840      	ldr	r0, [r0, #4]
   d4a3a:	2200      	movs	r2, #0
   d4a3c:	f081 0101 	eor.w	r1, r1, #1
   d4a40:	f7ff bf74 	b.w	d492c <network_listen>

000d4a44 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4a44:	2300      	movs	r3, #0
   d4a46:	6840      	ldr	r0, [r0, #4]
   d4a48:	461a      	mov	r2, r3
   d4a4a:	4619      	mov	r1, r3
   d4a4c:	f7ff bf66 	b.w	d491c <network_off>

000d4a50 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4a50:	2300      	movs	r3, #0
   d4a52:	6840      	ldr	r0, [r0, #4]
   d4a54:	461a      	mov	r2, r3
   d4a56:	4619      	mov	r1, r3
   d4a58:	f7ff bf58 	b.w	d490c <network_on>

000d4a5c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4a5c:	2200      	movs	r2, #0
   d4a5e:	6840      	ldr	r0, [r0, #4]
   d4a60:	4611      	mov	r1, r2
   d4a62:	f7ff bf4b 	b.w	d48fc <network_ready>

000d4a66 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4a66:	2200      	movs	r2, #0
   d4a68:	6840      	ldr	r0, [r0, #4]
   d4a6a:	4611      	mov	r1, r2
   d4a6c:	f7ff bf36 	b.w	d48dc <network_connecting>

000d4a70 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4a70:	6840      	ldr	r0, [r0, #4]
   d4a72:	2200      	movs	r2, #0
   d4a74:	2102      	movs	r1, #2
   d4a76:	f7ff bf39 	b.w	d48ec <network_disconnect>

000d4a7a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4a7a:	2300      	movs	r3, #0
   d4a7c:	6840      	ldr	r0, [r0, #4]
   d4a7e:	461a      	mov	r2, r3
   d4a80:	f7ff bf24 	b.w	d48cc <network_connect>

000d4a84 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4a84:	4b02      	ldr	r3, [pc, #8]	; (d4a90 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4a86:	2203      	movs	r2, #3
   d4a88:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4a8a:	4a02      	ldr	r2, [pc, #8]	; (d4a94 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4a8c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4a8e:	4770      	bx	lr
   d4a90:	2003e744 	.word	0x2003e744
   d4a94:	000d63e0 	.word	0x000d63e0

000d4a98 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d4a98:	b510      	push	{r4, lr}
   d4a9a:	4604      	mov	r4, r0
   d4a9c:	4608      	mov	r0, r1
{
    _spi = spi;
   d4a9e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d4aa0:	f7ff fe78 	bl	d4794 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4aa4:	2300      	movs	r3, #0
   d4aa6:	6063      	str	r3, [r4, #4]
}
   d4aa8:	4620      	mov	r0, r4
   d4aaa:	bd10      	pop	{r4, pc}

000d4aac <_ZN5Servo17writeMicrosecondsEt>:
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{

  if (!this->attached())
   d4aac:	f9b0 2000 	ldrsh.w	r2, [r0]
   d4ab0:	1c53      	adds	r3, r2, #1
   d4ab2:	d00b      	beq.n	d4acc <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
   d4ab4:	8843      	ldrh	r3, [r0, #2]
   d4ab6:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   d4ab8:	428b      	cmp	r3, r1
   d4aba:	d803      	bhi.n	d4ac4 <_ZN5Servo17writeMicrosecondsEt+0x18>
   d4abc:	4288      	cmp	r0, r1
   d4abe:	4603      	mov	r3, r0
   d4ac0:	bf28      	it	cs
   d4ac2:	460b      	movcs	r3, r1

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
   d4ac4:	4619      	mov	r1, r3
   d4ac6:	b290      	uxth	r0, r2
   d4ac8:	f7ff be84 	b.w	d47d4 <HAL_Servo_Write_Pulse_Width>
}
   d4acc:	4770      	bx	lr

000d4ace <_ZN5Servo5writeEi>:
{
   d4ace:	b513      	push	{r0, r1, r4, lr}
   d4ad0:	4604      	mov	r4, r0
   d4ad2:	4608      	mov	r0, r1
   d4ad4:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   d4ad8:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   d4adc:	4288      	cmp	r0, r1
   d4ade:	db10      	blt.n	d4b02 <_ZN5Servo5writeEi+0x34>
   d4ae0:	4290      	cmp	r0, r2
   d4ae2:	bfa8      	it	ge
   d4ae4:	4610      	movge	r0, r2
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   d4ae6:	88a3      	ldrh	r3, [r4, #4]
   d4ae8:	9300      	str	r3, [sp, #0]
   d4aea:	8863      	ldrh	r3, [r4, #2]
   d4aec:	f000 f992 	bl	d4e14 <_Z3mapiiiii>
   d4af0:	68e3      	ldr	r3, [r4, #12]
   d4af2:	4418      	add	r0, r3
   d4af4:	b281      	uxth	r1, r0
   d4af6:	4620      	mov	r0, r4
}
   d4af8:	b002      	add	sp, #8
   d4afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   d4afe:	f7ff bfd5 	b.w	d4aac <_ZN5Servo17writeMicrosecondsEt>
   d4b02:	4608      	mov	r0, r1
   d4b04:	e7ef      	b.n	d4ae6 <_ZN5Servo5writeEi+0x18>
	...

000d4b08 <_ZN5Servo11resetFieldsEv>:
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
   d4b08:	4a04      	ldr	r2, [pc, #16]	; (d4b1c <_ZN5Servo11resetFieldsEv+0x14>)
   d4b0a:	f44f 6316 	mov.w	r3, #2400	; 0x960
   d4b0e:	e9c0 2300 	strd	r2, r3, [r0]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
   d4b12:	23b4      	movs	r3, #180	; 0xb4
   d4b14:	8103      	strh	r3, [r0, #8]
  this->trim = 0;
   d4b16:	2300      	movs	r3, #0
   d4b18:	60c3      	str	r3, [r0, #12]
}
   d4b1a:	4770      	bx	lr
   d4b1c:	0220ffff 	.word	0x0220ffff

000d4b20 <_ZN5ServoC1Ev>:
Servo::Servo()
   d4b20:	b508      	push	{r3, lr}
  this->resetFields();
   d4b22:	f7ff fff1 	bl	d4b08 <_ZN5Servo11resetFieldsEv>
}
   d4b26:	bd08      	pop	{r3, pc}

000d4b28 <_ZN5Servo6detachEv>:
{
   d4b28:	b510      	push	{r4, lr}
   d4b2a:	4604      	mov	r4, r0
  if (!this->attached())
   d4b2c:	f9b0 0000 	ldrsh.w	r0, [r0]
   d4b30:	1c43      	adds	r3, r0, #1
   d4b32:	d007      	beq.n	d4b44 <_ZN5Servo6detachEv+0x1c>
  HAL_Servo_Detach(this->pin);
   d4b34:	b280      	uxth	r0, r0
   d4b36:	f7ff fe45 	bl	d47c4 <HAL_Servo_Detach>
  this->resetFields();
   d4b3a:	4620      	mov	r0, r4
   d4b3c:	f7ff ffe4 	bl	d4b08 <_ZN5Servo11resetFieldsEv>
  return true;
   d4b40:	2001      	movs	r0, #1
}
   d4b42:	bd10      	pop	{r4, pc}
    return false;
   d4b44:	2000      	movs	r0, #0
   d4b46:	e7fc      	b.n	d4b42 <_ZN5Servo6detachEv+0x1a>

000d4b48 <_ZN5ServoD1Ev>:
Servo::~Servo()
   d4b48:	b510      	push	{r4, lr}
   d4b4a:	4604      	mov	r4, r0
  detach();
   d4b4c:	f7ff ffec 	bl	d4b28 <_ZN5Servo6detachEv>
}
   d4b50:	4620      	mov	r0, r4
   d4b52:	bd10      	pop	{r4, pc}

000d4b54 <_ZN5Servo6attachEtttss>:
{
   d4b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4b58:	460d      	mov	r5, r1
   d4b5a:	4604      	mov	r4, r0
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   d4b5c:	2102      	movs	r1, #2
   d4b5e:	4628      	mov	r0, r5
{
   d4b60:	4690      	mov	r8, r2
   d4b62:	461f      	mov	r7, r3
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   d4b64:	f7ff fd4e 	bl	d4604 <HAL_Validate_Pin_Function>
   d4b68:	2802      	cmp	r0, #2
   d4b6a:	d003      	beq.n	d4b74 <_ZN5Servo6attachEtttss+0x20>
    return false;
   d4b6c:	2600      	movs	r6, #0
}
   d4b6e:	4630      	mov	r0, r6
   d4b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!pinAvailable(pin))
   d4b74:	4628      	mov	r0, r5
   d4b76:	f001 f9c1 	bl	d5efc <pinAvailable>
   d4b7a:	4606      	mov	r6, r0
   d4b7c:	2800      	cmp	r0, #0
   d4b7e:	d0f5      	beq.n	d4b6c <_ZN5Servo6attachEtttss+0x18>
  if (this->attached())
   d4b80:	f9b4 3000 	ldrsh.w	r3, [r4]
   d4b84:	3301      	adds	r3, #1
   d4b86:	d002      	beq.n	d4b8e <_ZN5Servo6attachEtttss+0x3a>
    this->detach();
   d4b88:	4620      	mov	r0, r4
   d4b8a:	f7ff ffcd 	bl	d4b28 <_ZN5Servo6detachEv>
  this->minAngle = minAngle;
   d4b8e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
   d4b92:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
   d4b94:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  this->pin = pin;
   d4b98:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
   d4b9a:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
   d4b9e:	80a7      	strh	r7, [r4, #4]
  this->maxAngle = maxAngle;
   d4ba0:	8123      	strh	r3, [r4, #8]
  HAL_Servo_Attach(this->pin);
   d4ba2:	4628      	mov	r0, r5
   d4ba4:	f7ff fe06 	bl	d47b4 <HAL_Servo_Attach>
  return true;
   d4ba8:	e7e1      	b.n	d4b6e <_ZN5Servo6attachEtttss+0x1a>

000d4baa <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4baa:	b510      	push	{r4, lr}
   d4bac:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4bae:	6800      	ldr	r0, [r0, #0]
   d4bb0:	b118      	cbz	r0, d4bba <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d4bb2:	f7ff ff0b 	bl	d49cc <free>
            wakeupSource_ = nullptr;
   d4bb6:	2300      	movs	r3, #0
   d4bb8:	6023      	str	r3, [r4, #0]
        }
    }
   d4bba:	bd10      	pop	{r4, pc}

000d4bbc <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4bbc:	b510      	push	{r4, lr}
   d4bbe:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d4bc0:	f7ff fff3 	bl	d4baa <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d4bc4:	4620      	mov	r0, r4
   d4bc6:	bd10      	pop	{r4, pc}

000d4bc8 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4bc8:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4bca:	4b09      	ldr	r3, [pc, #36]	; (d4bf0 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d4bcc:	4c09      	ldr	r4, [pc, #36]	; (d4bf4 <_GLOBAL__sub_I_System+0x2c>)
   d4bce:	2202      	movs	r2, #2
   d4bd0:	2000      	movs	r0, #0
   d4bd2:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d4bd4:	4b08      	ldr	r3, [pc, #32]	; (d4bf8 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d4bd6:	6020      	str	r0, [r4, #0]
   d4bd8:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d4bda:	71a0      	strb	r0, [r4, #6]
   d4bdc:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4bde:	f7ff fe41 	bl	d4864 <set_system_mode>
SystemClass System;
   d4be2:	4620      	mov	r0, r4
   d4be4:	4a05      	ldr	r2, [pc, #20]	; (d4bfc <_GLOBAL__sub_I_System+0x34>)
   d4be6:	4906      	ldr	r1, [pc, #24]	; (d4c00 <_GLOBAL__sub_I_System+0x38>)
   d4be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d4bec:	f001 ba46 	b.w	d607c <__aeabi_atexit>
   d4bf0:	2003e758 	.word	0x2003e758
   d4bf4:	2003e74c 	.word	0x2003e74c
   d4bf8:	ffff0000 	.word	0xffff0000
   d4bfc:	2003e724 	.word	0x2003e724
   d4c00:	000d4bbd 	.word	0x000d4bbd

000d4c04 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4c04:	b510      	push	{r4, lr}
   d4c06:	4604      	mov	r4, r0
{
	free(buffer);
   d4c08:	6800      	ldr	r0, [r0, #0]
   d4c0a:	f7ff fedf 	bl	d49cc <free>
}
   d4c0e:	4620      	mov	r0, r4
   d4c10:	bd10      	pop	{r4, pc}

000d4c12 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4c12:	b510      	push	{r4, lr}
   d4c14:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4c16:	6800      	ldr	r0, [r0, #0]
   d4c18:	b108      	cbz	r0, d4c1e <_ZN6String10invalidateEv+0xc>
   d4c1a:	f7ff fed7 	bl	d49cc <free>
	buffer = NULL;
   d4c1e:	2300      	movs	r3, #0
	capacity = len = 0;
   d4c20:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d4c24:	6023      	str	r3, [r4, #0]
}
   d4c26:	bd10      	pop	{r4, pc}

000d4c28 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4c28:	b538      	push	{r3, r4, r5, lr}
   d4c2a:	4604      	mov	r4, r0
   d4c2c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4c2e:	6800      	ldr	r0, [r0, #0]
   d4c30:	3101      	adds	r1, #1
   d4c32:	f7ff fed3 	bl	d49dc <realloc>
	if (newbuffer) {
   d4c36:	b110      	cbz	r0, d4c3e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4c38:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d4c3c:	2001      	movs	r0, #1
	}
	return 0;
}
   d4c3e:	bd38      	pop	{r3, r4, r5, pc}

000d4c40 <_ZN6String7reserveEj>:
{
   d4c40:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4c42:	6803      	ldr	r3, [r0, #0]
{
   d4c44:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4c46:	b123      	cbz	r3, d4c52 <_ZN6String7reserveEj+0x12>
   d4c48:	6843      	ldr	r3, [r0, #4]
   d4c4a:	428b      	cmp	r3, r1
   d4c4c:	d301      	bcc.n	d4c52 <_ZN6String7reserveEj+0x12>
   d4c4e:	2001      	movs	r0, #1
}
   d4c50:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d4c52:	4620      	mov	r0, r4
   d4c54:	f7ff ffe8 	bl	d4c28 <_ZN6String12changeBufferEj>
   d4c58:	2800      	cmp	r0, #0
   d4c5a:	d0f9      	beq.n	d4c50 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d4c5c:	68a3      	ldr	r3, [r4, #8]
   d4c5e:	2b00      	cmp	r3, #0
   d4c60:	d1f5      	bne.n	d4c4e <_ZN6String7reserveEj+0xe>
   d4c62:	6822      	ldr	r2, [r4, #0]
   d4c64:	7013      	strb	r3, [r2, #0]
   d4c66:	e7f2      	b.n	d4c4e <_ZN6String7reserveEj+0xe>

000d4c68 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4c68:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4c6a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d4c6c:	4611      	mov	r1, r2
   d4c6e:	9201      	str	r2, [sp, #4]
{
   d4c70:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d4c72:	f7ff ffe5 	bl	d4c40 <_ZN6String7reserveEj>
   d4c76:	9a01      	ldr	r2, [sp, #4]
   d4c78:	b928      	cbnz	r0, d4c86 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d4c7a:	4620      	mov	r0, r4
   d4c7c:	f7ff ffc9 	bl	d4c12 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d4c80:	4620      	mov	r0, r4
   d4c82:	b003      	add	sp, #12
   d4c84:	bd30      	pop	{r4, r5, pc}
	len = length;
   d4c86:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d4c88:	4629      	mov	r1, r5
   d4c8a:	6820      	ldr	r0, [r4, #0]
   d4c8c:	f001 fa16 	bl	d60bc <memcpy>
	buffer[len] = 0;
   d4c90:	6822      	ldr	r2, [r4, #0]
   d4c92:	68a3      	ldr	r3, [r4, #8]
   d4c94:	2100      	movs	r1, #0
   d4c96:	54d1      	strb	r1, [r2, r3]
	return *this;
   d4c98:	e7f2      	b.n	d4c80 <_ZN6String4copyEPKcj+0x18>

000d4c9a <_ZN6StringC1EPKc>:
	buffer = NULL;
   d4c9a:	2300      	movs	r3, #0
String::String(const char *cstr)
   d4c9c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d4c9e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d4ca2:	4604      	mov	r4, r0
	len = 0;
   d4ca4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4ca6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d4ca8:	b141      	cbz	r1, d4cbc <_ZN6StringC1EPKc+0x22>
   d4caa:	4608      	mov	r0, r1
   d4cac:	9101      	str	r1, [sp, #4]
   d4cae:	f001 fa80 	bl	d61b2 <strlen>
   d4cb2:	9901      	ldr	r1, [sp, #4]
   d4cb4:	4602      	mov	r2, r0
   d4cb6:	4620      	mov	r0, r4
   d4cb8:	f7ff ffd6 	bl	d4c68 <_ZN6String4copyEPKcj>
}
   d4cbc:	4620      	mov	r0, r4
   d4cbe:	b002      	add	sp, #8
   d4cc0:	bd10      	pop	{r4, pc}

000d4cc2 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d4cc2:	4288      	cmp	r0, r1
{
   d4cc4:	b510      	push	{r4, lr}
   d4cc6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d4cc8:	d005      	beq.n	d4cd6 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d4cca:	680b      	ldr	r3, [r1, #0]
   d4ccc:	b12b      	cbz	r3, d4cda <_ZN6StringaSERKS_+0x18>
   d4cce:	688a      	ldr	r2, [r1, #8]
   d4cd0:	4619      	mov	r1, r3
   d4cd2:	f7ff ffc9 	bl	d4c68 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d4cd6:	4620      	mov	r0, r4
   d4cd8:	bd10      	pop	{r4, pc}
	else invalidate();
   d4cda:	f7ff ff9a 	bl	d4c12 <_ZN6String10invalidateEv>
   d4cde:	e7fa      	b.n	d4cd6 <_ZN6StringaSERKS_+0x14>

000d4ce0 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d4ce0:	b510      	push	{r4, lr}
	buffer = NULL;
   d4ce2:	2300      	movs	r3, #0
String::String(const String &value)
   d4ce4:	4604      	mov	r4, r0
	capacity = 0;
   d4ce6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d4cea:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4cec:	7303      	strb	r3, [r0, #12]
	*this = value;
   d4cee:	f7ff ffe8 	bl	d4cc2 <_ZN6StringaSERKS_>
}
   d4cf2:	4620      	mov	r0, r4
   d4cf4:	bd10      	pop	{r4, pc}

000d4cf6 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d4cf6:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d4cf8:	6882      	ldr	r2, [r0, #8]
   d4cfa:	b93a      	cbnz	r2, d4d0c <_ZNK6String6equalsEPKc+0x16>
   d4cfc:	b121      	cbz	r1, d4d08 <_ZNK6String6equalsEPKc+0x12>
   d4cfe:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d4d00:	fab0 f080 	clz	r0, r0
   d4d04:	0940      	lsrs	r0, r0, #5
   d4d06:	e000      	b.n	d4d0a <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d4d08:	2001      	movs	r0, #1
}
   d4d0a:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d4d0c:	6800      	ldr	r0, [r0, #0]
   d4d0e:	b909      	cbnz	r1, d4d14 <_ZNK6String6equalsEPKc+0x1e>
   d4d10:	7800      	ldrb	r0, [r0, #0]
   d4d12:	e7f5      	b.n	d4d00 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d4d14:	f001 fa26 	bl	d6164 <strcmp>
   d4d18:	e7f2      	b.n	d4d00 <_ZNK6String6equalsEPKc+0xa>

000d4d1a <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   d4d1a:	6800      	ldr	r0, [r0, #0]
   d4d1c:	b108      	cbz	r0, d4d22 <_ZNK6String5toIntEv+0x8>
   d4d1e:	f001 b9bb 	b.w	d6098 <atol>
	return 0;
}
   d4d22:	4770      	bx	lr

000d4d24 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4d24:	b510      	push	{r4, lr}
   d4d26:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4d28:	6800      	ldr	r0, [r0, #0]
   d4d2a:	b108      	cbz	r0, d4d30 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4d2c:	f7ff fcaa 	bl	d4684 <os_mutex_recursive_destroy>
    }
   d4d30:	4620      	mov	r0, r4
   d4d32:	bd10      	pop	{r4, pc}

000d4d34 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4d34:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d4d36:	4c06      	ldr	r4, [pc, #24]	; (d4d50 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4d38:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d4d3a:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d4d3c:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d4d3e:	f7ff fc99 	bl	d4674 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d4d42:	4620      	mov	r0, r4
   d4d44:	4a03      	ldr	r2, [pc, #12]	; (d4d54 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4d46:	4904      	ldr	r1, [pc, #16]	; (d4d58 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d4d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d4d4c:	f001 b996 	b.w	d607c <__aeabi_atexit>
   d4d50:	2003e75c 	.word	0x2003e75c
   d4d54:	2003e724 	.word	0x2003e724
   d4d58:	000d4d25 	.word	0x000d4d25

000d4d5c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4d5e:	4606      	mov	r6, r0
   d4d60:	460d      	mov	r5, r1
  size_t n = 0;
   d4d62:	188f      	adds	r7, r1, r2
   d4d64:	2400      	movs	r4, #0
  while (size--) {
   d4d66:	42bd      	cmp	r5, r7
   d4d68:	d00c      	beq.n	d4d84 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4d6a:	6833      	ldr	r3, [r6, #0]
   d4d6c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4d70:	689b      	ldr	r3, [r3, #8]
   d4d72:	4630      	mov	r0, r6
   d4d74:	4798      	blx	r3
     if (chunk>=0)
   d4d76:	1e03      	subs	r3, r0, #0
   d4d78:	db01      	blt.n	d4d7e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4d7a:	441c      	add	r4, r3
  while (size--) {
   d4d7c:	e7f3      	b.n	d4d66 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4d7e:	2c00      	cmp	r4, #0
   d4d80:	bf08      	it	eq
   d4d82:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d4d84:	4620      	mov	r0, r4
   d4d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4d88 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4d88:	b513      	push	{r0, r1, r4, lr}
   d4d8a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d4d8c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d4d8e:	b159      	cbz	r1, d4da8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d4d90:	9101      	str	r1, [sp, #4]
   d4d92:	f001 fa0e 	bl	d61b2 <strlen>
   d4d96:	6823      	ldr	r3, [r4, #0]
   d4d98:	9901      	ldr	r1, [sp, #4]
   d4d9a:	68db      	ldr	r3, [r3, #12]
   d4d9c:	4602      	mov	r2, r0
   d4d9e:	4620      	mov	r0, r4
    }
   d4da0:	b002      	add	sp, #8
   d4da2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d4da6:	4718      	bx	r3
    }
   d4da8:	b002      	add	sp, #8
   d4daa:	bd10      	pop	{r4, pc}

000d4dac <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4dac:	6803      	ldr	r3, [r0, #0]
   d4dae:	689b      	ldr	r3, [r3, #8]
   d4db0:	4718      	bx	r3

000d4db2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4db2:	b530      	push	{r4, r5, lr}
   d4db4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4db6:	2300      	movs	r3, #0
   d4db8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4dbc:	2a01      	cmp	r2, #1
   d4dbe:	bf98      	it	ls
   d4dc0:	220a      	movls	r2, #10
   d4dc2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d4dc4:	460d      	mov	r5, r1
   d4dc6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d4dca:	fb01 5312 	mls	r3, r1, r2, r5
   d4dce:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4dd2:	2b09      	cmp	r3, #9
   d4dd4:	bf94      	ite	ls
   d4dd6:	3330      	addls	r3, #48	; 0x30
   d4dd8:	3337      	addhi	r3, #55	; 0x37
   d4dda:	b2db      	uxtb	r3, r3
  } while(n);
   d4ddc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4dde:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d4de2:	d9ef      	bls.n	d4dc4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4de4:	4621      	mov	r1, r4
   d4de6:	f7ff ffcf 	bl	d4d88 <_ZN5Print5writeEPKc>
}
   d4dea:	b00b      	add	sp, #44	; 0x2c
   d4dec:	bd30      	pop	{r4, r5, pc}
	...

000d4df0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4df0:	4b01      	ldr	r3, [pc, #4]	; (d4df8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4df2:	4a02      	ldr	r2, [pc, #8]	; (d4dfc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4df4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d4df6:	4770      	bx	lr
   d4df8:	2003e760 	.word	0x2003e760
   d4dfc:	000d640c 	.word	0x000d640c

000d4e00 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4e00:	4b02      	ldr	r3, [pc, #8]	; (d4e0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4e02:	681a      	ldr	r2, [r3, #0]
   d4e04:	4b02      	ldr	r3, [pc, #8]	; (d4e10 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4e06:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d4e08:	4770      	bx	lr
   d4e0a:	bf00      	nop
   d4e0c:	2003e6bc 	.word	0x2003e6bc
   d4e10:	2003e764 	.word	0x2003e764

000d4e14 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d4e14:	428a      	cmp	r2, r1
{
   d4e16:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   d4e18:	d007      	beq.n	d4e2a <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d4e1a:	9c02      	ldr	r4, [sp, #8]
   d4e1c:	1a40      	subs	r0, r0, r1
   d4e1e:	1ae4      	subs	r4, r4, r3
   d4e20:	4360      	muls	r0, r4
   d4e22:	1a52      	subs	r2, r2, r1
   d4e24:	fb90 f0f2 	sdiv	r0, r0, r2
   d4e28:	4418      	add	r0, r3
}
   d4e2a:	bd10      	pop	{r4, pc}

000d4e2c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4e2c:	2100      	movs	r1, #0
   d4e2e:	f7ff bd21 	b.w	d4874 <system_delay_ms>

000d4e32 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d4e32:	b510      	push	{r4, lr}
      if (_M_manager)
   d4e34:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4e36:	4604      	mov	r4, r0
      if (_M_manager)
   d4e38:	b113      	cbz	r3, d4e40 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4e3a:	2203      	movs	r2, #3
   d4e3c:	4601      	mov	r1, r0
   d4e3e:	4798      	blx	r3
    }
   d4e40:	4620      	mov	r0, r4
   d4e42:	bd10      	pop	{r4, pc}

000d4e44 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4e44:	b510      	push	{r4, lr}
   d4e46:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   d4e48:	f7ff fff3 	bl	d4e32 <_ZNSt14_Function_baseD1Ev>
   d4e4c:	4620      	mov	r0, r4
   d4e4e:	bd10      	pop	{r4, pc}

000d4e50 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d4e50:	b513      	push	{r0, r1, r4, lr}
   d4e52:	460b      	mov	r3, r1
   d4e54:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e56:	e9d0 0100 	ldrd	r0, r1, [r0]
   d4e5a:	466c      	mov	r4, sp
   d4e5c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4e60:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4e64:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4e68:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4e6c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4e70:	b002      	add	sp, #8
   d4e72:	bd10      	pop	{r4, pc}

000d4e74 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d4e74:	4803      	ldr	r0, [pc, #12]	; (d4e84 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4e76:	4a04      	ldr	r2, [pc, #16]	; (d4e88 <_GLOBAL__sub_I_RGB+0x14>)
   d4e78:	4904      	ldr	r1, [pc, #16]	; (d4e8c <_GLOBAL__sub_I_RGB+0x18>)
   d4e7a:	2300      	movs	r3, #0
   d4e7c:	6083      	str	r3, [r0, #8]
   d4e7e:	f001 b8fd 	b.w	d607c <__aeabi_atexit>
   d4e82:	bf00      	nop
   d4e84:	2003e768 	.word	0x2003e768
   d4e88:	2003e724 	.word	0x2003e724
   d4e8c:	000d4e45 	.word	0x000d4e45

000d4e90 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d4e90:	4b01      	ldr	r3, [pc, #4]	; (d4e98 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d4e92:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d4e94:	4770      	bx	lr
   d4e96:	bf00      	nop
   d4e98:	2003e6c0 	.word	0x2003e6c0

000d4e9c <serialEventRun>:
{
   d4e9c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4e9e:	4b0b      	ldr	r3, [pc, #44]	; (d4ecc <serialEventRun+0x30>)
   d4ea0:	b143      	cbz	r3, d4eb4 <serialEventRun+0x18>
   d4ea2:	f000 fc29 	bl	d56f8 <_Z16_fetch_usbserialv>
   d4ea6:	6803      	ldr	r3, [r0, #0]
   d4ea8:	691b      	ldr	r3, [r3, #16]
   d4eaa:	4798      	blx	r3
   d4eac:	2800      	cmp	r0, #0
   d4eae:	dd01      	ble.n	d4eb4 <serialEventRun+0x18>
        serialEvent();
   d4eb0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d4eb4:	4b06      	ldr	r3, [pc, #24]	; (d4ed0 <serialEventRun+0x34>)
   d4eb6:	b143      	cbz	r3, d4eca <serialEventRun+0x2e>
   d4eb8:	f000 fc9c 	bl	d57f4 <_Z22__fetch_global_Serial1v>
   d4ebc:	6803      	ldr	r3, [r0, #0]
   d4ebe:	691b      	ldr	r3, [r3, #16]
   d4ec0:	4798      	blx	r3
   d4ec2:	2800      	cmp	r0, #0
   d4ec4:	dd01      	ble.n	d4eca <serialEventRun+0x2e>
        serialEvent1();
   d4ec6:	f3af 8000 	nop.w
}
   d4eca:	bd08      	pop	{r3, pc}
	...

000d4ed4 <_post_loop>:
{
   d4ed4:	b508      	push	{r3, lr}
	serialEventRun();
   d4ed6:	f7ff ffe1 	bl	d4e9c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4eda:	f7ff fbc3 	bl	d4664 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4ede:	4b01      	ldr	r3, [pc, #4]	; (d4ee4 <_post_loop+0x10>)
   d4ee0:	6018      	str	r0, [r3, #0]
}
   d4ee2:	bd08      	pop	{r3, pc}
   d4ee4:	2003e7d4 	.word	0x2003e7d4

000d4ee8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4ee8:	4802      	ldr	r0, [pc, #8]	; (d4ef4 <_Z33system_initialize_user_backup_ramv+0xc>)
   d4eea:	4a03      	ldr	r2, [pc, #12]	; (d4ef8 <_Z33system_initialize_user_backup_ramv+0x10>)
   d4eec:	4903      	ldr	r1, [pc, #12]	; (d4efc <_Z33system_initialize_user_backup_ramv+0x14>)
   d4eee:	1a12      	subs	r2, r2, r0
   d4ef0:	f001 b8e4 	b.w	d60bc <memcpy>
   d4ef4:	2003f400 	.word	0x2003f400
   d4ef8:	2003f404 	.word	0x2003f404
   d4efc:	000d6690 	.word	0x000d6690

000d4f00 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4f00:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4f02:	2300      	movs	r3, #0
   d4f04:	9300      	str	r3, [sp, #0]
   d4f06:	461a      	mov	r2, r3
   d4f08:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4f0c:	f7ff fcd4 	bl	d48b8 <system_ctrl_set_result>
}
   d4f10:	b003      	add	sp, #12
   d4f12:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4f18 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d4f18:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4f1a:	8843      	ldrh	r3, [r0, #2]
   d4f1c:	2b0a      	cmp	r3, #10
   d4f1e:	d008      	beq.n	d4f32 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4f20:	2b50      	cmp	r3, #80	; 0x50
   d4f22:	d10b      	bne.n	d4f3c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d4f24:	4b09      	ldr	r3, [pc, #36]	; (d4f4c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4f26:	681b      	ldr	r3, [r3, #0]
   d4f28:	b14b      	cbz	r3, d4f3e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d4f2a:	b003      	add	sp, #12
   d4f2c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d4f30:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d4f32:	f7ff ffe5 	bl	d4f00 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d4f36:	b003      	add	sp, #12
   d4f38:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4f3c:	2300      	movs	r3, #0
   d4f3e:	9300      	str	r3, [sp, #0]
   d4f40:	461a      	mov	r2, r3
   d4f42:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4f46:	f7ff fcb7 	bl	d48b8 <system_ctrl_set_result>
}
   d4f4a:	e7f4      	b.n	d4f36 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d4f4c:	2003e77c 	.word	0x2003e77c

000d4f50 <module_user_init_hook>:
{
   d4f50:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4f52:	4c12      	ldr	r4, [pc, #72]	; (d4f9c <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4f54:	4812      	ldr	r0, [pc, #72]	; (d4fa0 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4f56:	4d13      	ldr	r5, [pc, #76]	; (d4fa4 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4f58:	2100      	movs	r1, #0
   d4f5a:	f7ff fd57 	bl	d4a0c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4f5e:	6823      	ldr	r3, [r4, #0]
   d4f60:	42ab      	cmp	r3, r5
   d4f62:	4b11      	ldr	r3, [pc, #68]	; (d4fa8 <module_user_init_hook+0x58>)
   d4f64:	bf0c      	ite	eq
   d4f66:	2201      	moveq	r2, #1
   d4f68:	2200      	movne	r2, #0
   d4f6a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4f6c:	d002      	beq.n	d4f74 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d4f6e:	f7ff ffbb 	bl	d4ee8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4f72:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4f74:	f7ff fb6e 	bl	d4654 <HAL_RNG_GetRandomNumber>
   d4f78:	4604      	mov	r4, r0
    srand(seed);
   d4f7a:	f001 f8cf 	bl	d611c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4f7e:	4b0b      	ldr	r3, [pc, #44]	; (d4fac <module_user_init_hook+0x5c>)
   d4f80:	b113      	cbz	r3, d4f88 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d4f82:	4620      	mov	r0, r4
   d4f84:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4f88:	2100      	movs	r1, #0
   d4f8a:	4808      	ldr	r0, [pc, #32]	; (d4fac <module_user_init_hook+0x5c>)
   d4f8c:	f7ff fd0e 	bl	d49ac <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d4f90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4f94:	4806      	ldr	r0, [pc, #24]	; (d4fb0 <module_user_init_hook+0x60>)
   d4f96:	2100      	movs	r1, #0
   d4f98:	f7ff bc84 	b.w	d48a4 <system_ctrl_set_app_request_handler>
   d4f9c:	2003f400 	.word	0x2003f400
   d4fa0:	000d4e91 	.word	0x000d4e91
   d4fa4:	9a271c1e 	.word	0x9a271c1e
   d4fa8:	2003e778 	.word	0x2003e778
   d4fac:	00000000 	.word	0x00000000
   d4fb0:	000d4f19 	.word	0x000d4f19

000d4fb4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4fb4:	4770      	bx	lr

000d4fb6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d4fb6:	2000      	movs	r0, #0
   d4fb8:	4770      	bx	lr

000d4fba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4fba:	b510      	push	{r4, lr}
   d4fbc:	2110      	movs	r1, #16
   d4fbe:	4604      	mov	r4, r0
   d4fc0:	f001 f861 	bl	d6086 <_ZdlPvj>
   d4fc4:	4620      	mov	r0, r4
   d4fc6:	bd10      	pop	{r4, pc}

000d4fc8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d4fc8:	b508      	push	{r3, lr}
      { delete this; }
   d4fca:	f7ff fff6 	bl	d4fba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4fce:	bd08      	pop	{r3, pc}

000d4fd0 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4fd0:	b530      	push	{r4, r5, lr}
        type_(type) {
   d4fd2:	2200      	movs	r2, #0
   d4fd4:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d4fd8:	6002      	str	r2, [r0, #0]
   d4fda:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d4fdc:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4fde:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d4fe0:	680c      	ldr	r4, [r1, #0]
   d4fe2:	8085      	strh	r5, [r0, #4]
   d4fe4:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4fe6:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d4fe8:	bd30      	pop	{r4, r5, pc}

000d4fea <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4fea:	b510      	push	{r4, lr}
   d4fec:	4604      	mov	r4, r0
    free((void*)msg_);
   d4fee:	6800      	ldr	r0, [r0, #0]
   d4ff0:	f7ff fcec 	bl	d49cc <free>
}
   d4ff4:	4620      	mov	r0, r4
   d4ff6:	bd10      	pop	{r4, pc}

000d4ff8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d4ff8:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4ffa:	68c4      	ldr	r4, [r0, #12]
   d4ffc:	b1f4      	cbz	r4, d503c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d4ffe:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5000:	2b02      	cmp	r3, #2
   d5002:	d103      	bne.n	d500c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5004:	f104 000c 	add.w	r0, r4, #12
   d5008:	f7ff ffef 	bl	d4fea <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d500c:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d500e:	b135      	cbz	r5, d501e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d5010:	4628      	mov	r0, r5
   d5012:	f7ff ff0e 	bl	d4e32 <_ZNSt14_Function_baseD1Ev>
   d5016:	2110      	movs	r1, #16
   d5018:	4628      	mov	r0, r5
   d501a:	f001 f834 	bl	d6086 <_ZdlPvj>
   d501e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5020:	b135      	cbz	r5, d5030 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5022:	4628      	mov	r0, r5
   d5024:	f7ff ff05 	bl	d4e32 <_ZNSt14_Function_baseD1Ev>
   d5028:	2110      	movs	r1, #16
   d502a:	4628      	mov	r0, r5
   d502c:	f001 f82b 	bl	d6086 <_ZdlPvj>
   d5030:	4620      	mov	r0, r4
   d5032:	2114      	movs	r1, #20
   d5034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5038:	f001 b825 	b.w	d6086 <_ZdlPvj>
   d503c:	bd38      	pop	{r3, r4, r5, pc}

000d503e <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d503e:	b510      	push	{r4, lr}
   d5040:	b088      	sub	sp, #32
   d5042:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d5044:	4668      	mov	r0, sp
   d5046:	f7ff fe28 	bl	d4c9a <_ZN6StringC1EPKc>
    return (*fn)(p);
   d504a:	4669      	mov	r1, sp
   d504c:	a804      	add	r0, sp, #16
   d504e:	f7ff fe47 	bl	d4ce0 <_ZN6StringC1ERKS_>
   d5052:	a804      	add	r0, sp, #16
   d5054:	47a0      	blx	r4
   d5056:	4604      	mov	r4, r0
   d5058:	a804      	add	r0, sp, #16
   d505a:	f7ff fdd3 	bl	d4c04 <_ZN6StringD1Ev>
    String p(param);
   d505e:	4668      	mov	r0, sp
   d5060:	f7ff fdd0 	bl	d4c04 <_ZN6StringD1Ev>
}
   d5064:	4620      	mov	r0, r4
   d5066:	b008      	add	sp, #32
   d5068:	bd10      	pop	{r4, pc}

000d506a <_ZN10CloudClass22call_std_user_functionEPvPKcS0_>:

int CloudClass::call_std_user_function(void* data, const char* param, void* reserved)
{
   d506a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d506c:	4604      	mov	r4, r0
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
   d506e:	4668      	mov	r0, sp
   d5070:	f7ff fe13 	bl	d4c9a <_ZN6StringC1EPKc>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5074:	68a3      	ldr	r3, [r4, #8]
   d5076:	b90b      	cbnz	r3, d507c <_ZN10CloudClass22call_std_user_functionEPvPKcS0_+0x12>
	__throw_bad_function_call();
   d5078:	f001 f80b 	bl	d6092 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d507c:	68e3      	ldr	r3, [r4, #12]
   d507e:	4669      	mov	r1, sp
   d5080:	4620      	mov	r0, r4
   d5082:	4798      	blx	r3
   d5084:	4604      	mov	r4, r0
   d5086:	4668      	mov	r0, sp
   d5088:	f7ff fdbc 	bl	d4c04 <_ZN6StringD1Ev>
}
   d508c:	4620      	mov	r0, r4
   d508e:	b004      	add	sp, #16
   d5090:	bd10      	pop	{r4, pc}

000d5092 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d5092:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d5094:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d5096:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d509a:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d509c:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d509e:	461a      	mov	r2, r3
   d50a0:	4669      	mov	r1, sp
   d50a2:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d50a4:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d50a8:	f8ad 4000 	strh.w	r4, [sp]
   d50ac:	f7ff fc66 	bl	d497c <spark_function>
}
   d50b0:	b004      	add	sp, #16
   d50b2:	bd10      	pop	{r4, pc}

000d50b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d50b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d50b6:	460e      	mov	r6, r1
   d50b8:	4604      	mov	r4, r0
   d50ba:	f856 3b04 	ldr.w	r3, [r6], #4
   d50be:	9300      	str	r3, [sp, #0]
   d50c0:	460d      	mov	r5, r1
   d50c2:	a801      	add	r0, sp, #4
   d50c4:	4631      	mov	r1, r6
   d50c6:	f7ff f935 	bl	d4334 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d50ca:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d50cc:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d50ce:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d50d0:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d50d2:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d50d4:	2300      	movs	r3, #0
   d50d6:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d50d8:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d50da:	f7ff f8cb 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d50de:	4630      	mov	r0, r6
   d50e0:	f7ff f8c8 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d50e4:	4628      	mov	r0, r5
   d50e6:	2108      	movs	r1, #8
   d50e8:	f000 ffcd 	bl	d6086 <_ZdlPvj>
        return p;
    }
   d50ec:	4620      	mov	r0, r4
   d50ee:	b002      	add	sp, #8
   d50f0:	bd70      	pop	{r4, r5, r6, pc}

000d50f2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d50f2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d50f4:	b510      	push	{r4, lr}
      if (_M_empty())
   d50f6:	b90a      	cbnz	r2, d50fc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d50f8:	f000 ffcb 	bl	d6092 <_ZSt25__throw_bad_function_callv>
    }
   d50fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5100:	68c3      	ldr	r3, [r0, #12]
   d5102:	4718      	bx	r3

000d5104 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5104:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d5106:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d5108:	f100 0110 	add.w	r1, r0, #16
   d510c:	f7ff fff1 	bl	d50f2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d5110:	bd08      	pop	{r3, pc}

000d5112 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d5112:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d5114:	b510      	push	{r4, lr}
      if (_M_empty())
   d5116:	b90a      	cbnz	r2, d511c <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d5118:	f000 ffbb 	bl	d6092 <_ZSt25__throw_bad_function_callv>
    }
   d511c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5120:	68c3      	ldr	r3, [r0, #12]
   d5122:	4718      	bx	r3

000d5124 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5124:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d5126:	6800      	ldr	r0, [r0, #0]
   d5128:	f100 0110 	add.w	r1, r0, #16
   d512c:	f7ff fff1 	bl	d5112 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d5130:	bd08      	pop	{r3, pc}
	...

000d5134 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d5134:	b538      	push	{r3, r4, r5, lr}
   d5136:	2300      	movs	r3, #0
   d5138:	4604      	mov	r4, r0
   d513a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d513c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d513e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5140:	f7fe ffa7 	bl	d4092 <_Znwj>
   d5144:	b128      	cbz	r0, d5152 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d5146:	2301      	movs	r3, #1
   d5148:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d514c:	4b02      	ldr	r3, [pc, #8]	; (d5158 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d514e:	6003      	str	r3, [r0, #0]
   d5150:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5152:	6020      	str	r0, [r4, #0]
	}
   d5154:	4620      	mov	r0, r4
   d5156:	bd38      	pop	{r3, r4, r5, pc}
   d5158:	000d6434 	.word	0x000d6434

000d515c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d515c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d515e:	2300      	movs	r3, #0
   d5160:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d5162:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d5164:	4604      	mov	r4, r0
   d5166:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5168:	b12b      	cbz	r3, d5176 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d516a:	2202      	movs	r2, #2
   d516c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d516e:	68eb      	ldr	r3, [r5, #12]
   d5170:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5172:	68ab      	ldr	r3, [r5, #8]
   d5174:	60a3      	str	r3, [r4, #8]
    }
   d5176:	4620      	mov	r0, r4
   d5178:	bd38      	pop	{r3, r4, r5, pc}
	...

000d517c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d517c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d517e:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5180:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d5182:	4668      	mov	r0, sp
   d5184:	f7ff ff24 	bl	d4fd0 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d5188:	f04f 0302 	mov.w	r3, #2
   d518c:	e8d4 2f4f 	ldrexb	r2, [r4]
   d5190:	2a00      	cmp	r2, #0
   d5192:	d103      	bne.n	d519c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d5194:	e8c4 3f41 	strexb	r1, r3, [r4]
   d5198:	2900      	cmp	r1, #0
   d519a:	d1f7      	bne.n	d518c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d519c:	d125      	bne.n	d51ea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d519e:	f104 050c 	add.w	r5, r4, #12
   d51a2:	4669      	mov	r1, sp
   d51a4:	4628      	mov	r0, r5
   d51a6:	f7ff ff13 	bl	d4fd0 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d51aa:	f3bf 8f5b 	dmb	ish
   d51ae:	2301      	movs	r3, #1
   d51b0:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d51b2:	2000      	movs	r0, #0
   d51b4:	f104 0308 	add.w	r3, r4, #8
   d51b8:	f3bf 8f5b 	dmb	ish
   d51bc:	e853 6f00 	ldrex	r6, [r3]
   d51c0:	e843 0200 	strex	r2, r0, [r3]
   d51c4:	2a00      	cmp	r2, #0
   d51c6:	d1f9      	bne.n	d51bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d51c8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d51cc:	b16e      	cbz	r6, d51ea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d51ce:	f7ff fb59 	bl	d4884 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d51d2:	b178      	cbz	r0, d51f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d51d4:	4629      	mov	r1, r5
   d51d6:	4630      	mov	r0, r6
   d51d8:	f7ff ff8b 	bl	d50f2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d51dc:	4630      	mov	r0, r6
   d51de:	f7ff fe28 	bl	d4e32 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d51e2:	2110      	movs	r1, #16
   d51e4:	4630      	mov	r0, r6
   d51e6:	f000 ff4e 	bl	d6086 <_ZdlPvj>
        p_->setError(std::move(error));
   d51ea:	4668      	mov	r0, sp
   d51ec:	f7ff fefd 	bl	d4fea <_ZN8particle5ErrorD1Ev>
    }
   d51f0:	b009      	add	sp, #36	; 0x24
   d51f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d51f4:	4631      	mov	r1, r6
   d51f6:	a802      	add	r0, sp, #8
   d51f8:	f7ff ffb0 	bl	d515c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d51fc:	68e0      	ldr	r0, [r4, #12]
   d51fe:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5202:	b108      	cbz	r0, d5208 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d5204:	f000 ffb8 	bl	d6178 <strdup>
        type_(type) {
   d5208:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d520a:	2010      	movs	r0, #16
   d520c:	f8ad 501c 	strh.w	r5, [sp, #28]
   d5210:	f7fe ff3f 	bl	d4092 <_Znwj>
   d5214:	4605      	mov	r5, r0
   d5216:	b1e8      	cbz	r0, d5254 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d5218:	2700      	movs	r7, #0
   d521a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d521c:	2018      	movs	r0, #24
   d521e:	f7fe ff38 	bl	d4092 <_Znwj>
   d5222:	4604      	mov	r4, r0
   d5224:	b188      	cbz	r0, d524a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d5226:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d5228:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d522a:	a802      	add	r0, sp, #8
   d522c:	f7ff fe10 	bl	d4e50 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5230:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5232:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5234:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5236:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5238:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d523a:	a906      	add	r1, sp, #24
   d523c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d523e:	60e3      	str	r3, [r4, #12]
   d5240:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d5244:	9205      	str	r2, [sp, #20]
   d5246:	f7ff fec3 	bl	d4fd0 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d524a:	4b08      	ldr	r3, [pc, #32]	; (d526c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d524c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d524e:	4b08      	ldr	r3, [pc, #32]	; (d5270 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5250:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d5252:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d5254:	a806      	add	r0, sp, #24
   d5256:	f7ff fec8 	bl	d4fea <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d525a:	a802      	add	r0, sp, #8
   d525c:	f7ff fde9 	bl	d4e32 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5260:	2200      	movs	r2, #0
   d5262:	4629      	mov	r1, r5
   d5264:	4803      	ldr	r0, [pc, #12]	; (d5274 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d5266:	f7ff fb15 	bl	d4894 <application_thread_invoke>
   d526a:	e7b7      	b.n	d51dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d526c:	000d5105 	.word	0x000d5105
   d5270:	000d539d 	.word	0x000d539d
   d5274:	000d587d 	.word	0x000d587d

000d5278 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d527c:	b08a      	sub	sp, #40	; 0x28
   d527e:	4605      	mov	r5, r0
   d5280:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d5284:	460c      	mov	r4, r1
   d5286:	4617      	mov	r7, r2
   d5288:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d528a:	f7ff fb7f 	bl	d498c <spark_cloud_flag_connected>
   d528e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d5290:	4682      	mov	sl, r0
   d5292:	bb38      	cbnz	r0, d52e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d5294:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5298:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d529a:	a905      	add	r1, sp, #20
   d529c:	4630      	mov	r0, r6
   d529e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d52a2:	f7ff fe95 	bl	d4fd0 <_ZN8particle5ErrorC1EOS0_>
   d52a6:	2014      	movs	r0, #20
   d52a8:	f7fe fef3 	bl	d4092 <_Znwj>
   d52ac:	4604      	mov	r4, r0
   d52ae:	b148      	cbz	r0, d52c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d52b0:	2302      	movs	r3, #2
   d52b2:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d52b4:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d52b6:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d52ba:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d52bc:	4631      	mov	r1, r6
   d52be:	300c      	adds	r0, #12
   d52c0:	f7ff fe86 	bl	d4fd0 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d52c4:	4628      	mov	r0, r5
	: __shared_count(__p)
   d52c6:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d52c8:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d52cc:	f7ff ff32 	bl	d5134 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d52d0:	4630      	mov	r0, r6
   d52d2:	f7ff fe8a 	bl	d4fea <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d52d6:	a805      	add	r0, sp, #20
   d52d8:	f7ff fe87 	bl	d4fea <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d52dc:	4628      	mov	r0, r5
   d52de:	b00a      	add	sp, #40	; 0x28
   d52e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d52e4:	230c      	movs	r3, #12
   d52e6:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d52ea:	2014      	movs	r0, #20
   d52ec:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d52f0:	9307      	str	r3, [sp, #28]
   d52f2:	f7fe fece 	bl	d4092 <_Znwj>
   d52f6:	4601      	mov	r1, r0
   d52f8:	b128      	cbz	r0, d5306 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d52fa:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d52fe:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5302:	f880 a001 	strb.w	sl, [r0, #1]
   d5306:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5308:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d530a:	f7ff ff13 	bl	d5134 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d530e:	4b22      	ldr	r3, [pc, #136]	; (d5398 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d5310:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d5312:	2008      	movs	r0, #8
   d5314:	f7fe febd 	bl	d4092 <_Znwj>
   d5318:	4682      	mov	sl, r0
   d531a:	b128      	cbz	r0, d5328 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d531c:	9b03      	ldr	r3, [sp, #12]
   d531e:	f840 3b04 	str.w	r3, [r0], #4
   d5322:	a904      	add	r1, sp, #16
   d5324:	f7ff f806 	bl	d4334 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5328:	9600      	str	r6, [sp, #0]
   d532a:	fa5f f389 	uxtb.w	r3, r9
   d532e:	4642      	mov	r2, r8
   d5330:	4639      	mov	r1, r7
   d5332:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d5334:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5338:	f7ff fb30 	bl	d499c <spark_send_event>
   d533c:	b9b8      	cbnz	r0, d536e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d533e:	9b03      	ldr	r3, [sp, #12]
   d5340:	785b      	ldrb	r3, [r3, #1]
   d5342:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5346:	b993      	cbnz	r3, d536e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d5348:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d534c:	a905      	add	r1, sp, #20
   d534e:	a803      	add	r0, sp, #12
   d5350:	9205      	str	r2, [sp, #20]
   d5352:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5356:	f7ff ff11 	bl	d517c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d535a:	a805      	add	r0, sp, #20
   d535c:	f7ff fe45 	bl	d4fea <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5360:	a805      	add	r0, sp, #20
   d5362:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5364:	f7ff fea6 	bl	d50b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d5368:	a806      	add	r0, sp, #24
   d536a:	f7fe ff83 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d536e:	9b03      	ldr	r3, [sp, #12]
   d5370:	9305      	str	r3, [sp, #20]
   d5372:	a904      	add	r1, sp, #16
   d5374:	a806      	add	r0, sp, #24
   d5376:	f7fe ffdd 	bl	d4334 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d537a:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d537c:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d537e:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d5380:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d5382:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d5384:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d5386:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d5388:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d538a:	f7fe ff73 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d538e:	a804      	add	r0, sp, #16
   d5390:	f7fe ff70 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d5394:	e7a2      	b.n	d52dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d5396:	bf00      	nop
   d5398:	000d5461 	.word	0x000d5461

000d539c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d539c:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d539e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d53a0:	4605      	mov	r5, r0
	  switch (__op)
   d53a2:	d007      	beq.n	d53b4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d53a4:	2a03      	cmp	r2, #3
   d53a6:	d018      	beq.n	d53da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d53a8:	2a01      	cmp	r2, #1
   d53aa:	d101      	bne.n	d53b0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d53ac:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d53ae:	6003      	str	r3, [r0, #0]
	}
   d53b0:	2000      	movs	r0, #0
   d53b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d53b4:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d53b6:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d53b8:	f7fe fe6b 	bl	d4092 <_Znwj>
   d53bc:	4604      	mov	r4, r0
   d53be:	b150      	cbz	r0, d53d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d53c0:	4631      	mov	r1, r6
   d53c2:	f7ff fecb 	bl	d515c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d53c6:	6930      	ldr	r0, [r6, #16]
   d53c8:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d53cc:	b108      	cbz	r0, d53d2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d53ce:	f000 fed3 	bl	d6178 <strdup>
        type_(type) {
   d53d2:	6120      	str	r0, [r4, #16]
   d53d4:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d53d6:	602c      	str	r4, [r5, #0]
	}
   d53d8:	e7ea      	b.n	d53b0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d53da:	6804      	ldr	r4, [r0, #0]
   d53dc:	2c00      	cmp	r4, #0
   d53de:	d0e7      	beq.n	d53b0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d53e0:	f104 0010 	add.w	r0, r4, #16
   d53e4:	f7ff fe01 	bl	d4fea <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d53e8:	4620      	mov	r0, r4
   d53ea:	f7ff fd22 	bl	d4e32 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d53ee:	2118      	movs	r1, #24
   d53f0:	4620      	mov	r0, r4
   d53f2:	f000 fe48 	bl	d6086 <_ZdlPvj>
   d53f6:	e7db      	b.n	d53b0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d53f8 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d53f8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d53fa:	2300      	movs	r3, #0
   d53fc:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d53fe:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d5400:	4604      	mov	r4, r0
   d5402:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5404:	b12b      	cbz	r3, d5412 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5406:	2202      	movs	r2, #2
   d5408:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d540a:	68eb      	ldr	r3, [r5, #12]
   d540c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d540e:	68ab      	ldr	r3, [r5, #8]
   d5410:	60a3      	str	r3, [r4, #8]
    }
   d5412:	4620      	mov	r0, r4
   d5414:	bd38      	pop	{r3, r4, r5, pc}

000d5416 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d5416:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5418:	b570      	push	{r4, r5, r6, lr}
   d541a:	4604      	mov	r4, r0
	  switch (__op)
   d541c:	d007      	beq.n	d542e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d541e:	2a03      	cmp	r2, #3
   d5420:	d012      	beq.n	d5448 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d5422:	2a01      	cmp	r2, #1
   d5424:	d101      	bne.n	d542a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d5426:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5428:	6003      	str	r3, [r0, #0]
	}
   d542a:	2000      	movs	r0, #0
   d542c:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d542e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d5430:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d5432:	f7fe fe2e 	bl	d4092 <_Znwj>
   d5436:	4605      	mov	r5, r0
   d5438:	b120      	cbz	r0, d5444 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d543a:	4631      	mov	r1, r6
   d543c:	f7ff ffdc 	bl	d53f8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5440:	7c33      	ldrb	r3, [r6, #16]
   d5442:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d5444:	6025      	str	r5, [r4, #0]
	}
   d5446:	e7f0      	b.n	d542a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d5448:	6804      	ldr	r4, [r0, #0]
   d544a:	2c00      	cmp	r4, #0
   d544c:	d0ed      	beq.n	d542a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d544e:	4620      	mov	r0, r4
   d5450:	f7ff fcef 	bl	d4e32 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d5454:	2114      	movs	r1, #20
   d5456:	4620      	mov	r0, r4
   d5458:	f000 fe15 	bl	d6086 <_ZdlPvj>
   d545c:	e7e5      	b.n	d542a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d5460 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5460:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5462:	b089      	sub	sp, #36	; 0x24
   d5464:	4604      	mov	r4, r0
   d5466:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5468:	a801      	add	r0, sp, #4
   d546a:	4611      	mov	r1, r2
   d546c:	f7ff fe22 	bl	d50b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5470:	b1a4      	cbz	r4, d549c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5472:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5474:	b11d      	cbz	r5, d547e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d5476:	4628      	mov	r0, r5
   d5478:	f000 fe7e 	bl	d6178 <strdup>
   d547c:	4605      	mov	r5, r0
   d547e:	a801      	add	r0, sp, #4
   d5480:	a903      	add	r1, sp, #12
        type_(type) {
   d5482:	9503      	str	r5, [sp, #12]
   d5484:	f8ad 4010 	strh.w	r4, [sp, #16]
   d5488:	f7ff fe78 	bl	d517c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d548c:	a803      	add	r0, sp, #12
   d548e:	f7ff fdac 	bl	d4fea <_ZN8particle5ErrorD1Ev>
   d5492:	a802      	add	r0, sp, #8
   d5494:	f7fe feee 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5498:	b009      	add	sp, #36	; 0x24
   d549a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d549c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d549e:	2301      	movs	r3, #1
   d54a0:	e8d5 2f4f 	ldrexb	r2, [r5]
   d54a4:	2a00      	cmp	r2, #0
   d54a6:	d103      	bne.n	d54b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d54a8:	e8c5 3f41 	strexb	r1, r3, [r5]
   d54ac:	2900      	cmp	r1, #0
   d54ae:	d1f7      	bne.n	d54a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d54b0:	d1ef      	bne.n	d5492 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d54b2:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d54b4:	f3bf 8f5b 	dmb	ish
   d54b8:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d54ba:	1d2b      	adds	r3, r5, #4
   d54bc:	f3bf 8f5b 	dmb	ish
   d54c0:	e853 6f00 	ldrex	r6, [r3]
   d54c4:	e843 4200 	strex	r2, r4, [r3]
   d54c8:	2a00      	cmp	r2, #0
   d54ca:	d1f9      	bne.n	d54c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d54cc:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d54d0:	2e00      	cmp	r6, #0
   d54d2:	d0de      	beq.n	d5492 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d54d4:	4620      	mov	r0, r4
   d54d6:	f7ff f9d5 	bl	d4884 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d54da:	4607      	mov	r7, r0
   d54dc:	b160      	cbz	r0, d54f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d54de:	f105 010c 	add.w	r1, r5, #12
   d54e2:	4630      	mov	r0, r6
   d54e4:	f7ff fe15 	bl	d5112 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d54e8:	4630      	mov	r0, r6
   d54ea:	f7ff fca2 	bl	d4e32 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d54ee:	2110      	movs	r1, #16
   d54f0:	4630      	mov	r0, r6
   d54f2:	f000 fdc8 	bl	d6086 <_ZdlPvj>
   d54f6:	e7cc      	b.n	d5492 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d54f8:	4631      	mov	r1, r6
   d54fa:	a803      	add	r0, sp, #12
   d54fc:	f7ff ff7c 	bl	d53f8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5500:	7b2b      	ldrb	r3, [r5, #12]
   d5502:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5506:	2010      	movs	r0, #16
   d5508:	f7fe fdc3 	bl	d4092 <_Znwj>
   d550c:	4605      	mov	r5, r0
   d550e:	b1d0      	cbz	r0, d5546 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d5510:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5512:	2014      	movs	r0, #20
   d5514:	f7fe fdbd 	bl	d4092 <_Znwj>
   d5518:	4604      	mov	r4, r0
   d551a:	b178      	cbz	r0, d553c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d551c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d551e:	4601      	mov	r1, r0
   d5520:	a803      	add	r0, sp, #12
   d5522:	f7ff fc95 	bl	d4e50 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5526:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5528:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d552a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d552c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d552e:	9205      	str	r2, [sp, #20]
   d5530:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5532:	60e3      	str	r3, [r4, #12]
   d5534:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d5538:	9206      	str	r2, [sp, #24]
   d553a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d553c:	4b06      	ldr	r3, [pc, #24]	; (d5558 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d553e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5540:	4b06      	ldr	r3, [pc, #24]	; (d555c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5542:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d5544:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d5546:	a803      	add	r0, sp, #12
   d5548:	f7ff fc73 	bl	d4e32 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d554c:	2200      	movs	r2, #0
   d554e:	4629      	mov	r1, r5
   d5550:	4803      	ldr	r0, [pc, #12]	; (d5560 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d5552:	f7ff f99f 	bl	d4894 <application_thread_invoke>
   d5556:	e7c7      	b.n	d54e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d5558:	000d5125 	.word	0x000d5125
   d555c:	000d5417 	.word	0x000d5417
   d5560:	000d587d 	.word	0x000d587d

000d5564 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5564:	4770      	bx	lr

000d5566 <_ZN9IPAddressD0Ev>:
   d5566:	b510      	push	{r4, lr}
   d5568:	2118      	movs	r1, #24
   d556a:	4604      	mov	r4, r0
   d556c:	f000 fd8b 	bl	d6086 <_ZdlPvj>
   d5570:	4620      	mov	r0, r4
   d5572:	bd10      	pop	{r4, pc}

000d5574 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5574:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5576:	7d03      	ldrb	r3, [r0, #20]
   d5578:	2b06      	cmp	r3, #6
{
   d557a:	b08d      	sub	sp, #52	; 0x34
   d557c:	460e      	mov	r6, r1
   d557e:	f100 0704 	add.w	r7, r0, #4
   d5582:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5586:	d012      	beq.n	d55ae <_ZNK9IPAddress7printToER5Print+0x3a>
   d5588:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d558c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5590:	220a      	movs	r2, #10
   d5592:	4630      	mov	r0, r6
   d5594:	f7ff fc0d 	bl	d4db2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5598:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d559a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d559c:	d019      	beq.n	d55d2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d559e:	2c00      	cmp	r4, #0
   d55a0:	d0f4      	beq.n	d558c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d55a2:	212e      	movs	r1, #46	; 0x2e
   d55a4:	4630      	mov	r0, r6
   d55a6:	f7ff fc01 	bl	d4dac <_ZN5Print5printEc>
   d55aa:	4404      	add	r4, r0
   d55ac:	e7ee      	b.n	d558c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d55ae:	232f      	movs	r3, #47	; 0x2f
   d55b0:	466a      	mov	r2, sp
   d55b2:	4639      	mov	r1, r7
   d55b4:	200a      	movs	r0, #10
		buf[0] = 0;
   d55b6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d55ba:	f7ff f86b 	bl	d4694 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d55be:	4668      	mov	r0, sp
   d55c0:	f000 fdf7 	bl	d61b2 <strlen>
   d55c4:	6833      	ldr	r3, [r6, #0]
   d55c6:	4602      	mov	r2, r0
   d55c8:	68db      	ldr	r3, [r3, #12]
   d55ca:	4669      	mov	r1, sp
   d55cc:	4630      	mov	r0, r6
   d55ce:	4798      	blx	r3
   d55d0:	4604      	mov	r4, r0
    }
    return n;
}
   d55d2:	4620      	mov	r0, r4
   d55d4:	b00d      	add	sp, #52	; 0x34
   d55d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d55d8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d55d8:	b510      	push	{r4, lr}
   d55da:	4b05      	ldr	r3, [pc, #20]	; (d55f0 <_ZN9IPAddressC1Ev+0x18>)
   d55dc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d55de:	2211      	movs	r2, #17
   d55e0:	f840 3b04 	str.w	r3, [r0], #4
   d55e4:	2100      	movs	r1, #0
   d55e6:	f000 fd91 	bl	d610c <memset>
}
   d55ea:	4620      	mov	r0, r4
   d55ec:	bd10      	pop	{r4, pc}
   d55ee:	bf00      	nop
   d55f0:	000d6450 	.word	0x000d6450

000d55f4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d55f4:	4603      	mov	r3, r0
   d55f6:	4a07      	ldr	r2, [pc, #28]	; (d5614 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d55f8:	b510      	push	{r4, lr}
   d55fa:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d55fe:	f101 0210 	add.w	r2, r1, #16
   d5602:	f851 4b04 	ldr.w	r4, [r1], #4
   d5606:	f843 4b04 	str.w	r4, [r3], #4
   d560a:	4291      	cmp	r1, r2
   d560c:	d1f9      	bne.n	d5602 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d560e:	780a      	ldrb	r2, [r1, #0]
   d5610:	701a      	strb	r2, [r3, #0]
}
   d5612:	bd10      	pop	{r4, pc}
   d5614:	000d6450 	.word	0x000d6450

000d5618 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5618:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d561a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d561e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5622:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5626:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d562a:	2304      	movs	r3, #4
   d562c:	6041      	str	r1, [r0, #4]
   d562e:	7503      	strb	r3, [r0, #20]
}
   d5630:	bd10      	pop	{r4, pc}

000d5632 <_ZN9IPAddressaSEPKh>:
{
   d5632:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5634:	78cb      	ldrb	r3, [r1, #3]
   d5636:	9300      	str	r3, [sp, #0]
   d5638:	788b      	ldrb	r3, [r1, #2]
   d563a:	784a      	ldrb	r2, [r1, #1]
   d563c:	7809      	ldrb	r1, [r1, #0]
   d563e:	f7ff ffeb 	bl	d5618 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5642:	b002      	add	sp, #8
   d5644:	bd10      	pop	{r4, pc}

000d5646 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5646:	7441      	strb	r1, [r0, #17]
}
   d5648:	4770      	bx	lr

000d564a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d564a:	4770      	bx	lr

000d564c <_ZN9USBSerial4readEv>:
{
   d564c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d564e:	2100      	movs	r1, #0
   d5650:	7c00      	ldrb	r0, [r0, #16]
   d5652:	f7ff f8df 	bl	d4814 <HAL_USB_USART_Receive_Data>
}
   d5656:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d565a:	bd08      	pop	{r3, pc}

000d565c <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d565c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d565e:	2101      	movs	r1, #1
   d5660:	7c00      	ldrb	r0, [r0, #16]
   d5662:	f7ff f8d7 	bl	d4814 <HAL_USB_USART_Receive_Data>
}
   d5666:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d566a:	bd08      	pop	{r3, pc}

000d566c <_ZN9USBSerial17availableForWriteEv>:
{
   d566c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d566e:	7c00      	ldrb	r0, [r0, #16]
   d5670:	f7ff f8c8 	bl	d4804 <HAL_USB_USART_Available_Data_For_Write>
}
   d5674:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5678:	bd08      	pop	{r3, pc}

000d567a <_ZN9USBSerial9availableEv>:
{
   d567a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d567c:	7c00      	ldrb	r0, [r0, #16]
   d567e:	f7ff f8b9 	bl	d47f4 <HAL_USB_USART_Available_Data>
}
   d5682:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5686:	bd08      	pop	{r3, pc}

000d5688 <_ZN9USBSerial5writeEh>:
{
   d5688:	b513      	push	{r0, r1, r4, lr}
   d568a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d568c:	7c00      	ldrb	r0, [r0, #16]
{
   d568e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5690:	f7ff f8b8 	bl	d4804 <HAL_USB_USART_Available_Data_For_Write>
   d5694:	2800      	cmp	r0, #0
   d5696:	9901      	ldr	r1, [sp, #4]
   d5698:	dc01      	bgt.n	d569e <_ZN9USBSerial5writeEh+0x16>
   d569a:	7c60      	ldrb	r0, [r4, #17]
   d569c:	b120      	cbz	r0, d56a8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d569e:	7c20      	ldrb	r0, [r4, #16]
   d56a0:	f7ff f8c0 	bl	d4824 <HAL_USB_USART_Send_Data>
   d56a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d56a8:	b002      	add	sp, #8
   d56aa:	bd10      	pop	{r4, pc}

000d56ac <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d56ac:	7c00      	ldrb	r0, [r0, #16]
   d56ae:	f7ff b8c1 	b.w	d4834 <HAL_USB_USART_Flush_Data>

000d56b2 <_ZN9USBSerialD0Ev>:
   d56b2:	b510      	push	{r4, lr}
   d56b4:	2114      	movs	r1, #20
   d56b6:	4604      	mov	r4, r0
   d56b8:	f000 fce5 	bl	d6086 <_ZdlPvj>
   d56bc:	4620      	mov	r0, r4
   d56be:	bd10      	pop	{r4, pc}

000d56c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d56c0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d56c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d56c6:	4604      	mov	r4, r0
   d56c8:	4608      	mov	r0, r1
   d56ca:	2100      	movs	r1, #0
   d56cc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d56d0:	4b04      	ldr	r3, [pc, #16]	; (d56e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d56d2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d56d4:	2301      	movs	r3, #1
  _serial = serial;
   d56d6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d56d8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d56da:	4611      	mov	r1, r2
   d56dc:	f7ff f882 	bl	d47e4 <HAL_USB_USART_Init>
}
   d56e0:	4620      	mov	r0, r4
   d56e2:	bd10      	pop	{r4, pc}
   d56e4:	000d6464 	.word	0x000d6464

000d56e8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d56e8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d56ea:	2214      	movs	r2, #20
{
   d56ec:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d56ee:	2100      	movs	r1, #0
   d56f0:	f000 fd0c 	bl	d610c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d56f4:	4620      	mov	r0, r4
   d56f6:	bd10      	pop	{r4, pc}

000d56f8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d56f8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d56fa:	4c10      	ldr	r4, [pc, #64]	; (d573c <_Z16_fetch_usbserialv+0x44>)
{
   d56fc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d56fe:	a803      	add	r0, sp, #12
   d5700:	f7ff fff2 	bl	d56e8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5704:	7821      	ldrb	r1, [r4, #0]
   d5706:	f3bf 8f5b 	dmb	ish
   d570a:	f011 0101 	ands.w	r1, r1, #1
   d570e:	d111      	bne.n	d5734 <_Z16_fetch_usbserialv+0x3c>
   d5710:	4620      	mov	r0, r4
   d5712:	9101      	str	r1, [sp, #4]
   d5714:	f7fe fcc5 	bl	d40a2 <__cxa_guard_acquire>
   d5718:	9901      	ldr	r1, [sp, #4]
   d571a:	b158      	cbz	r0, d5734 <_Z16_fetch_usbserialv+0x3c>
   d571c:	aa03      	add	r2, sp, #12
   d571e:	4808      	ldr	r0, [pc, #32]	; (d5740 <_Z16_fetch_usbserialv+0x48>)
   d5720:	f7ff ffce 	bl	d56c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5724:	4620      	mov	r0, r4
   d5726:	f7fe fcc1 	bl	d40ac <__cxa_guard_release>
   d572a:	4a06      	ldr	r2, [pc, #24]	; (d5744 <_Z16_fetch_usbserialv+0x4c>)
   d572c:	4906      	ldr	r1, [pc, #24]	; (d5748 <_Z16_fetch_usbserialv+0x50>)
   d572e:	4804      	ldr	r0, [pc, #16]	; (d5740 <_Z16_fetch_usbserialv+0x48>)
   d5730:	f000 fca4 	bl	d607c <__aeabi_atexit>
	return _usbserial;
}
   d5734:	4802      	ldr	r0, [pc, #8]	; (d5740 <_Z16_fetch_usbserialv+0x48>)
   d5736:	b008      	add	sp, #32
   d5738:	bd10      	pop	{r4, pc}
   d573a:	bf00      	nop
   d573c:	2003e780 	.word	0x2003e780
   d5740:	2003e784 	.word	0x2003e784
   d5744:	2003e724 	.word	0x2003e724
   d5748:	000d564b 	.word	0x000d564b

000d574c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d574c:	4770      	bx	lr

000d574e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d574e:	7441      	strb	r1, [r0, #17]
}
   d5750:	4770      	bx	lr

000d5752 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d5752:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d5754:	7c00      	ldrb	r0, [r0, #16]
   d5756:	f7fe ffdd 	bl	d4714 <hal_usart_available_data_for_write>
}
   d575a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d575e:	bd08      	pop	{r3, pc}

000d5760 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5760:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d5762:	7c00      	ldrb	r0, [r0, #16]
   d5764:	f7fe ffae 	bl	d46c4 <hal_usart_available>
}
   d5768:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d576c:	bd08      	pop	{r3, pc}

000d576e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d576e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d5770:	7c00      	ldrb	r0, [r0, #16]
   d5772:	f7fe ffb7 	bl	d46e4 <hal_usart_peek>
}
   d5776:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d577a:	bd08      	pop	{r3, pc}

000d577c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d577c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d577e:	7c00      	ldrb	r0, [r0, #16]
   d5780:	f7fe ffa8 	bl	d46d4 <hal_usart_read>
}
   d5784:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5788:	bd08      	pop	{r3, pc}

000d578a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d578a:	7c00      	ldrb	r0, [r0, #16]
   d578c:	f7fe bfb2 	b.w	d46f4 <hal_usart_flush>

000d5790 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5790:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5792:	7c45      	ldrb	r5, [r0, #17]
{
   d5794:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5796:	b12d      	cbz	r5, d57a4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d5798:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d579a:	b003      	add	sp, #12
   d579c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d57a0:	f7fe bf88 	b.w	d46b4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d57a4:	7c00      	ldrb	r0, [r0, #16]
   d57a6:	9101      	str	r1, [sp, #4]
   d57a8:	f7fe ffb4 	bl	d4714 <hal_usart_available_data_for_write>
   d57ac:	2800      	cmp	r0, #0
   d57ae:	9901      	ldr	r1, [sp, #4]
   d57b0:	dcf2      	bgt.n	d5798 <_ZN11USARTSerial5writeEh+0x8>
}
   d57b2:	4628      	mov	r0, r5
   d57b4:	b003      	add	sp, #12
   d57b6:	bd30      	pop	{r4, r5, pc}

000d57b8 <_ZN11USARTSerialD0Ev>:
   d57b8:	b510      	push	{r4, lr}
   d57ba:	2114      	movs	r1, #20
   d57bc:	4604      	mov	r4, r0
   d57be:	f000 fc62 	bl	d6086 <_ZdlPvj>
   d57c2:	4620      	mov	r0, r4
   d57c4:	bd10      	pop	{r4, pc}
	...

000d57c8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d57c8:	b510      	push	{r4, lr}
   d57ca:	f04f 0c00 	mov.w	ip, #0
   d57ce:	4604      	mov	r4, r0
   d57d0:	4608      	mov	r0, r1
   d57d2:	4611      	mov	r1, r2
   d57d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d57d8:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d57dc:	4a04      	ldr	r2, [pc, #16]	; (d57f0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d57de:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d57e0:	2201      	movs	r2, #1
  _serial = serial;
   d57e2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d57e4:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d57e6:	461a      	mov	r2, r3
   d57e8:	f7fe ff5c 	bl	d46a4 <hal_usart_init>
}
   d57ec:	4620      	mov	r0, r4
   d57ee:	bd10      	pop	{r4, pc}
   d57f0:	000d6494 	.word	0x000d6494

000d57f4 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d57f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d57f6:	4c1b      	ldr	r4, [pc, #108]	; (d5864 <_Z22__fetch_global_Serial1v+0x70>)
   d57f8:	6826      	ldr	r6, [r4, #0]
   d57fa:	b94e      	cbnz	r6, d5810 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
   d57fc:	2084      	movs	r0, #132	; 0x84
   d57fe:	f7fe fc48 	bl	d4092 <_Znwj>
   d5802:	4605      	mov	r5, r0
   d5804:	b118      	cbz	r0, d580e <_Z22__fetch_global_Serial1v+0x1a>
   d5806:	2284      	movs	r2, #132	; 0x84
   d5808:	4631      	mov	r1, r6
   d580a:	f000 fc7f 	bl	d610c <memset>
   d580e:	6025      	str	r5, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d5810:	4d15      	ldr	r5, [pc, #84]	; (d5868 <_Z22__fetch_global_Serial1v+0x74>)
   d5812:	682f      	ldr	r7, [r5, #0]
   d5814:	b94f      	cbnz	r7, d582a <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
   d5816:	2084      	movs	r0, #132	; 0x84
   d5818:	f7fe fc3b 	bl	d4092 <_Znwj>
   d581c:	4606      	mov	r6, r0
   d581e:	b118      	cbz	r0, d5828 <_Z22__fetch_global_Serial1v+0x34>
   d5820:	2284      	movs	r2, #132	; 0x84
   d5822:	4639      	mov	r1, r7
   d5824:	f000 fc72 	bl	d610c <memset>
   d5828:	602e      	str	r6, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d582a:	4e10      	ldr	r6, [pc, #64]	; (d586c <_Z22__fetch_global_Serial1v+0x78>)
   d582c:	7831      	ldrb	r1, [r6, #0]
   d582e:	f3bf 8f5b 	dmb	ish
   d5832:	f011 0101 	ands.w	r1, r1, #1
   d5836:	d112      	bne.n	d585e <_Z22__fetch_global_Serial1v+0x6a>
   d5838:	4630      	mov	r0, r6
   d583a:	9101      	str	r1, [sp, #4]
   d583c:	f7fe fc31 	bl	d40a2 <__cxa_guard_acquire>
   d5840:	9901      	ldr	r1, [sp, #4]
   d5842:	b160      	cbz	r0, d585e <_Z22__fetch_global_Serial1v+0x6a>
   d5844:	6822      	ldr	r2, [r4, #0]
   d5846:	682b      	ldr	r3, [r5, #0]
   d5848:	4809      	ldr	r0, [pc, #36]	; (d5870 <_Z22__fetch_global_Serial1v+0x7c>)
   d584a:	f7ff ffbd 	bl	d57c8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d584e:	4630      	mov	r0, r6
   d5850:	f7fe fc2c 	bl	d40ac <__cxa_guard_release>
   d5854:	4a07      	ldr	r2, [pc, #28]	; (d5874 <_Z22__fetch_global_Serial1v+0x80>)
   d5856:	4908      	ldr	r1, [pc, #32]	; (d5878 <_Z22__fetch_global_Serial1v+0x84>)
   d5858:	4805      	ldr	r0, [pc, #20]	; (d5870 <_Z22__fetch_global_Serial1v+0x7c>)
   d585a:	f000 fc0f 	bl	d607c <__aeabi_atexit>
#endif
	return serial1;
}
   d585e:	4804      	ldr	r0, [pc, #16]	; (d5870 <_Z22__fetch_global_Serial1v+0x7c>)
   d5860:	b003      	add	sp, #12
   d5862:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5864:	2003e79c 	.word	0x2003e79c
   d5868:	2003e7a0 	.word	0x2003e7a0
   d586c:	2003e798 	.word	0x2003e798
   d5870:	2003e7a4 	.word	0x2003e7a4
   d5874:	2003e724 	.word	0x2003e724
   d5878:	000d574d 	.word	0x000d574d

000d587c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d587c:	b510      	push	{r4, lr}
      if (_M_empty())
   d587e:	6883      	ldr	r3, [r0, #8]
   d5880:	4604      	mov	r4, r0
   d5882:	b90b      	cbnz	r3, d5888 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5884:	f000 fc05 	bl	d6092 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5888:	68c3      	ldr	r3, [r0, #12]
   d588a:	4798      	blx	r3
      if (_M_manager)
   d588c:	68a3      	ldr	r3, [r4, #8]
   d588e:	b11b      	cbz	r3, d5898 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5890:	2203      	movs	r2, #3
   d5892:	4621      	mov	r1, r4
   d5894:	4620      	mov	r0, r4
   d5896:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5898:	4620      	mov	r0, r4
   d589a:	2110      	movs	r1, #16
}
   d589c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d58a0:	f000 bbf1 	b.w	d6086 <_ZdlPvj>

000d58a4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d58a4:	4770      	bx	lr

000d58a6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d58a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d58a8:	4606      	mov	r6, r0
   d58aa:	4615      	mov	r5, r2
   d58ac:	460c      	mov	r4, r1
   d58ae:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d58b0:	42bc      	cmp	r4, r7
   d58b2:	d006      	beq.n	d58c2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d58b4:	6833      	ldr	r3, [r6, #0]
   d58b6:	f814 1b01 	ldrb.w	r1, [r4], #1
   d58ba:	689b      	ldr	r3, [r3, #8]
   d58bc:	4630      	mov	r0, r6
   d58be:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d58c0:	e7f6      	b.n	d58b0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d58c2:	4628      	mov	r0, r5
   d58c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d58c6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d58c6:	7c00      	ldrb	r0, [r0, #16]
   d58c8:	2200      	movs	r2, #0
   d58ca:	f7fe bf2b 	b.w	d4724 <hal_i2c_write>

000d58ce <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d58ce:	7c00      	ldrb	r0, [r0, #16]
   d58d0:	2100      	movs	r1, #0
   d58d2:	f7fe bf2f 	b.w	d4734 <hal_i2c_available>

000d58d6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d58d6:	7c00      	ldrb	r0, [r0, #16]
   d58d8:	2100      	movs	r1, #0
   d58da:	f7fe bf33 	b.w	d4744 <hal_i2c_read>

000d58de <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d58de:	7c00      	ldrb	r0, [r0, #16]
   d58e0:	2100      	movs	r1, #0
   d58e2:	f7fe bf37 	b.w	d4754 <hal_i2c_peek>

000d58e6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d58e6:	7c00      	ldrb	r0, [r0, #16]
   d58e8:	2100      	movs	r1, #0
   d58ea:	f7fe bf3b 	b.w	d4764 <hal_i2c_flush>

000d58ee <_ZN7TwoWireD0Ev>:
   d58ee:	b510      	push	{r4, lr}
   d58f0:	2114      	movs	r1, #20
   d58f2:	4604      	mov	r4, r0
   d58f4:	f000 fbc7 	bl	d6086 <_ZdlPvj>
   d58f8:	4620      	mov	r0, r4
   d58fa:	bd10      	pop	{r4, pc}

000d58fc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d58fc:	b510      	push	{r4, lr}
   d58fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5902:	4604      	mov	r4, r0
   d5904:	4608      	mov	r0, r1
   d5906:	2100      	movs	r1, #0
   d5908:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d590c:	4b03      	ldr	r3, [pc, #12]	; (d591c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d590e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d5910:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d5912:	4611      	mov	r1, r2
   d5914:	f7fe ff36 	bl	d4784 <hal_i2c_init>
}
   d5918:	4620      	mov	r0, r4
   d591a:	bd10      	pop	{r4, pc}
   d591c:	000d64c4 	.word	0x000d64c4

000d5920 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5920:	2200      	movs	r2, #0
   d5922:	6840      	ldr	r0, [r0, #4]
   d5924:	4611      	mov	r1, r2
   d5926:	f7fe bfe9 	b.w	d48fc <network_ready>

000d592a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d592a:	2200      	movs	r2, #0
   d592c:	6840      	ldr	r0, [r0, #4]
   d592e:	4611      	mov	r1, r2
   d5930:	f7ff b804 	b.w	d493c <network_listening>

000d5934 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5934:	2200      	movs	r2, #0
   d5936:	6840      	ldr	r0, [r0, #4]
   d5938:	4611      	mov	r1, r2
   d593a:	f7ff b80f 	b.w	d495c <network_get_listen_timeout>

000d593e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d593e:	6840      	ldr	r0, [r0, #4]
   d5940:	2200      	movs	r2, #0
   d5942:	f7ff b803 	b.w	d494c <network_set_listen_timeout>

000d5946 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5946:	6840      	ldr	r0, [r0, #4]
   d5948:	2200      	movs	r2, #0
   d594a:	f081 0101 	eor.w	r1, r1, #1
   d594e:	f7fe bfed 	b.w	d492c <network_listen>

000d5952 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5952:	2300      	movs	r3, #0
   d5954:	6840      	ldr	r0, [r0, #4]
   d5956:	461a      	mov	r2, r3
   d5958:	4619      	mov	r1, r3
   d595a:	f7fe bfdf 	b.w	d491c <network_off>

000d595e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d595e:	2300      	movs	r3, #0
   d5960:	6840      	ldr	r0, [r0, #4]
   d5962:	461a      	mov	r2, r3
   d5964:	4619      	mov	r1, r3
   d5966:	f7fe bfd1 	b.w	d490c <network_on>

000d596a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d596a:	2200      	movs	r2, #0
   d596c:	6840      	ldr	r0, [r0, #4]
   d596e:	4611      	mov	r1, r2
   d5970:	f7fe bfb4 	b.w	d48dc <network_connecting>

000d5974 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5974:	6840      	ldr	r0, [r0, #4]
   d5976:	2200      	movs	r2, #0
   d5978:	2102      	movs	r1, #2
   d597a:	f7fe bfb7 	b.w	d48ec <network_disconnect>

000d597e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d597e:	2300      	movs	r3, #0
   d5980:	6840      	ldr	r0, [r0, #4]
   d5982:	461a      	mov	r2, r3
   d5984:	f7fe bfa2 	b.w	d48cc <network_connect>

000d5988 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5988:	4b02      	ldr	r3, [pc, #8]	; (d5994 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d598a:	2204      	movs	r2, #4
   d598c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d598e:	4a02      	ldr	r2, [pc, #8]	; (d5998 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5990:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d5992:	4770      	bx	lr
   d5994:	2003e7b8 	.word	0x2003e7b8
   d5998:	000d64ec 	.word	0x000d64ec

000d599c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d599c:	2300      	movs	r3, #0
   d599e:	6840      	ldr	r0, [r0, #4]
   d59a0:	461a      	mov	r2, r3
   d59a2:	f7fe bf93 	b.w	d48cc <network_connect>

000d59a6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d59a6:	6840      	ldr	r0, [r0, #4]
   d59a8:	2200      	movs	r2, #0
   d59aa:	2102      	movs	r1, #2
   d59ac:	f7fe bf9e 	b.w	d48ec <network_disconnect>

000d59b0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d59b0:	2200      	movs	r2, #0
   d59b2:	6840      	ldr	r0, [r0, #4]
   d59b4:	4611      	mov	r1, r2
   d59b6:	f7fe bf91 	b.w	d48dc <network_connecting>

000d59ba <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d59ba:	2200      	movs	r2, #0
   d59bc:	6840      	ldr	r0, [r0, #4]
   d59be:	4611      	mov	r1, r2
   d59c0:	f7fe bf9c 	b.w	d48fc <network_ready>

000d59c4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d59c4:	2300      	movs	r3, #0
   d59c6:	6840      	ldr	r0, [r0, #4]
   d59c8:	461a      	mov	r2, r3
   d59ca:	4619      	mov	r1, r3
   d59cc:	f7fe bf9e 	b.w	d490c <network_on>

000d59d0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d59d0:	2300      	movs	r3, #0
   d59d2:	6840      	ldr	r0, [r0, #4]
   d59d4:	461a      	mov	r2, r3
   d59d6:	4619      	mov	r1, r3
   d59d8:	f7fe bfa0 	b.w	d491c <network_off>

000d59dc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d59dc:	6840      	ldr	r0, [r0, #4]
   d59de:	2200      	movs	r2, #0
   d59e0:	f081 0101 	eor.w	r1, r1, #1
   d59e4:	f7fe bfa2 	b.w	d492c <network_listen>

000d59e8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d59e8:	6840      	ldr	r0, [r0, #4]
   d59ea:	2200      	movs	r2, #0
   d59ec:	f7fe bfae 	b.w	d494c <network_set_listen_timeout>

000d59f0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d59f0:	2200      	movs	r2, #0
   d59f2:	6840      	ldr	r0, [r0, #4]
   d59f4:	4611      	mov	r1, r2
   d59f6:	f7fe bfb1 	b.w	d495c <network_get_listen_timeout>

000d59fa <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d59fa:	2200      	movs	r2, #0
   d59fc:	6840      	ldr	r0, [r0, #4]
   d59fe:	4611      	mov	r1, r2
   d5a00:	f7fe bf9c 	b.w	d493c <network_listening>

000d5a04 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5a04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5a08:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d5a0a:	b095      	sub	sp, #84	; 0x54
   d5a0c:	4616      	mov	r6, r2
   d5a0e:	460d      	mov	r5, r1
   d5a10:	4607      	mov	r7, r0
    IPAddress addr;
   d5a12:	f7ff fde1 	bl	d55d8 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d5a16:	4621      	mov	r1, r4
   d5a18:	2218      	movs	r2, #24
   d5a1a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d5a1c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5a1e:	f000 fb75 	bl	d610c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5a22:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d5a24:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5a28:	4621      	mov	r1, r4
   d5a2a:	466b      	mov	r3, sp
   d5a2c:	aa0c      	add	r2, sp, #48	; 0x30
   d5a2e:	4630      	mov	r0, r6
   d5a30:	f7fe fde0 	bl	d45f4 <netdb_getaddrinfo>
    if (!r) {
   d5a34:	4604      	mov	r4, r0
   d5a36:	2800      	cmp	r0, #0
   d5a38:	d146      	bne.n	d5ac8 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5a3a:	4602      	mov	r2, r0
   d5a3c:	2101      	movs	r1, #1
   d5a3e:	6868      	ldr	r0, [r5, #4]
   d5a40:	f7fe ff5c 	bl	d48fc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5a44:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5a46:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5a48:	4622      	mov	r2, r4
   d5a4a:	6868      	ldr	r0, [r5, #4]
   d5a4c:	f7fe ff56 	bl	d48fc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5a50:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5a52:	4681      	mov	r9, r0
        bool ok = false;
   d5a54:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5a56:	2e00      	cmp	r6, #0
   d5a58:	d036      	beq.n	d5ac8 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d5a5a:	2900      	cmp	r1, #0
   d5a5c:	d134      	bne.n	d5ac8 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5a5e:	6873      	ldr	r3, [r6, #4]
   d5a60:	2b02      	cmp	r3, #2
   d5a62:	d003      	beq.n	d5a6c <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5a64:	2b0a      	cmp	r3, #10
   d5a66:	d00b      	beq.n	d5a80 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5a68:	69f6      	ldr	r6, [r6, #28]
   d5a6a:	e7f4      	b.n	d5a56 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d5a6c:	f1b8 0f00 	cmp.w	r8, #0
   d5a70:	d004      	beq.n	d5a7c <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5a72:	6971      	ldr	r1, [r6, #20]
   d5a74:	4638      	mov	r0, r7
   d5a76:	3104      	adds	r1, #4
   d5a78:	f7ff fddb 	bl	d5632 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d5a7c:	4641      	mov	r1, r8
   d5a7e:	e7f3      	b.n	d5a68 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5a80:	f1b9 0f00 	cmp.w	r9, #0
   d5a84:	d101      	bne.n	d5a8a <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d5a86:	4649      	mov	r1, r9
   d5a88:	e7ee      	b.n	d5a68 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5a8a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5a8c:	2210      	movs	r2, #16
   d5a8e:	a801      	add	r0, sp, #4
   d5a90:	f000 fb3c 	bl	d610c <memset>
                    a.v = 6;
   d5a94:	2306      	movs	r3, #6
   d5a96:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5a9a:	ad01      	add	r5, sp, #4
   d5a9c:	f104 0308 	add.w	r3, r4, #8
   d5aa0:	3418      	adds	r4, #24
   d5aa2:	6818      	ldr	r0, [r3, #0]
   d5aa4:	6859      	ldr	r1, [r3, #4]
   d5aa6:	462a      	mov	r2, r5
   d5aa8:	c203      	stmia	r2!, {r0, r1}
   d5aaa:	3308      	adds	r3, #8
   d5aac:	42a3      	cmp	r3, r4
   d5aae:	4615      	mov	r5, r2
   d5ab0:	d1f7      	bne.n	d5aa2 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d5ab2:	a901      	add	r1, sp, #4
   d5ab4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d5ab6:	ad07      	add	r5, sp, #28
   d5ab8:	f7ff fd9c 	bl	d55f4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5abc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5abe:	1d3c      	adds	r4, r7, #4
   d5ac0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5ac2:	682b      	ldr	r3, [r5, #0]
   d5ac4:	7023      	strb	r3, [r4, #0]
   d5ac6:	e7de      	b.n	d5a86 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5ac8:	9800      	ldr	r0, [sp, #0]
   d5aca:	f7fe fd8b 	bl	d45e4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5ace:	4638      	mov	r0, r7
   d5ad0:	b015      	add	sp, #84	; 0x54
   d5ad2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5ad8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5ad8:	4b02      	ldr	r3, [pc, #8]	; (d5ae4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5ada:	4a03      	ldr	r2, [pc, #12]	; (d5ae8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5adc:	601a      	str	r2, [r3, #0]
   d5ade:	2200      	movs	r2, #0
   d5ae0:	605a      	str	r2, [r3, #4]

} // spark
   d5ae2:	4770      	bx	lr
   d5ae4:	2003e7c0 	.word	0x2003e7c0
   d5ae8:	000d6520 	.word	0x000d6520

000d5aec <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d5aec:	f100 0310 	add.w	r3, r0, #16
   d5af0:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d5af2:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d5af6:	2901      	cmp	r1, #1
   d5af8:	4618      	mov	r0, r3
   d5afa:	d108      	bne.n	d5b0e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d5afc:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d5b00:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d5b04:	3a01      	subs	r2, #1
   d5b06:	f103 0310 	add.w	r3, r3, #16
   d5b0a:	d1f2      	bne.n	d5af2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d5b0c:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d5b0e:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d5b10:	bf04      	itt	eq
   d5b12:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d5b16:	1852      	addeq	r2, r2, r1
   d5b18:	e7f4      	b.n	d5b04 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d5b1a <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5b1a:	4770      	bx	lr

000d5b1c <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d5b1c:	2000      	movs	r0, #0
   d5b1e:	4770      	bx	lr

000d5b20 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5b20:	b510      	push	{r4, lr}
   d5b22:	2110      	movs	r1, #16
   d5b24:	4604      	mov	r4, r0
   d5b26:	f000 faae 	bl	d6086 <_ZdlPvj>
   d5b2a:	4620      	mov	r0, r4
   d5b2c:	bd10      	pop	{r4, pc}

000d5b2e <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d5b2e:	b508      	push	{r3, lr}
      { delete this; }
   d5b30:	f7ff fff6 	bl	d5b20 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5b34:	bd08      	pop	{r3, pc}

000d5b36 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d5b36:	b510      	push	{r4, lr}
      { delete _M_ptr; }
   d5b38:	68c4      	ldr	r4, [r0, #12]
   d5b3a:	b17c      	cbz	r4, d5b5c <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
            json(nullptr),
            freeJson(false) {
    }

    ~JSONData() {
        delete[] tokens;
   d5b3c:	6820      	ldr	r0, [r4, #0]
   d5b3e:	b108      	cbz	r0, d5b44 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0xe>
   d5b40:	f7fe faad 	bl	d409e <_ZdaPv>
        if (freeJson) {
   d5b44:	7a23      	ldrb	r3, [r4, #8]
   d5b46:	b11b      	cbz	r3, d5b50 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
            delete[] json;
   d5b48:	6860      	ldr	r0, [r4, #4]
   d5b4a:	b108      	cbz	r0, d5b50 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
   d5b4c:	f7fe faa7 	bl	d409e <_ZdaPv>
   d5b50:	4620      	mov	r0, r4
   d5b52:	210c      	movs	r1, #12
   d5b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5b58:	f000 ba95 	b.w	d6086 <_ZdlPvj>
   d5b5c:	bd10      	pop	{r4, pc}

000d5b5e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5b5e:	b510      	push	{r4, lr}
          _M_dispose();
   d5b60:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5b62:	4604      	mov	r4, r0
          _M_dispose();
   d5b64:	689b      	ldr	r3, [r3, #8]
   d5b66:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5b68:	68a3      	ldr	r3, [r4, #8]
   d5b6a:	3b01      	subs	r3, #1
   d5b6c:	60a3      	str	r3, [r4, #8]
   d5b6e:	b92b      	cbnz	r3, d5b7c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d5b70:	6823      	ldr	r3, [r4, #0]
   d5b72:	4620      	mov	r0, r4
   d5b74:	68db      	ldr	r3, [r3, #12]
    }
   d5b76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d5b7a:	4718      	bx	r3
    }
   d5b7c:	bd10      	pop	{r4, pc}

000d5b7e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d5b7e:	b538      	push	{r3, r4, r5, lr}
   d5b80:	680b      	ldr	r3, [r1, #0]
   d5b82:	6003      	str	r3, [r0, #0]
   d5b84:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d5b86:	6843      	ldr	r3, [r0, #4]
   d5b88:	429d      	cmp	r5, r3
    class __shared_ptr
   d5b8a:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d5b8c:	d00c      	beq.n	d5ba8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d5b8e:	b115      	cbz	r5, d5b96 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d5b90:	686b      	ldr	r3, [r5, #4]
   d5b92:	3301      	adds	r3, #1
   d5b94:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d5b96:	6860      	ldr	r0, [r4, #4]
   d5b98:	b128      	cbz	r0, d5ba6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d5b9a:	6843      	ldr	r3, [r0, #4]
   d5b9c:	3b01      	subs	r3, #1
   d5b9e:	6043      	str	r3, [r0, #4]
   d5ba0:	b90b      	cbnz	r3, d5ba6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d5ba2:	f7ff ffdc 	bl	d5b5e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d5ba6:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d5ba8:	4620      	mov	r0, r4
   d5baa:	bd38      	pop	{r3, r4, r5, pc}

000d5bac <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d5bac:	460b      	mov	r3, r1
   d5bae:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d5bb0:	2200      	movs	r2, #0
   d5bb2:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d5bb4:	e9c0 2200 	strd	r2, r2, [r0]
   d5bb8:	4604      	mov	r4, r0
        JSONValue() {
    if (t) {
        t_ = t;
   d5bba:	6083      	str	r3, [r0, #8]
    if (t) {
   d5bbc:	b90b      	cbnz	r3, d5bc2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
        d_ = d;
    }
}
   d5bbe:	4620      	mov	r0, r4
   d5bc0:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d5bc2:	f7ff ffdc 	bl	d5b7e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d5bc6:	e7fa      	b.n	d5bbe <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d5bc8 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>:
        return JSONValue();
    }
    return JSONValue(d->tokens, d);
}

bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d5bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5bcc:	b086      	sub	sp, #24
   d5bce:	4607      	mov	r7, r0
   d5bd0:	4688      	mov	r8, r1
    jsmn_parser parser;
    parser.size = sizeof(jsmn_parser);
    jsmn_init(&parser, nullptr);
   d5bd2:	a802      	add	r0, sp, #8
   d5bd4:	2100      	movs	r1, #0
    const int n = jsmn_parse(&parser, json, size, nullptr, 0, nullptr); // Get number of tokens
   d5bd6:	2400      	movs	r4, #0
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d5bd8:	4699      	mov	r9, r3
    parser.size = sizeof(jsmn_parser);
   d5bda:	2310      	movs	r3, #16
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d5bdc:	4692      	mov	sl, r2
    parser.size = sizeof(jsmn_parser);
   d5bde:	9302      	str	r3, [sp, #8]
    jsmn_init(&parser, nullptr);
   d5be0:	f7fe fe30 	bl	d4844 <jsmn_init>
    const int n = jsmn_parse(&parser, json, size, nullptr, 0, nullptr); // Get number of tokens
   d5be4:	e9cd 4400 	strd	r4, r4, [sp]
   d5be8:	4623      	mov	r3, r4
   d5bea:	4642      	mov	r2, r8
   d5bec:	4639      	mov	r1, r7
   d5bee:	a802      	add	r0, sp, #8
   d5bf0:	f7fe fe30 	bl	d4854 <jsmn_parse>
    if (n <= 0) {
   d5bf4:	1e06      	subs	r6, r0, #0
   d5bf6:	dd1e      	ble.n	d5c36 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x6e>
        return false; // Parsing error
    }
    std::unique_ptr<jsmntok_t[]> t(new(std::nothrow) jsmntok_t[n]);
   d5bf8:	4910      	ldr	r1, [pc, #64]	; (d5c3c <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x74>)
   d5bfa:	0130      	lsls	r0, r6, #4
   d5bfc:	f000 fa47 	bl	d608e <_ZnajRKSt9nothrow_t>
    if (!t) {
   d5c00:	4605      	mov	r5, r0
   d5c02:	b190      	cbz	r0, d5c2a <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x62>
        return false;
    }
    jsmn_init(&parser, nullptr); // Reset parser
   d5c04:	4621      	mov	r1, r4
   d5c06:	a802      	add	r0, sp, #8
   d5c08:	f7fe fe1c 	bl	d4844 <jsmn_init>
    if (jsmn_parse(&parser, json, size, t.get(), n, nullptr) <= 0) {
   d5c0c:	e9cd 6400 	strd	r6, r4, [sp]
   d5c10:	462b      	mov	r3, r5
   d5c12:	4642      	mov	r2, r8
   d5c14:	4639      	mov	r1, r7
   d5c16:	a802      	add	r0, sp, #8
   d5c18:	f7fe fe1c 	bl	d4854 <jsmn_parse>
   d5c1c:	42a0      	cmp	r0, r4
   d5c1e:	dd07      	ble.n	d5c30 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x68>
        return false;
    }
    *tokens = t.release();
   d5c20:	f8ca 5000 	str.w	r5, [sl]
    *count = n;
    return true;
   d5c24:	2001      	movs	r0, #1
    *count = n;
   d5c26:	f8c9 6000 	str.w	r6, [r9]
}
   d5c2a:	b006      	add	sp, #24
   d5c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      typename enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type
	operator()(_Up* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5c30:	4628      	mov	r0, r5
   d5c32:	f7fe fa34 	bl	d409e <_ZdaPv>
      }
   d5c36:	4620      	mov	r0, r4
   d5c38:	e7f7      	b.n	d5c2a <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x62>
   d5c3a:	bf00      	nop
   d5c3c:	000d6568 	.word	0x000d6568

000d5c40 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>:
        ++t;
    }
    return true;
}

bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d5c40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *str = json + t->start; // Destination string
   d5c44:	6843      	ldr	r3, [r0, #4]
    const char* const end = json + t->end; // End of the source string
   d5c46:	6886      	ldr	r6, [r0, #8]
    char *str = json + t->start; // Destination string
   d5c48:	440b      	add	r3, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d5c4a:	4688      	mov	r8, r1
    const char* const end = json + t->end; // End of the source string
   d5c4c:	440e      	add	r6, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d5c4e:	4607      	mov	r7, r0
    const char *s1 = str; // Beginning of an unescaped sequence
    const char *s = s1;
   d5c50:	461c      	mov	r4, r3
    const char *s1 = str; // Beginning of an unescaped sequence
   d5c52:	4619      	mov	r1, r3
                    break;
                case 'f': // Form feed
                    *str = 0x0c;
                    break;
                case 'r': // Carriage return
                    *str = 0x0d;
   d5c54:	f04f 090d 	mov.w	r9, #13
                    *str = 0x09;
   d5c58:	f04f 0a09 	mov.w	sl, #9
    while (s != end) {
   d5c5c:	42b4      	cmp	r4, r6
   d5c5e:	d063      	beq.n	d5d28 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe8>
        if (*s == '\\') {
   d5c60:	4625      	mov	r5, r4
   d5c62:	f815 2b01 	ldrb.w	r2, [r5], #1
   d5c66:	2a5c      	cmp	r2, #92	; 0x5c
   d5c68:	d12b      	bne.n	d5cc2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x82>
            if (s != s1) {
   d5c6a:	42a1      	cmp	r1, r4
   d5c6c:	d007      	beq.n	d5c7e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x3e>
                const size_t n = s - s1;
   d5c6e:	eba4 0b01 	sub.w	fp, r4, r1
                memmove(str, s1, n); // Shift preceeding characters
   d5c72:	4618      	mov	r0, r3
   d5c74:	465a      	mov	r2, fp
   d5c76:	f000 fa2f 	bl	d60d8 <memmove>
   d5c7a:	4603      	mov	r3, r0
                str += n;
   d5c7c:	445b      	add	r3, fp
            if (s == end) {
   d5c7e:	42b5      	cmp	r5, r6
   d5c80:	d039      	beq.n	d5cf6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            if (*s == 'u') { // Arbitrary character, e.g. "\u001f"
   d5c82:	7862      	ldrb	r2, [r4, #1]
   d5c84:	2a75      	cmp	r2, #117	; 0x75
   d5c86:	d12a      	bne.n	d5cde <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x9e>
                ++s;
   d5c88:	1ca2      	adds	r2, r4, #2
                if (end - s < 4) {
   d5c8a:	1ab2      	subs	r2, r6, r2
   d5c8c:	2a03      	cmp	r2, #3
   d5c8e:	dd32      	ble.n	d5cf6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
    const char* const end = s + size;
   d5c90:	1da0      	adds	r0, r4, #6
   d5c92:	f104 0e05 	add.w	lr, r4, #5
    uint32_t v = 0;
   d5c96:	f04f 0c00 	mov.w	ip, #0
    while (s != end) {
   d5c9a:	45ae      	cmp	lr, r5
   d5c9c:	d053      	beq.n	d5d46 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x106>
        const char c = *s;
   d5c9e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
        if (c >= '0' && c <= '9') {
   d5ca2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   d5ca6:	fa5f fb82 	uxtb.w	fp, r2
   d5caa:	f1bb 0f09 	cmp.w	fp, #9
   d5cae:	d905      	bls.n	d5cbc <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
        } else if (c >= 'a' && c <= 'f') {
   d5cb0:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   d5cb4:	2a05      	cmp	r2, #5
   d5cb6:	d807      	bhi.n	d5cc8 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x88>
            n = c - 'a' + 10;
   d5cb8:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
        v = (v << 4) | n;
   d5cbc:	ea42 1c0c 	orr.w	ip, r2, ip, lsl #4
    while (s != end) {
   d5cc0:	e7eb      	b.n	d5c9a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x5a>
   d5cc2:	4628      	mov	r0, r5
   d5cc4:	4604      	mov	r4, r0
   d5cc6:	e7c9      	b.n	d5c5c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x1c>
        } else if (c >= 'A' && c <= 'F') {
   d5cc8:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   d5ccc:	2a05      	cmp	r2, #5
   d5cce:	d812      	bhi.n	d5cf6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            n = c - 'A' + 10;
   d5cd0:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   d5cd4:	e7f2      	b.n	d5cbc <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
                    *str = u;
   d5cd6:	f803 cb01 	strb.w	ip, [r3], #1
                    s1 += 6; // Skip escaped sequence
   d5cda:	4601      	mov	r1, r0
   d5cdc:	e7f2      	b.n	d5cc4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                switch (*s) {
   d5cde:	2a6e      	cmp	r2, #110	; 0x6e
   d5ce0:	d01c      	beq.n	d5d1c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xdc>
   d5ce2:	d80e      	bhi.n	d5d02 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xc2>
   d5ce4:	2a62      	cmp	r2, #98	; 0x62
   d5ce6:	d013      	beq.n	d5d10 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd0>
   d5ce8:	d807      	bhi.n	d5cfa <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xba>
   d5cea:	2a2f      	cmp	r2, #47	; 0x2f
   d5cec:	d011      	beq.n	d5d12 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   d5cee:	2a5c      	cmp	r2, #92	; 0x5c
   d5cf0:	d00f      	beq.n	d5d12 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   d5cf2:	2a22      	cmp	r2, #34	; 0x22
   d5cf4:	d00d      	beq.n	d5d12 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                return false; // Unexpected end of string
   d5cf6:	2000      	movs	r0, #0
   d5cf8:	e023      	b.n	d5d42 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x102>
                switch (*s) {
   d5cfa:	2a66      	cmp	r2, #102	; 0x66
   d5cfc:	d1fb      	bne.n	d5cf6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x0c;
   d5cfe:	220c      	movs	r2, #12
   d5d00:	e007      	b.n	d5d12 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                switch (*s) {
   d5d02:	2a72      	cmp	r2, #114	; 0x72
   d5d04:	d00d      	beq.n	d5d22 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe2>
   d5d06:	2a74      	cmp	r2, #116	; 0x74
   d5d08:	d1f5      	bne.n	d5cf6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x09;
   d5d0a:	f883 a000 	strb.w	sl, [r3]
                    break;
   d5d0e:	e001      	b.n	d5d14 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
                    *str = 0x08;
   d5d10:	2208      	movs	r2, #8
   d5d12:	701a      	strb	r2, [r3, #0]
                    break;
                default:
                    return false; // Invalid escaped sequence
                }
                ++str;
                ++s;
   d5d14:	1ca1      	adds	r1, r4, #2
                ++str;
   d5d16:	3301      	adds	r3, #1
                ++s;
   d5d18:	4608      	mov	r0, r1
   d5d1a:	e7d3      	b.n	d5cc4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                    *str = 0x0a;
   d5d1c:	f04f 020a 	mov.w	r2, #10
   d5d20:	e7f7      	b.n	d5d12 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                    *str = 0x0d;
   d5d22:	f883 9000 	strb.w	r9, [r3]
                    break;
   d5d26:	e7f5      	b.n	d5d14 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
            }
        } else {
            ++s;
        }
    }
    if (s != s1) {
   d5d28:	42a1      	cmp	r1, r4
   d5d2a:	d006      	beq.n	d5d3a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xfa>
        const size_t n = s - s1;
   d5d2c:	1a64      	subs	r4, r4, r1
        memmove(str, s1, n); // Shift remaining characters
   d5d2e:	4618      	mov	r0, r3
   d5d30:	4622      	mov	r2, r4
   d5d32:	f000 f9d1 	bl	d60d8 <memmove>
   d5d36:	4603      	mov	r3, r0
        str += n;
   d5d38:	4423      	add	r3, r4
    }
    t->end = str - json; // Update string length
   d5d3a:	eba3 0308 	sub.w	r3, r3, r8
   d5d3e:	60bb      	str	r3, [r7, #8]
    return true;
   d5d40:	2001      	movs	r0, #1
}
   d5d42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (u <= 0x7f) { // Processing only code points within the basic latin block
   d5d46:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   d5d4a:	d9c4      	bls.n	d5cd6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x96>
   d5d4c:	4621      	mov	r1, r4
   d5d4e:	e7b9      	b.n	d5cc4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>

000d5d50 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>:
bool spark::JSONValue::stringize(jsmntok_t *t, size_t count, char *json) {
   d5d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5d52:	4604      	mov	r4, r0
   d5d54:	4615      	mov	r5, r2
    const jsmntok_t* const end = t + count;
   d5d56:	eb00 1601 	add.w	r6, r0, r1, lsl #4
            json[t->end] = '\0';
   d5d5a:	2700      	movs	r7, #0
    while (t != end) {
   d5d5c:	42b4      	cmp	r4, r6
   d5d5e:	d010      	beq.n	d5d82 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x32>
        if (t->type == JSMN_STRING) {
   d5d60:	7823      	ldrb	r3, [r4, #0]
   d5d62:	2b03      	cmp	r3, #3
   d5d64:	d108      	bne.n	d5d78 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x28>
            if (!unescape(t, json)) {
   d5d66:	4629      	mov	r1, r5
   d5d68:	4620      	mov	r0, r4
   d5d6a:	f7ff ff69 	bl	d5c40 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>
   d5d6e:	b148      	cbz	r0, d5d84 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x34>
            json[t->end] = '\0';
   d5d70:	68a3      	ldr	r3, [r4, #8]
   d5d72:	54ef      	strb	r7, [r5, r3]
        ++t;
   d5d74:	3410      	adds	r4, #16
    while (t != end) {
   d5d76:	e7f1      	b.n	d5d5c <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0xc>
        } else if (t->type == JSMN_PRIMITIVE) {
   d5d78:	2b00      	cmp	r3, #0
   d5d7a:	d1fb      	bne.n	d5d74 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
            json[t->end] = '\0';
   d5d7c:	68a2      	ldr	r2, [r4, #8]
   d5d7e:	54ab      	strb	r3, [r5, r2]
   d5d80:	e7f8      	b.n	d5d74 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
    return true;
   d5d82:	2001      	movs	r0, #1
}
   d5d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d5d88 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d5d88:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d5d8a:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d5d8c:	e9c0 3300 	strd	r3, r3, [r0]
   d5d90:	4604      	mov	r4, r0
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d5d92:	480e      	ldr	r0, [pc, #56]	; (d5dcc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d5d94:	e9c4 0302 	strd	r0, r3, [r4, #8]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d5d98:	b1a9      	cbz	r1, d5dc6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d5d9a:	780b      	ldrb	r3, [r1, #0]
   d5d9c:	2b03      	cmp	r3, #3
   d5d9e:	d006      	beq.n	d5dae <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d5da0:	b98b      	cbnz	r3, d5dc6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d5da2:	6813      	ldr	r3, [r2, #0]
   d5da4:	6858      	ldr	r0, [r3, #4]
   d5da6:	684b      	ldr	r3, [r1, #4]
   d5da8:	5cc3      	ldrb	r3, [r0, r3]
   d5daa:	2b6e      	cmp	r3, #110	; 0x6e
   d5dac:	d007      	beq.n	d5dbe <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d5dae:	6813      	ldr	r3, [r2, #0]
   d5db0:	684d      	ldr	r5, [r1, #4]
   d5db2:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d5db4:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d5db6:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d5db8:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d5dba:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d5dbc:	60e3      	str	r3, [r4, #12]
   d5dbe:	4611      	mov	r1, r2
   d5dc0:	4620      	mov	r0, r4
   d5dc2:	f7ff fedc 	bl	d5b7e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
        }
        d_ = d;
    }
}
   d5dc6:	4620      	mov	r0, r4
   d5dc8:	bd38      	pop	{r3, r4, r5, pc}
   d5dca:	bf00      	nop
   d5dcc:	000d63c2 	.word	0x000d63c2

000d5dd0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d5dd0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d5dd2:	2500      	movs	r5, #0
   d5dd4:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d5dd6:	e9c0 5500 	strd	r5, r5, [r0]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d5dda:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d5dde:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d5de2:	4604      	mov	r4, r0
   d5de4:	4611      	mov	r1, r2
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d5de6:	b14b      	cbz	r3, d5dfc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d5de8:	781a      	ldrb	r2, [r3, #0]
   d5dea:	2a01      	cmp	r2, #1
   d5dec:	d106      	bne.n	d5dfc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d5dee:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d5df2:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d5df4:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d5df6:	6143      	str	r3, [r0, #20]
   d5df8:	f7ff fec1 	bl	d5b7e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
        d_ = d;
    }
}
   d5dfc:	4620      	mov	r0, r4
   d5dfe:	bd38      	pop	{r3, r4, r5, pc}

000d5e00 <_ZN5spark18JSONObjectIterator4nextEv>:

bool spark::JSONObjectIterator::next() {
   d5e00:	b510      	push	{r4, lr}
    if (!n_) {
   d5e02:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d5e04:	4604      	mov	r4, r0
    if (!n_) {
   d5e06:	b163      	cbz	r3, d5e22 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
        return false;
    }
    k_ = t_; // Name
   d5e08:	6880      	ldr	r0, [r0, #8]
   d5e0a:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d5e0c:	3b01      	subs	r3, #1
    ++t_;
   d5e0e:	3010      	adds	r0, #16
   d5e10:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d5e12:	6120      	str	r0, [r4, #16]
    --n_;
   d5e14:	6163      	str	r3, [r4, #20]
    if (n_) {
   d5e16:	b113      	cbz	r3, d5e1e <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d5e18:	f7ff fe68 	bl	d5aec <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d5e1c:	60a0      	str	r0, [r4, #8]
    }
    return true;
   d5e1e:	2001      	movs	r0, #1
   d5e20:	e000      	b.n	d5e24 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d5e22:	4618      	mov	r0, r3
}
   d5e24:	bd10      	pop	{r4, pc}
	...

000d5e28 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d5e28:	b538      	push	{r3, r4, r5, lr}
   d5e2a:	2300      	movs	r3, #0
   d5e2c:	4604      	mov	r4, r0
   d5e2e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5e30:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d5e32:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5e34:	f7fe f92d 	bl	d4092 <_Znwj>
   d5e38:	b128      	cbz	r0, d5e46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d5e3a:	2301      	movs	r3, #1
   d5e3c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d5e40:	4b02      	ldr	r3, [pc, #8]	; (d5e4c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x24>)
   d5e42:	6003      	str	r3, [r0, #0]
   d5e44:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5e46:	6020      	str	r0, [r4, #0]
	}
   d5e48:	4620      	mov	r0, r4
   d5e4a:	bd38      	pop	{r3, r4, r5, pc}
   d5e4c:	000d6554 	.word	0x000d6554

000d5e50 <_ZN5spark9JSONValue9parseCopyEPKcj>:
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   d5e50:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5e52:	4604      	mov	r4, r0
   d5e54:	b087      	sub	sp, #28
   d5e56:	460e      	mov	r6, r1
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   d5e58:	200c      	movs	r0, #12
   d5e5a:	4927      	ldr	r1, [pc, #156]	; (d5ef8 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   d5e5c:	4615      	mov	r5, r2
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   d5e5e:	f000 f914 	bl	d608a <_ZnwjRKSt9nothrow_t>
   d5e62:	4601      	mov	r1, r0
   d5e64:	b118      	cbz	r0, d5e6e <_ZN5spark9JSONValue9parseCopyEPKcj+0x1e>
            freeJson(false) {
   d5e66:	2300      	movs	r3, #0
   d5e68:	e9c0 3300 	strd	r3, r3, [r0]
   d5e6c:	7203      	strb	r3, [r0, #8]
	: __shared_count(__p)
   d5e6e:	a803      	add	r0, sp, #12
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5e70:	9102      	str	r1, [sp, #8]
	: __shared_count(__p)
   d5e72:	f7ff ffd9 	bl	d5e28 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>
    if (!d) {
   d5e76:	9a02      	ldr	r2, [sp, #8]
   d5e78:	b942      	cbnz	r2, d5e8c <_ZN5spark9JSONValue9parseCopyEPKcj+0x3c>
      constexpr __shared_count() noexcept : _M_pi(0)
   d5e7a:	e9c4 2200 	strd	r2, r2, [r4]
        t_(nullptr) {
   d5e7e:	60a2      	str	r2, [r4, #8]
      ~__shared_ptr() = default;
   d5e80:	a803      	add	r0, sp, #12
   d5e82:	f7fe f9f7 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5e86:	4620      	mov	r0, r4
   d5e88:	b007      	add	sp, #28
   d5e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    size_t tokenCount = 0;
   d5e8c:	2300      	movs	r3, #0
   d5e8e:	9301      	str	r3, [sp, #4]
    if (!tokenize(json, size, &d->tokens, &tokenCount)) {
   d5e90:	4629      	mov	r1, r5
   d5e92:	ab01      	add	r3, sp, #4
   d5e94:	4630      	mov	r0, r6
   d5e96:	f7ff fe97 	bl	d5bc8 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>
   d5e9a:	b918      	cbnz	r0, d5ea4 <_ZN5spark9JSONValue9parseCopyEPKcj+0x54>
      constexpr __shared_count() noexcept : _M_pi(0)
   d5e9c:	e9c4 0000 	strd	r0, r0, [r4]
   d5ea0:	60a0      	str	r0, [r4, #8]
}
   d5ea2:	e7ed      	b.n	d5e80 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
    d->json = new(std::nothrow) char[size + 1];
   d5ea4:	4914      	ldr	r1, [pc, #80]	; (d5ef8 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5ea6:	9f02      	ldr	r7, [sp, #8]
   d5ea8:	1c68      	adds	r0, r5, #1
   d5eaa:	f000 f8f0 	bl	d608e <_ZnajRKSt9nothrow_t>
    if (!d->json) {
   d5eae:	9b02      	ldr	r3, [sp, #8]
    d->json = new(std::nothrow) char[size + 1];
   d5eb0:	6078      	str	r0, [r7, #4]
    if (!d->json) {
   d5eb2:	6858      	ldr	r0, [r3, #4]
   d5eb4:	2800      	cmp	r0, #0
   d5eb6:	d0f1      	beq.n	d5e9c <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
    memcpy(d->json, json, size); // TODO: Copy only token data
   d5eb8:	462a      	mov	r2, r5
   d5eba:	4631      	mov	r1, r6
   d5ebc:	f000 f8fe 	bl	d60bc <memcpy>
   d5ec0:	9b02      	ldr	r3, [sp, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   d5ec2:	9901      	ldr	r1, [sp, #4]
   d5ec4:	6818      	ldr	r0, [r3, #0]
    d->freeJson = true;
   d5ec6:	2201      	movs	r2, #1
   d5ec8:	721a      	strb	r2, [r3, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   d5eca:	685a      	ldr	r2, [r3, #4]
   d5ecc:	f7ff ff40 	bl	d5d50 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>
   d5ed0:	2800      	cmp	r0, #0
   d5ed2:	d0e3      	beq.n	d5e9c <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
   d5ed4:	9b02      	ldr	r3, [sp, #8]
    return JSONValue(d->tokens, d);
   d5ed6:	6819      	ldr	r1, [r3, #0]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5ed8:	9304      	str	r3, [sp, #16]
      : _M_pi(__r._M_pi)
   d5eda:	9b03      	ldr	r3, [sp, #12]
   d5edc:	9305      	str	r3, [sp, #20]
	if (_M_pi != 0)
   d5ede:	b113      	cbz	r3, d5ee6 <_ZN5spark9JSONValue9parseCopyEPKcj+0x96>
    { ++_M_use_count; }
   d5ee0:	685a      	ldr	r2, [r3, #4]
   d5ee2:	3201      	adds	r2, #1
   d5ee4:	605a      	str	r2, [r3, #4]
   d5ee6:	aa04      	add	r2, sp, #16
   d5ee8:	4620      	mov	r0, r4
   d5eea:	f7ff fe5f 	bl	d5bac <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d5eee:	a805      	add	r0, sp, #20
   d5ef0:	f7fe f9c0 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5ef4:	e7c4      	b.n	d5e80 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
   d5ef6:	bf00      	nop
   d5ef8:	000d6568 	.word	0x000d6568

000d5efc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d5efc:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d5efe:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d5f00:	d902      	bls.n	d5f08 <pinAvailable+0xc>
    return false;
   d5f02:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d5f04:	b002      	add	sp, #8
   d5f06:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d5f08:	f1a0 030b 	sub.w	r3, r0, #11
   d5f0c:	2b02      	cmp	r3, #2
   d5f0e:	d81a      	bhi.n	d5f46 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5f10:	4c17      	ldr	r4, [pc, #92]	; (d5f70 <pinAvailable+0x74>)
   d5f12:	7821      	ldrb	r1, [r4, #0]
   d5f14:	f3bf 8f5b 	dmb	ish
   d5f18:	f011 0101 	ands.w	r1, r1, #1
   d5f1c:	d10b      	bne.n	d5f36 <pinAvailable+0x3a>
   d5f1e:	4620      	mov	r0, r4
   d5f20:	9101      	str	r1, [sp, #4]
   d5f22:	f7fe f8be 	bl	d40a2 <__cxa_guard_acquire>
   d5f26:	9901      	ldr	r1, [sp, #4]
   d5f28:	b128      	cbz	r0, d5f36 <pinAvailable+0x3a>
   d5f2a:	4812      	ldr	r0, [pc, #72]	; (d5f74 <pinAvailable+0x78>)
   d5f2c:	f7fe fdb4 	bl	d4a98 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5f30:	4620      	mov	r0, r4
   d5f32:	f7fe f8bb 	bl	d40ac <__cxa_guard_release>
   d5f36:	4b0f      	ldr	r3, [pc, #60]	; (d5f74 <pinAvailable+0x78>)
   d5f38:	7818      	ldrb	r0, [r3, #0]
   d5f3a:	f7fe fc33 	bl	d47a4 <hal_spi_is_enabled>
   d5f3e:	2800      	cmp	r0, #0
   d5f40:	d1df      	bne.n	d5f02 <pinAvailable+0x6>
  return true; // 'pin' is available
   d5f42:	2001      	movs	r0, #1
   d5f44:	e7de      	b.n	d5f04 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d5f46:	2801      	cmp	r0, #1
   d5f48:	d809      	bhi.n	d5f5e <pinAvailable+0x62>
   d5f4a:	f000 f86f 	bl	d602c <_Z19__fetch_global_Wirev>
   d5f4e:	2100      	movs	r1, #0
   d5f50:	7c00      	ldrb	r0, [r0, #16]
   d5f52:	f7fe fc0f 	bl	d4774 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d5f56:	f080 0001 	eor.w	r0, r0, #1
   d5f5a:	b2c0      	uxtb	r0, r0
   d5f5c:	e7d2      	b.n	d5f04 <pinAvailable+0x8>
   d5f5e:	3809      	subs	r0, #9
   d5f60:	2801      	cmp	r0, #1
   d5f62:	d8ee      	bhi.n	d5f42 <pinAvailable+0x46>
   d5f64:	f7ff fc46 	bl	d57f4 <_Z22__fetch_global_Serial1v>
   d5f68:	7c00      	ldrb	r0, [r0, #16]
   d5f6a:	f7fe fbcb 	bl	d4704 <hal_usart_is_enabled>
   d5f6e:	e7f2      	b.n	d5f56 <pinAvailable+0x5a>
   d5f70:	2003e7c8 	.word	0x2003e7c8
   d5f74:	2003e7cc 	.word	0x2003e7cc

000d5f78 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5f78:	2823      	cmp	r0, #35	; 0x23
{
   d5f7a:	b538      	push	{r3, r4, r5, lr}
   d5f7c:	4604      	mov	r4, r0
   d5f7e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5f80:	d80a      	bhi.n	d5f98 <pinMode+0x20>
   d5f82:	29ff      	cmp	r1, #255	; 0xff
   d5f84:	d008      	beq.n	d5f98 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d5f86:	f7ff ffb9 	bl	d5efc <pinAvailable>
   d5f8a:	b128      	cbz	r0, d5f98 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d5f8c:	4629      	mov	r1, r5
   d5f8e:	4620      	mov	r0, r4
}
   d5f90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d5f94:	f7fe bb3e 	b.w	d4614 <HAL_Pin_Mode>
}
   d5f98:	bd38      	pop	{r3, r4, r5, pc}

000d5f9a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5f9a:	b538      	push	{r3, r4, r5, lr}
   d5f9c:	4604      	mov	r4, r0
   d5f9e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5fa0:	f7fe fb40 	bl	d4624 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5fa4:	28ff      	cmp	r0, #255	; 0xff
   d5fa6:	d010      	beq.n	d5fca <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d5fa8:	2806      	cmp	r0, #6
   d5faa:	d804      	bhi.n	d5fb6 <digitalWrite+0x1c>
   d5fac:	234d      	movs	r3, #77	; 0x4d
   d5fae:	fa23 f000 	lsr.w	r0, r3, r0
   d5fb2:	07c3      	lsls	r3, r0, #31
   d5fb4:	d409      	bmi.n	d5fca <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5fb6:	4620      	mov	r0, r4
   d5fb8:	f7ff ffa0 	bl	d5efc <pinAvailable>
   d5fbc:	b128      	cbz	r0, d5fca <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5fbe:	4629      	mov	r1, r5
   d5fc0:	4620      	mov	r0, r4
}
   d5fc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d5fc6:	f7fe bb35 	b.w	d4634 <HAL_GPIO_Write>
}
   d5fca:	bd38      	pop	{r3, r4, r5, pc}

000d5fcc <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d5fcc:	280d      	cmp	r0, #13
{
   d5fce:	b510      	push	{r4, lr}
   d5fd0:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d5fd2:	bf9c      	itt	ls
   d5fd4:	340e      	addls	r4, #14
   d5fd6:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5fd8:	4620      	mov	r0, r4
   d5fda:	f7ff ff8f 	bl	d5efc <pinAvailable>
   d5fde:	b150      	cbz	r0, d5ff6 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d5fe0:	2103      	movs	r1, #3
   d5fe2:	4620      	mov	r0, r4
   d5fe4:	f7fe fb0e 	bl	d4604 <HAL_Validate_Pin_Function>
   d5fe8:	2803      	cmp	r0, #3
   d5fea:	d104      	bne.n	d5ff6 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d5fec:	4620      	mov	r0, r4
}
   d5fee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d5ff2:	f7fe bb27 	b.w	d4644 <hal_adc_read>
}
   d5ff6:	2000      	movs	r0, #0
   d5ff8:	bd10      	pop	{r4, pc}
	...

000d5ffc <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d5ffc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d5ffe:	2300      	movs	r3, #0
   d6000:	2520      	movs	r5, #32
   d6002:	8043      	strh	r3, [r0, #2]
   d6004:	2314      	movs	r3, #20
{
   d6006:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d6008:	8003      	strh	r3, [r0, #0]
   d600a:	6085      	str	r5, [r0, #8]
   d600c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d600e:	4906      	ldr	r1, [pc, #24]	; (d6028 <_Z17acquireWireBufferv+0x2c>)
   d6010:	4628      	mov	r0, r5
   d6012:	f000 f83c 	bl	d608e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6016:	4904      	ldr	r1, [pc, #16]	; (d6028 <_Z17acquireWireBufferv+0x2c>)
	};
   d6018:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d601a:	4628      	mov	r0, r5
   d601c:	f000 f837 	bl	d608e <_ZnajRKSt9nothrow_t>
	};
   d6020:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d6022:	4620      	mov	r0, r4
   d6024:	bd38      	pop	{r3, r4, r5, pc}
   d6026:	bf00      	nop
   d6028:	000d6568 	.word	0x000d6568

000d602c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d602c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d602e:	4d0f      	ldr	r5, [pc, #60]	; (d606c <_Z19__fetch_global_Wirev+0x40>)
   d6030:	7829      	ldrb	r1, [r5, #0]
   d6032:	f3bf 8f5b 	dmb	ish
   d6036:	f011 0401 	ands.w	r4, r1, #1
{
   d603a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d603c:	d113      	bne.n	d6066 <_Z19__fetch_global_Wirev+0x3a>
   d603e:	4628      	mov	r0, r5
   d6040:	f7fe f82f 	bl	d40a2 <__cxa_guard_acquire>
   d6044:	b178      	cbz	r0, d6066 <_Z19__fetch_global_Wirev+0x3a>
   d6046:	a801      	add	r0, sp, #4
   d6048:	f7ff ffd8 	bl	d5ffc <_Z17acquireWireBufferv>
   d604c:	aa01      	add	r2, sp, #4
   d604e:	4621      	mov	r1, r4
   d6050:	4807      	ldr	r0, [pc, #28]	; (d6070 <_Z19__fetch_global_Wirev+0x44>)
   d6052:	f7ff fc53 	bl	d58fc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d6056:	4628      	mov	r0, r5
   d6058:	f7fe f828 	bl	d40ac <__cxa_guard_release>
   d605c:	4a05      	ldr	r2, [pc, #20]	; (d6074 <_Z19__fetch_global_Wirev+0x48>)
   d605e:	4906      	ldr	r1, [pc, #24]	; (d6078 <_Z19__fetch_global_Wirev+0x4c>)
   d6060:	4803      	ldr	r0, [pc, #12]	; (d6070 <_Z19__fetch_global_Wirev+0x44>)
   d6062:	f000 f80b 	bl	d607c <__aeabi_atexit>
	return wire;
}
   d6066:	4802      	ldr	r0, [pc, #8]	; (d6070 <_Z19__fetch_global_Wirev+0x44>)
   d6068:	b007      	add	sp, #28
   d606a:	bd30      	pop	{r4, r5, pc}
   d606c:	2003e7d8 	.word	0x2003e7d8
   d6070:	2003e7dc 	.word	0x2003e7dc
   d6074:	2003e724 	.word	0x2003e724
   d6078:	000d58a5 	.word	0x000d58a5

000d607c <__aeabi_atexit>:
   d607c:	460b      	mov	r3, r1
   d607e:	4601      	mov	r1, r0
   d6080:	4618      	mov	r0, r3
   d6082:	f000 b80d 	b.w	d60a0 <__cxa_atexit>

000d6086 <_ZdlPvj>:
   d6086:	f7fe b808 	b.w	d409a <_ZdlPv>

000d608a <_ZnwjRKSt9nothrow_t>:
   d608a:	f7fe b802 	b.w	d4092 <_Znwj>

000d608e <_ZnajRKSt9nothrow_t>:
   d608e:	f7fe b802 	b.w	d4096 <_Znaj>

000d6092 <_ZSt25__throw_bad_function_callv>:
   d6092:	b508      	push	{r3, lr}
   d6094:	f7fe fcaa 	bl	d49ec <abort>

000d6098 <atol>:
   d6098:	220a      	movs	r2, #10
   d609a:	2100      	movs	r1, #0
   d609c:	f000 b90c 	b.w	d62b8 <strtol>

000d60a0 <__cxa_atexit>:
   d60a0:	b510      	push	{r4, lr}
   d60a2:	4c05      	ldr	r4, [pc, #20]	; (d60b8 <__cxa_atexit+0x18>)
   d60a4:	4613      	mov	r3, r2
   d60a6:	b12c      	cbz	r4, d60b4 <__cxa_atexit+0x14>
   d60a8:	460a      	mov	r2, r1
   d60aa:	4601      	mov	r1, r0
   d60ac:	2002      	movs	r0, #2
   d60ae:	f3af 8000 	nop.w
   d60b2:	bd10      	pop	{r4, pc}
   d60b4:	4620      	mov	r0, r4
   d60b6:	e7fc      	b.n	d60b2 <__cxa_atexit+0x12>
   d60b8:	00000000 	.word	0x00000000

000d60bc <memcpy>:
   d60bc:	440a      	add	r2, r1
   d60be:	4291      	cmp	r1, r2
   d60c0:	f100 33ff 	add.w	r3, r0, #4294967295
   d60c4:	d100      	bne.n	d60c8 <memcpy+0xc>
   d60c6:	4770      	bx	lr
   d60c8:	b510      	push	{r4, lr}
   d60ca:	f811 4b01 	ldrb.w	r4, [r1], #1
   d60ce:	f803 4f01 	strb.w	r4, [r3, #1]!
   d60d2:	4291      	cmp	r1, r2
   d60d4:	d1f9      	bne.n	d60ca <memcpy+0xe>
   d60d6:	bd10      	pop	{r4, pc}

000d60d8 <memmove>:
   d60d8:	4288      	cmp	r0, r1
   d60da:	b510      	push	{r4, lr}
   d60dc:	eb01 0402 	add.w	r4, r1, r2
   d60e0:	d902      	bls.n	d60e8 <memmove+0x10>
   d60e2:	4284      	cmp	r4, r0
   d60e4:	4623      	mov	r3, r4
   d60e6:	d807      	bhi.n	d60f8 <memmove+0x20>
   d60e8:	1e43      	subs	r3, r0, #1
   d60ea:	42a1      	cmp	r1, r4
   d60ec:	d008      	beq.n	d6100 <memmove+0x28>
   d60ee:	f811 2b01 	ldrb.w	r2, [r1], #1
   d60f2:	f803 2f01 	strb.w	r2, [r3, #1]!
   d60f6:	e7f8      	b.n	d60ea <memmove+0x12>
   d60f8:	4402      	add	r2, r0
   d60fa:	4601      	mov	r1, r0
   d60fc:	428a      	cmp	r2, r1
   d60fe:	d100      	bne.n	d6102 <memmove+0x2a>
   d6100:	bd10      	pop	{r4, pc}
   d6102:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d6106:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d610a:	e7f7      	b.n	d60fc <memmove+0x24>

000d610c <memset>:
   d610c:	4402      	add	r2, r0
   d610e:	4603      	mov	r3, r0
   d6110:	4293      	cmp	r3, r2
   d6112:	d100      	bne.n	d6116 <memset+0xa>
   d6114:	4770      	bx	lr
   d6116:	f803 1b01 	strb.w	r1, [r3], #1
   d611a:	e7f9      	b.n	d6110 <memset+0x4>

000d611c <srand>:
   d611c:	b538      	push	{r3, r4, r5, lr}
   d611e:	4b0d      	ldr	r3, [pc, #52]	; (d6154 <srand+0x38>)
   d6120:	681d      	ldr	r5, [r3, #0]
   d6122:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6124:	4604      	mov	r4, r0
   d6126:	b97b      	cbnz	r3, d6148 <srand+0x2c>
   d6128:	2018      	movs	r0, #24
   d612a:	f7fe fc47 	bl	d49bc <malloc>
   d612e:	4a0a      	ldr	r2, [pc, #40]	; (d6158 <srand+0x3c>)
   d6130:	4b0a      	ldr	r3, [pc, #40]	; (d615c <srand+0x40>)
   d6132:	63a8      	str	r0, [r5, #56]	; 0x38
   d6134:	e9c0 2300 	strd	r2, r3, [r0]
   d6138:	4b09      	ldr	r3, [pc, #36]	; (d6160 <srand+0x44>)
   d613a:	6083      	str	r3, [r0, #8]
   d613c:	230b      	movs	r3, #11
   d613e:	8183      	strh	r3, [r0, #12]
   d6140:	2201      	movs	r2, #1
   d6142:	2300      	movs	r3, #0
   d6144:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6148:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d614a:	2200      	movs	r2, #0
   d614c:	611c      	str	r4, [r3, #16]
   d614e:	615a      	str	r2, [r3, #20]
   d6150:	bd38      	pop	{r3, r4, r5, pc}
   d6152:	bf00      	nop
   d6154:	2003e6c0 	.word	0x2003e6c0
   d6158:	abcd330e 	.word	0xabcd330e
   d615c:	e66d1234 	.word	0xe66d1234
   d6160:	0005deec 	.word	0x0005deec

000d6164 <strcmp>:
   d6164:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6168:	f811 3b01 	ldrb.w	r3, [r1], #1
   d616c:	2a01      	cmp	r2, #1
   d616e:	bf28      	it	cs
   d6170:	429a      	cmpcs	r2, r3
   d6172:	d0f7      	beq.n	d6164 <strcmp>
   d6174:	1ad0      	subs	r0, r2, r3
   d6176:	4770      	bx	lr

000d6178 <strdup>:
   d6178:	4b02      	ldr	r3, [pc, #8]	; (d6184 <strdup+0xc>)
   d617a:	4601      	mov	r1, r0
   d617c:	6818      	ldr	r0, [r3, #0]
   d617e:	f000 b803 	b.w	d6188 <_strdup_r>
   d6182:	bf00      	nop
   d6184:	2003e6c0 	.word	0x2003e6c0

000d6188 <_strdup_r>:
   d6188:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d618a:	4604      	mov	r4, r0
   d618c:	4608      	mov	r0, r1
   d618e:	460d      	mov	r5, r1
   d6190:	f000 f80f 	bl	d61b2 <strlen>
   d6194:	1c42      	adds	r2, r0, #1
   d6196:	4611      	mov	r1, r2
   d6198:	4620      	mov	r0, r4
   d619a:	9201      	str	r2, [sp, #4]
   d619c:	f7fe fc2e 	bl	d49fc <_malloc_r>
   d61a0:	4604      	mov	r4, r0
   d61a2:	b118      	cbz	r0, d61ac <_strdup_r+0x24>
   d61a4:	9a01      	ldr	r2, [sp, #4]
   d61a6:	4629      	mov	r1, r5
   d61a8:	f7ff ff88 	bl	d60bc <memcpy>
   d61ac:	4620      	mov	r0, r4
   d61ae:	b003      	add	sp, #12
   d61b0:	bd30      	pop	{r4, r5, pc}

000d61b2 <strlen>:
   d61b2:	4603      	mov	r3, r0
   d61b4:	f813 2b01 	ldrb.w	r2, [r3], #1
   d61b8:	2a00      	cmp	r2, #0
   d61ba:	d1fb      	bne.n	d61b4 <strlen+0x2>
   d61bc:	1a18      	subs	r0, r3, r0
   d61be:	3801      	subs	r0, #1
   d61c0:	4770      	bx	lr
	...

000d61c4 <_strtol_l.isra.0>:
   d61c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d61c8:	4e3a      	ldr	r6, [pc, #232]	; (d62b4 <_strtol_l.isra.0+0xf0>)
   d61ca:	4686      	mov	lr, r0
   d61cc:	468c      	mov	ip, r1
   d61ce:	4660      	mov	r0, ip
   d61d0:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d61d4:	5da5      	ldrb	r5, [r4, r6]
   d61d6:	f015 0508 	ands.w	r5, r5, #8
   d61da:	d1f8      	bne.n	d61ce <_strtol_l.isra.0+0xa>
   d61dc:	2c2d      	cmp	r4, #45	; 0x2d
   d61de:	d133      	bne.n	d6248 <_strtol_l.isra.0+0x84>
   d61e0:	f89c 4000 	ldrb.w	r4, [ip]
   d61e4:	f04f 0801 	mov.w	r8, #1
   d61e8:	f100 0c02 	add.w	ip, r0, #2
   d61ec:	2b00      	cmp	r3, #0
   d61ee:	d05c      	beq.n	d62aa <_strtol_l.isra.0+0xe6>
   d61f0:	2b10      	cmp	r3, #16
   d61f2:	d10c      	bne.n	d620e <_strtol_l.isra.0+0x4a>
   d61f4:	2c30      	cmp	r4, #48	; 0x30
   d61f6:	d10a      	bne.n	d620e <_strtol_l.isra.0+0x4a>
   d61f8:	f89c 0000 	ldrb.w	r0, [ip]
   d61fc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d6200:	2858      	cmp	r0, #88	; 0x58
   d6202:	d14d      	bne.n	d62a0 <_strtol_l.isra.0+0xdc>
   d6204:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d6208:	2310      	movs	r3, #16
   d620a:	f10c 0c02 	add.w	ip, ip, #2
   d620e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d6212:	3f01      	subs	r7, #1
   d6214:	2600      	movs	r6, #0
   d6216:	fbb7 f9f3 	udiv	r9, r7, r3
   d621a:	4630      	mov	r0, r6
   d621c:	fb03 7a19 	mls	sl, r3, r9, r7
   d6220:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d6224:	2d09      	cmp	r5, #9
   d6226:	d818      	bhi.n	d625a <_strtol_l.isra.0+0x96>
   d6228:	462c      	mov	r4, r5
   d622a:	42a3      	cmp	r3, r4
   d622c:	dd24      	ble.n	d6278 <_strtol_l.isra.0+0xb4>
   d622e:	1c75      	adds	r5, r6, #1
   d6230:	d007      	beq.n	d6242 <_strtol_l.isra.0+0x7e>
   d6232:	4581      	cmp	r9, r0
   d6234:	d31d      	bcc.n	d6272 <_strtol_l.isra.0+0xae>
   d6236:	d101      	bne.n	d623c <_strtol_l.isra.0+0x78>
   d6238:	45a2      	cmp	sl, r4
   d623a:	db1a      	blt.n	d6272 <_strtol_l.isra.0+0xae>
   d623c:	fb00 4003 	mla	r0, r0, r3, r4
   d6240:	2601      	movs	r6, #1
   d6242:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d6246:	e7eb      	b.n	d6220 <_strtol_l.isra.0+0x5c>
   d6248:	2c2b      	cmp	r4, #43	; 0x2b
   d624a:	bf08      	it	eq
   d624c:	f89c 4000 	ldrbeq.w	r4, [ip]
   d6250:	46a8      	mov	r8, r5
   d6252:	bf08      	it	eq
   d6254:	f100 0c02 	addeq.w	ip, r0, #2
   d6258:	e7c8      	b.n	d61ec <_strtol_l.isra.0+0x28>
   d625a:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d625e:	2d19      	cmp	r5, #25
   d6260:	d801      	bhi.n	d6266 <_strtol_l.isra.0+0xa2>
   d6262:	3c37      	subs	r4, #55	; 0x37
   d6264:	e7e1      	b.n	d622a <_strtol_l.isra.0+0x66>
   d6266:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d626a:	2d19      	cmp	r5, #25
   d626c:	d804      	bhi.n	d6278 <_strtol_l.isra.0+0xb4>
   d626e:	3c57      	subs	r4, #87	; 0x57
   d6270:	e7db      	b.n	d622a <_strtol_l.isra.0+0x66>
   d6272:	f04f 36ff 	mov.w	r6, #4294967295
   d6276:	e7e4      	b.n	d6242 <_strtol_l.isra.0+0x7e>
   d6278:	1c73      	adds	r3, r6, #1
   d627a:	d106      	bne.n	d628a <_strtol_l.isra.0+0xc6>
   d627c:	2322      	movs	r3, #34	; 0x22
   d627e:	f8ce 3000 	str.w	r3, [lr]
   d6282:	4638      	mov	r0, r7
   d6284:	b942      	cbnz	r2, d6298 <_strtol_l.isra.0+0xd4>
   d6286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d628a:	f1b8 0f00 	cmp.w	r8, #0
   d628e:	d000      	beq.n	d6292 <_strtol_l.isra.0+0xce>
   d6290:	4240      	negs	r0, r0
   d6292:	2a00      	cmp	r2, #0
   d6294:	d0f7      	beq.n	d6286 <_strtol_l.isra.0+0xc2>
   d6296:	b10e      	cbz	r6, d629c <_strtol_l.isra.0+0xd8>
   d6298:	f10c 31ff 	add.w	r1, ip, #4294967295
   d629c:	6011      	str	r1, [r2, #0]
   d629e:	e7f2      	b.n	d6286 <_strtol_l.isra.0+0xc2>
   d62a0:	2430      	movs	r4, #48	; 0x30
   d62a2:	2b00      	cmp	r3, #0
   d62a4:	d1b3      	bne.n	d620e <_strtol_l.isra.0+0x4a>
   d62a6:	2308      	movs	r3, #8
   d62a8:	e7b1      	b.n	d620e <_strtol_l.isra.0+0x4a>
   d62aa:	2c30      	cmp	r4, #48	; 0x30
   d62ac:	d0a4      	beq.n	d61f8 <_strtol_l.isra.0+0x34>
   d62ae:	230a      	movs	r3, #10
   d62b0:	e7ad      	b.n	d620e <_strtol_l.isra.0+0x4a>
   d62b2:	bf00      	nop
   d62b4:	000d656a 	.word	0x000d656a

000d62b8 <strtol>:
   d62b8:	4613      	mov	r3, r2
   d62ba:	460a      	mov	r2, r1
   d62bc:	4601      	mov	r1, r0
   d62be:	4802      	ldr	r0, [pc, #8]	; (d62c8 <strtol+0x10>)
   d62c0:	6800      	ldr	r0, [r0, #0]
   d62c2:	f7ff bf7f 	b.w	d61c4 <_strtol_l.isra.0>
   d62c6:	bf00      	nop
   d62c8:	2003e6c0 	.word	0x2003e6c0

000d62cc <dynalib_user>:
   d62cc:	000d401d 000d4059 000d4081 000d4085     .@..Y@...@...@..
   d62dc:	00000000 67676f74 7500656c 636f6c6e     ....toggle.unloc
   d62ec:	6341006b 74617574 7620726f 65756c61     k.Actuator value
   d62fc:	6e655300 20726f73 756c6176 63410065     .Sensor value.Ac
   d630c:	74617574 7420726f 00747365 76726573     tuator test.serv
   d631c:	614d006f 72657473 006e6f00 75746341     o.Master.on.Actu
   d632c:	726f7461 74636120 74617669 6f006465     ator activated.o
   d633c:	41006666 61757463 20726f74 63616564     ff.Actuator deac
   d634c:	61766974 00646574 6c696146 20657275     tivated.Failure 
   d635c:	63206e69 616d6d6f 6100646e 73656363     in command.acces
   d636c:	616d0073 72657473 6c6c6120 4c00776f     s.master allow.L
   d637c:	5f6b636f 6b6f6f68 6f6f6400 73692072     ock_hook.door is
   d638c:	65706f20 6f64006e 6920726f 6c632073      open.door is cl
   d639c:	6465736f 73616d00 20726574 796e6564     osed.master deny
   d63ac:	73616d00 20726574 6d6d6f63 20646e61     .master command 
   d63bc:	6f727265 6d003a72 65747361 6f632072     error:.master co
   d63cc:	6e616d6d 72652064 00726f72              mmand error.

000d63d8 <_ZTVN5spark13EthernetClassE>:
	...
   d63e0:	000d4a7b 000d4a71 000d4a67 000d4a5d     {J..qJ..gJ..]J..
   d63f0:	000d4a51 000d4a45 000d4a39 000d4a31     QJ..EJ..9J..1J..
   d6400:	000d4a27 000d4a1d 000d5a05 00707061     'J...J...Z..app.
   d6410:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
   d6420:	007a2553 74637361 00656d69              S%z.asctime.

000d642c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d6434:	000d4fb5 000d4fbb 000d4ff9 000d4fc9     .O...O...O...O..
   d6444:	000d4fb7                                .O..

000d6448 <_ZTV9IPAddress>:
	...
   d6450:	000d5575 000d5565 000d5567              uU..eU..gU..

000d645c <_ZTV9USBSerial>:
	...
   d6464:	000d564b 000d56b3 000d5689 000d4d5d     KV...V...V..]M..
   d6474:	000d567b 000d564d 000d565d 000d56ad     {V..MV..]V...V..
   d6484:	000d566d 000d5647                       mV..GV..

000d648c <_ZTV11USARTSerial>:
	...
   d6494:	000d574d 000d57b9 000d5791 000d4d5d     MW...W...W..]M..
   d64a4:	000d5761 000d577d 000d576f 000d578b     aW..}W..oW...W..
   d64b4:	000d574f 000d5753                       OW..SW..

000d64bc <_ZTV7TwoWire>:
	...
   d64c4:	000d58a5 000d58ef 000d58c7 000d58a7     .X...X...X...X..
   d64d4:	000d58cf 000d58d7 000d58df 000d58e7     .X...X...X...X..

000d64e4 <_ZTVN5spark9WiFiClassE>:
	...
   d64ec:	000d597f 000d5975 000d596b 000d5921     .Y..uY..kY..!Y..
   d64fc:	000d595f 000d5953 000d5947 000d593f     _Y..SY..GY..?Y..
   d650c:	000d5935 000d592b 000d5a05              5Y..+Y...Z..

000d6518 <_ZTVN5spark12NetworkClassE>:
	...
   d6520:	000d599d 000d59a7 000d59b1 000d59bb     .Y...Y...Y...Y..
   d6530:	000d59c5 000d59d1 000d59dd 000d59e9     .Y...Y...Y...Y..
   d6540:	000d59f1 000d59fb 000d5a05              .Y...Y...Z..

000d654c <_ZTVSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d6554:	000d5b1b 000d5b21 000d5b37 000d5b2f     .[..![..7[../[..
   d6564:	000d5b1d                                .[..

000d6568 <_ZSt7nothrow>:
	...

000d6569 <_ctype_>:
   d6569:	20202000 20202020 28282020 20282828     .         ((((( 
   d6579:	20202020 20202020 20202020 20202020                     
   d6589:	10108820 10101010 10101010 10101010      ...............
   d6599:	04040410 04040404 10040404 10101010     ................
   d65a9:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d65b9:	01010101 01010101 01010101 10101010     ................
   d65c9:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d65d9:	02020202 02020202 02020202 10101010     ................
   d65e9:	00000020 00000000 00000000 00000000      ...............
	...

000d666a <link_const_variable_data_end>:
	...

000d666c <link_constructors_location>:
   d666c:	000d45b5 	.word	0x000d45b5
   d6670:	000d4a85 	.word	0x000d4a85
   d6674:	000d4bc9 	.word	0x000d4bc9
   d6678:	000d4d35 	.word	0x000d4d35
   d667c:	000d4df1 	.word	0x000d4df1
   d6680:	000d4e01 	.word	0x000d4e01
   d6684:	000d4e75 	.word	0x000d4e75
   d6688:	000d5989 	.word	0x000d5989
   d668c:	000d5ad9 	.word	0x000d5ad9
